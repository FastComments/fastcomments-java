/*
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fastcomments.api;

import com.fastcomments.invoker.ApiException;
import com.fastcomments.model.APIError;
import com.fastcomments.model.BlockFromCommentPublic200Response;
import com.fastcomments.model.CheckedCommentsForBlocked200Response;
import com.fastcomments.model.CommentData;
import com.fastcomments.model.CommentTextUpdateRequest;
import com.fastcomments.model.CreateCommentPublic200Response;
import com.fastcomments.model.CreateFeedPostParams;
import com.fastcomments.model.CreateFeedPostPublic200Response;
import com.fastcomments.model.DeleteCommentPublic200Response;
import com.fastcomments.model.DeleteCommentVote200Response;
import com.fastcomments.model.FlagCommentPublic200Response;
import com.fastcomments.model.GetCommentText200Response;
import com.fastcomments.model.GetCommentVoteUserNames200Response;
import com.fastcomments.model.GetCommentsPublic200Response;
import com.fastcomments.model.GetEventLog200Response;
import com.fastcomments.model.GetFeedPostsPublic200Response;
import com.fastcomments.model.GetUserNotificationCount200Response;
import com.fastcomments.model.GetUserNotifications200Response;
import com.fastcomments.model.GetUserPresenceStatuses200Response;
import com.fastcomments.model.GetUserReactsPublic200Response;
import com.fastcomments.model.LockComment200Response;
import com.fastcomments.model.PinComment200Response;
import com.fastcomments.model.PublicBlockFromCommentParams;
import com.fastcomments.model.ReactBodyParams;
import com.fastcomments.model.ReactFeedPostPublic200Response;
import com.fastcomments.model.ResetUserNotifications200Response;
import com.fastcomments.model.SetCommentText200Response;
import com.fastcomments.model.SortDirections;
import com.fastcomments.model.UnBlockCommentPublic200Response;
import com.fastcomments.model.UpdateUserNotificationStatus200Response;
import com.fastcomments.model.UploadImageResponse;
import com.fastcomments.model.VoteBodyParams;
import com.fastcomments.model.VoteComment200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PublicApi
 */
@Disabled
public class PublicApiTest {

    private final PublicApi api = new PublicApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockFromCommentPublicTest() throws ApiException {
        String tenantId = null;
        String commentId = null;
        PublicBlockFromCommentParams publicBlockFromCommentParams = null;
        String sso = null;
        BlockFromCommentPublic200Response response = api.blockFromCommentPublic(tenantId, commentId, publicBlockFromCommentParams)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkedCommentsForBlockedTest() throws ApiException {
        String tenantId = null;
        String commentIds = null;
        String sso = null;
        CheckedCommentsForBlocked200Response response = api.checkedCommentsForBlocked(tenantId, commentIds)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCommentPublicTest() throws ApiException {
        String tenantId = null;
        String urlId = null;
        String broadcastId = null;
        CommentData commentData = null;
        String sessionId = null;
        String sso = null;
        CreateCommentPublic200Response response = api.createCommentPublic(tenantId, urlId, broadcastId, commentData)
                .sessionId(sessionId)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFeedPostPublicTest() throws ApiException {
        String tenantId = null;
        CreateFeedPostParams createFeedPostParams = null;
        String broadcastId = null;
        String sso = null;
        CreateFeedPostPublic200Response response = api.createFeedPostPublic(tenantId, createFeedPostParams)
                .broadcastId(broadcastId)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCommentPublicTest() throws ApiException {
        String tenantId = null;
        String commentId = null;
        String broadcastId = null;
        String editKey = null;
        DeleteCommentPublic200Response response = api.deleteCommentPublic(tenantId, commentId, broadcastId)
                .editKey(editKey)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCommentVoteTest() throws ApiException {
        String tenantId = null;
        String commentId = null;
        String voteId = null;
        String urlId = null;
        String broadcastId = null;
        String editKey = null;
        String sso = null;
        DeleteCommentVote200Response response = api.deleteCommentVote(tenantId, commentId, voteId, urlId, broadcastId)
                .editKey(editKey)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flagCommentPublicTest() throws ApiException {
        String tenantId = null;
        String commentId = null;
        Boolean isFlagged = null;
        String sso = null;
        FlagCommentPublic200Response response = api.flagCommentPublic(tenantId, commentId, isFlagged)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentTextTest() throws ApiException {
        String tenantId = null;
        String commentId = null;
        String editKey = null;
        String sso = null;
        GetCommentText200Response response = api.getCommentText(tenantId, commentId)
                .editKey(editKey)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentVoteUserNamesTest() throws ApiException {
        String tenantId = null;
        String commentId = null;
        Double direction = null;
        String sso = null;
        GetCommentVoteUserNames200Response response = api.getCommentVoteUserNames(tenantId, commentId, direction)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     *  req tenantId urlId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentsPublicTest() throws ApiException {
        String tenantId = null;
        String urlId = null;
        Integer page = null;
        SortDirections direction = null;
        String sso = null;
        Integer skip = null;
        Integer skipChildren = null;
        Integer limit = null;
        Integer limitChildren = null;
        Boolean countChildren = null;
        Long lastGenDate = null;
        String fetchPageForCommentId = null;
        Boolean includeConfig = null;
        Boolean countAll = null;
        Boolean includei10n = null;
        String locale = null;
        String modules = null;
        Boolean isCrawler = null;
        Boolean includeNotificationCount = null;
        Boolean asTree = null;
        Integer maxTreeDepth = null;
        Boolean useFullTranslationIds = null;
        String parentId = null;
        String searchText = null;
        List<String> hashTags = null;
        String userId = null;
        String customConfigStr = null;
        GetCommentsPublic200Response response = api.getCommentsPublic(tenantId, urlId)
                .page(page)
                .direction(direction)
                .sso(sso)
                .skip(skip)
                .skipChildren(skipChildren)
                .limit(limit)
                .limitChildren(limitChildren)
                .countChildren(countChildren)
                .lastGenDate(lastGenDate)
                .fetchPageForCommentId(fetchPageForCommentId)
                .includeConfig(includeConfig)
                .countAll(countAll)
                .includei10n(includei10n)
                .locale(locale)
                .modules(modules)
                .isCrawler(isCrawler)
                .includeNotificationCount(includeNotificationCount)
                .asTree(asTree)
                .maxTreeDepth(maxTreeDepth)
                .useFullTranslationIds(useFullTranslationIds)
                .parentId(parentId)
                .searchText(searchText)
                .hashTags(hashTags)
                .userId(userId)
                .customConfigStr(customConfigStr)
                .execute();
        // TODO: test validations
    }

    /**
     *  req tenantId urlId userIdWS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventLogTest() throws ApiException {
        String tenantId = null;
        String urlId = null;
        String userIdWS = null;
        Long startTime = null;
        Long endTime = null;
        GetEventLog200Response response = api.getEventLog(tenantId, urlId, userIdWS, startTime, endTime)
                .execute();
        // TODO: test validations
    }

    /**
     *  req tenantId afterId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeedPostsPublicTest() throws ApiException {
        String tenantId = null;
        String afterId = null;
        Integer limit = null;
        List<String> tags = null;
        String sso = null;
        GetFeedPostsPublic200Response response = api.getFeedPostsPublic(tenantId)
                .afterId(afterId)
                .limit(limit)
                .tags(tags)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     *  req tenantId urlId userIdWS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGlobalEventLogTest() throws ApiException {
        String tenantId = null;
        String urlId = null;
        String userIdWS = null;
        Long startTime = null;
        Long endTime = null;
        GetEventLog200Response response = api.getGlobalEventLog(tenantId, urlId, userIdWS, startTime, endTime)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserNotificationCountTest() throws ApiException {
        String tenantId = null;
        String sso = null;
        GetUserNotificationCount200Response response = api.getUserNotificationCount(tenantId)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserNotificationsTest() throws ApiException {
        String tenantId = null;
        Double pageSize = null;
        String afterId = null;
        Boolean includeContext = null;
        Double afterCreatedAt = null;
        Boolean unreadOnly = null;
        Boolean dmOnly = null;
        Boolean noDm = null;
        Boolean includeTranslations = null;
        String sso = null;
        GetUserNotifications200Response response = api.getUserNotifications(tenantId)
                .pageSize(pageSize)
                .afterId(afterId)
                .includeContext(includeContext)
                .afterCreatedAt(afterCreatedAt)
                .unreadOnly(unreadOnly)
                .dmOnly(dmOnly)
                .noDm(noDm)
                .includeTranslations(includeTranslations)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPresenceStatusesTest() throws ApiException {
        String tenantId = null;
        String urlIdWS = null;
        String userIds = null;
        GetUserPresenceStatuses200Response response = api.getUserPresenceStatuses(tenantId, urlIdWS, userIds)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserReactsPublicTest() throws ApiException {
        String tenantId = null;
        List<String> postIds = null;
        String sso = null;
        GetUserReactsPublic200Response response = api.getUserReactsPublic(tenantId)
                .postIds(postIds)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lockCommentTest() throws ApiException {
        String tenantId = null;
        String commentId = null;
        String broadcastId = null;
        String sso = null;
        LockComment200Response response = api.lockComment(tenantId, commentId, broadcastId)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pinCommentTest() throws ApiException {
        String tenantId = null;
        String commentId = null;
        String broadcastId = null;
        String sso = null;
        PinComment200Response response = api.pinComment(tenantId, commentId, broadcastId)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactFeedPostPublicTest() throws ApiException {
        String tenantId = null;
        String postId = null;
        ReactBodyParams reactBodyParams = null;
        Boolean isUndo = null;
        String broadcastId = null;
        String sso = null;
        ReactFeedPostPublic200Response response = api.reactFeedPostPublic(tenantId, postId, reactBodyParams)
                .isUndo(isUndo)
                .broadcastId(broadcastId)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetUserNotificationCountTest() throws ApiException {
        String tenantId = null;
        String sso = null;
        ResetUserNotifications200Response response = api.resetUserNotificationCount(tenantId)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetUserNotificationsTest() throws ApiException {
        String tenantId = null;
        String afterId = null;
        Double afterCreatedAt = null;
        Boolean unreadOnly = null;
        Boolean dmOnly = null;
        Boolean noDm = null;
        String sso = null;
        ResetUserNotifications200Response response = api.resetUserNotifications(tenantId)
                .afterId(afterId)
                .afterCreatedAt(afterCreatedAt)
                .unreadOnly(unreadOnly)
                .dmOnly(dmOnly)
                .noDm(noDm)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setCommentTextTest() throws ApiException {
        String tenantId = null;
        String commentId = null;
        String broadcastId = null;
        CommentTextUpdateRequest commentTextUpdateRequest = null;
        String editKey = null;
        String sso = null;
        SetCommentText200Response response = api.setCommentText(tenantId, commentId, broadcastId, commentTextUpdateRequest)
                .editKey(editKey)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unBlockCommentPublicTest() throws ApiException {
        String tenantId = null;
        String commentId = null;
        PublicBlockFromCommentParams publicBlockFromCommentParams = null;
        String sso = null;
        UnBlockCommentPublic200Response response = api.unBlockCommentPublic(tenantId, commentId, publicBlockFromCommentParams)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unLockCommentTest() throws ApiException {
        String tenantId = null;
        String commentId = null;
        String broadcastId = null;
        String sso = null;
        LockComment200Response response = api.unLockComment(tenantId, commentId, broadcastId)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unPinCommentTest() throws ApiException {
        String tenantId = null;
        String commentId = null;
        String broadcastId = null;
        String sso = null;
        PinComment200Response response = api.unPinComment(tenantId, commentId, broadcastId)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * Enable or disable notifications for a specific comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserNotificationCommentSubscriptionStatusTest() throws ApiException {
        String tenantId = null;
        String notificationId = null;
        String optedInOrOut = null;
        String commentId = null;
        String sso = null;
        UpdateUserNotificationStatus200Response response = api.updateUserNotificationCommentSubscriptionStatus(tenantId, notificationId, optedInOrOut, commentId)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * Enable or disable notifications for a page. When users are subscribed to a page, notifications are created for new root comments, and also
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserNotificationPageSubscriptionStatusTest() throws ApiException {
        String tenantId = null;
        String urlId = null;
        String url = null;
        String pageTitle = null;
        String subscribedOrUnsubscribed = null;
        String sso = null;
        UpdateUserNotificationStatus200Response response = api.updateUserNotificationPageSubscriptionStatus(tenantId, urlId, url, pageTitle, subscribedOrUnsubscribed)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserNotificationStatusTest() throws ApiException {
        String tenantId = null;
        String notificationId = null;
        String newStatus = null;
        String sso = null;
        UpdateUserNotificationStatus200Response response = api.updateUserNotificationStatus(tenantId, notificationId, newStatus)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload and resize an image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadImageTest() throws ApiException {
        String tenantId = null;
        String sizes = null;
        UploadImageResponse response = api.uploadImage(tenantId)
                .sizes(sizes)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void voteCommentTest() throws ApiException {
        String tenantId = null;
        String commentId = null;
        String urlId = null;
        String broadcastId = null;
        VoteBodyParams voteBodyParams = null;
        String sessionId = null;
        String sso = null;
        VoteComment200Response response = api.voteComment(tenantId, commentId, urlId, broadcastId, voteBodyParams)
                .sessionId(sessionId)
                .sso(sso)
                .execute();
        // TODO: test validations
    }

}
