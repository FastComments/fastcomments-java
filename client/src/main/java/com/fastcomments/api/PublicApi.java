/*
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fastcomments.api;

import com.fastcomments.invoker.ApiCallback;
import com.fastcomments.invoker.ApiClient;
import com.fastcomments.invoker.ApiException;
import com.fastcomments.invoker.ApiResponse;
import com.fastcomments.invoker.Configuration;
import com.fastcomments.invoker.Pair;
import com.fastcomments.invoker.ProgressRequestBody;
import com.fastcomments.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.fastcomments.model.APIError;
import com.fastcomments.model.BlockFromCommentPublic200Response;
import com.fastcomments.model.CheckedCommentsForBlocked200Response;
import com.fastcomments.model.CommentData;
import com.fastcomments.model.CommentTextUpdateRequest;
import com.fastcomments.model.CreateCommentPublic200Response;
import com.fastcomments.model.CreateFeedPostParams;
import com.fastcomments.model.CreateFeedPostPublic200Response;
import com.fastcomments.model.DeleteCommentPublic200Response;
import com.fastcomments.model.DeleteCommentVote200Response;
import com.fastcomments.model.FlagCommentPublic200Response;
import com.fastcomments.model.GetCommentText200Response;
import com.fastcomments.model.GetCommentVoteUserNames200Response;
import com.fastcomments.model.GetCommentsPublic200Response;
import com.fastcomments.model.GetEventLog200Response;
import com.fastcomments.model.GetFeedPostsPublic200Response;
import com.fastcomments.model.GetUserNotificationCount200Response;
import com.fastcomments.model.GetUserNotifications200Response;
import com.fastcomments.model.GetUserPresenceStatuses200Response;
import com.fastcomments.model.GetUserReactsPublic200Response;
import com.fastcomments.model.LockComment200Response;
import com.fastcomments.model.PinComment200Response;
import com.fastcomments.model.PublicBlockFromCommentParams;
import com.fastcomments.model.ReactBodyParams;
import com.fastcomments.model.ReactFeedPostPublic200Response;
import com.fastcomments.model.ResetUserNotifications200Response;
import com.fastcomments.model.SetCommentText200Response;
import com.fastcomments.model.SizePreset;
import com.fastcomments.model.SortDirections;
import com.fastcomments.model.UnBlockCommentPublic200Response;
import com.fastcomments.model.UpdateUserNotificationStatus200Response;
import com.fastcomments.model.UploadImageResponse;
import com.fastcomments.model.VoteBodyParams;
import com.fastcomments.model.VoteComment200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PublicApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PublicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PublicApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call blockFromCommentPublicCall(String tenantId, String commentId, PublicBlockFromCommentParams publicBlockFromCommentParams, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publicBlockFromCommentParams;

        // create path and map variables
        String localVarPath = "/block-from-comment/{commentId}"
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockFromCommentPublicValidateBeforeCall(String tenantId, String commentId, PublicBlockFromCommentParams publicBlockFromCommentParams, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling blockFromCommentPublic(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling blockFromCommentPublic(Async)");
        }

        // verify the required parameter 'publicBlockFromCommentParams' is set
        if (publicBlockFromCommentParams == null) {
            throw new ApiException("Missing the required parameter 'publicBlockFromCommentParams' when calling blockFromCommentPublic(Async)");
        }

        return blockFromCommentPublicCall(tenantId, commentId, publicBlockFromCommentParams, sso, _callback);

    }


    private ApiResponse<BlockFromCommentPublic200Response> blockFromCommentPublicWithHttpInfo(String tenantId, String commentId, PublicBlockFromCommentParams publicBlockFromCommentParams, String sso) throws ApiException {
        okhttp3.Call localVarCall = blockFromCommentPublicValidateBeforeCall(tenantId, commentId, publicBlockFromCommentParams, sso, null);
        Type localVarReturnType = new TypeToken<BlockFromCommentPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call blockFromCommentPublicAsync(String tenantId, String commentId, PublicBlockFromCommentParams publicBlockFromCommentParams, String sso, final ApiCallback<BlockFromCommentPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockFromCommentPublicValidateBeforeCall(tenantId, commentId, publicBlockFromCommentParams, sso, _callback);
        Type localVarReturnType = new TypeToken<BlockFromCommentPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIblockFromCommentPublicRequest {
        private final String tenantId;
        private final String commentId;
        private final PublicBlockFromCommentParams publicBlockFromCommentParams;
        private String sso;

        private APIblockFromCommentPublicRequest(String tenantId, String commentId, PublicBlockFromCommentParams publicBlockFromCommentParams) {
            this.tenantId = tenantId;
            this.commentId = commentId;
            this.publicBlockFromCommentParams = publicBlockFromCommentParams;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIblockFromCommentPublicRequest
         */
        public APIblockFromCommentPublicRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for blockFromCommentPublic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return blockFromCommentPublicCall(tenantId, commentId, publicBlockFromCommentParams, sso, _callback);
        }

        /**
         * Execute blockFromCommentPublic request
         * @return BlockFromCommentPublic200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public BlockFromCommentPublic200Response execute() throws ApiException {
            ApiResponse<BlockFromCommentPublic200Response> localVarResp = blockFromCommentPublicWithHttpInfo(tenantId, commentId, publicBlockFromCommentParams, sso);
            return localVarResp.getData();
        }

        /**
         * Execute blockFromCommentPublic request with HTTP info returned
         * @return ApiResponse&lt;BlockFromCommentPublic200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BlockFromCommentPublic200Response> executeWithHttpInfo() throws ApiException {
            return blockFromCommentPublicWithHttpInfo(tenantId, commentId, publicBlockFromCommentParams, sso);
        }

        /**
         * Execute blockFromCommentPublic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BlockFromCommentPublic200Response> _callback) throws ApiException {
            return blockFromCommentPublicAsync(tenantId, commentId, publicBlockFromCommentParams, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param commentId  (required)
     * @param publicBlockFromCommentParams  (required)
     * @return APIblockFromCommentPublicRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIblockFromCommentPublicRequest blockFromCommentPublic(String tenantId, String commentId, PublicBlockFromCommentParams publicBlockFromCommentParams) {
        return new APIblockFromCommentPublicRequest(tenantId, commentId, publicBlockFromCommentParams);
    }
    private okhttp3.Call checkedCommentsForBlockedCall(String tenantId, String commentIds, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/check-blocked-comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (commentIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commentIds", commentIds));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkedCommentsForBlockedValidateBeforeCall(String tenantId, String commentIds, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling checkedCommentsForBlocked(Async)");
        }

        // verify the required parameter 'commentIds' is set
        if (commentIds == null) {
            throw new ApiException("Missing the required parameter 'commentIds' when calling checkedCommentsForBlocked(Async)");
        }

        return checkedCommentsForBlockedCall(tenantId, commentIds, sso, _callback);

    }


    private ApiResponse<CheckedCommentsForBlocked200Response> checkedCommentsForBlockedWithHttpInfo(String tenantId, String commentIds, String sso) throws ApiException {
        okhttp3.Call localVarCall = checkedCommentsForBlockedValidateBeforeCall(tenantId, commentIds, sso, null);
        Type localVarReturnType = new TypeToken<CheckedCommentsForBlocked200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkedCommentsForBlockedAsync(String tenantId, String commentIds, String sso, final ApiCallback<CheckedCommentsForBlocked200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkedCommentsForBlockedValidateBeforeCall(tenantId, commentIds, sso, _callback);
        Type localVarReturnType = new TypeToken<CheckedCommentsForBlocked200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcheckedCommentsForBlockedRequest {
        private final String tenantId;
        private final String commentIds;
        private String sso;

        private APIcheckedCommentsForBlockedRequest(String tenantId, String commentIds) {
            this.tenantId = tenantId;
            this.commentIds = commentIds;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIcheckedCommentsForBlockedRequest
         */
        public APIcheckedCommentsForBlockedRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for checkedCommentsForBlocked
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkedCommentsForBlockedCall(tenantId, commentIds, sso, _callback);
        }

        /**
         * Execute checkedCommentsForBlocked request
         * @return CheckedCommentsForBlocked200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public CheckedCommentsForBlocked200Response execute() throws ApiException {
            ApiResponse<CheckedCommentsForBlocked200Response> localVarResp = checkedCommentsForBlockedWithHttpInfo(tenantId, commentIds, sso);
            return localVarResp.getData();
        }

        /**
         * Execute checkedCommentsForBlocked request with HTTP info returned
         * @return ApiResponse&lt;CheckedCommentsForBlocked200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckedCommentsForBlocked200Response> executeWithHttpInfo() throws ApiException {
            return checkedCommentsForBlockedWithHttpInfo(tenantId, commentIds, sso);
        }

        /**
         * Execute checkedCommentsForBlocked request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckedCommentsForBlocked200Response> _callback) throws ApiException {
            return checkedCommentsForBlockedAsync(tenantId, commentIds, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param commentIds A comma separated list of comment ids. (required)
     * @return APIcheckedCommentsForBlockedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIcheckedCommentsForBlockedRequest checkedCommentsForBlocked(String tenantId, String commentIds) {
        return new APIcheckedCommentsForBlockedRequest(tenantId, commentIds);
    }
    private okhttp3.Call createCommentPublicCall(String tenantId, String urlId, String broadcastId, CommentData commentData, String sessionId, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commentData;

        // create path and map variables
        String localVarPath = "/comments/{tenantId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (urlId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlId", urlId));
        }

        if (broadcastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("broadcastId", broadcastId));
        }

        if (sessionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionId", sessionId));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCommentPublicValidateBeforeCall(String tenantId, String urlId, String broadcastId, CommentData commentData, String sessionId, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling createCommentPublic(Async)");
        }

        // verify the required parameter 'urlId' is set
        if (urlId == null) {
            throw new ApiException("Missing the required parameter 'urlId' when calling createCommentPublic(Async)");
        }

        // verify the required parameter 'broadcastId' is set
        if (broadcastId == null) {
            throw new ApiException("Missing the required parameter 'broadcastId' when calling createCommentPublic(Async)");
        }

        // verify the required parameter 'commentData' is set
        if (commentData == null) {
            throw new ApiException("Missing the required parameter 'commentData' when calling createCommentPublic(Async)");
        }

        return createCommentPublicCall(tenantId, urlId, broadcastId, commentData, sessionId, sso, _callback);

    }


    private ApiResponse<CreateCommentPublic200Response> createCommentPublicWithHttpInfo(String tenantId, String urlId, String broadcastId, CommentData commentData, String sessionId, String sso) throws ApiException {
        okhttp3.Call localVarCall = createCommentPublicValidateBeforeCall(tenantId, urlId, broadcastId, commentData, sessionId, sso, null);
        Type localVarReturnType = new TypeToken<CreateCommentPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCommentPublicAsync(String tenantId, String urlId, String broadcastId, CommentData commentData, String sessionId, String sso, final ApiCallback<CreateCommentPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCommentPublicValidateBeforeCall(tenantId, urlId, broadcastId, commentData, sessionId, sso, _callback);
        Type localVarReturnType = new TypeToken<CreateCommentPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateCommentPublicRequest {
        private final String tenantId;
        private final String urlId;
        private final String broadcastId;
        private final CommentData commentData;
        private String sessionId;
        private String sso;

        private APIcreateCommentPublicRequest(String tenantId, String urlId, String broadcastId, CommentData commentData) {
            this.tenantId = tenantId;
            this.urlId = urlId;
            this.broadcastId = broadcastId;
            this.commentData = commentData;
        }

        /**
         * Set sessionId
         * @param sessionId  (optional)
         * @return APIcreateCommentPublicRequest
         */
        public APIcreateCommentPublicRequest sessionId(String sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIcreateCommentPublicRequest
         */
        public APIcreateCommentPublicRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for createCommentPublic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createCommentPublicCall(tenantId, urlId, broadcastId, commentData, sessionId, sso, _callback);
        }

        /**
         * Execute createCommentPublic request
         * @return CreateCommentPublic200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public CreateCommentPublic200Response execute() throws ApiException {
            ApiResponse<CreateCommentPublic200Response> localVarResp = createCommentPublicWithHttpInfo(tenantId, urlId, broadcastId, commentData, sessionId, sso);
            return localVarResp.getData();
        }

        /**
         * Execute createCommentPublic request with HTTP info returned
         * @return ApiResponse&lt;CreateCommentPublic200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateCommentPublic200Response> executeWithHttpInfo() throws ApiException {
            return createCommentPublicWithHttpInfo(tenantId, urlId, broadcastId, commentData, sessionId, sso);
        }

        /**
         * Execute createCommentPublic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateCommentPublic200Response> _callback) throws ApiException {
            return createCommentPublicAsync(tenantId, urlId, broadcastId, commentData, sessionId, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param urlId  (required)
     * @param broadcastId  (required)
     * @param commentData  (required)
     * @return APIcreateCommentPublicRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateCommentPublicRequest createCommentPublic(String tenantId, String urlId, String broadcastId, CommentData commentData) {
        return new APIcreateCommentPublicRequest(tenantId, urlId, broadcastId, commentData);
    }
    private okhttp3.Call createFeedPostPublicCall(String tenantId, CreateFeedPostParams createFeedPostParams, String broadcastId, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFeedPostParams;

        // create path and map variables
        String localVarPath = "/feed-posts/{tenantId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (broadcastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("broadcastId", broadcastId));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFeedPostPublicValidateBeforeCall(String tenantId, CreateFeedPostParams createFeedPostParams, String broadcastId, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling createFeedPostPublic(Async)");
        }

        // verify the required parameter 'createFeedPostParams' is set
        if (createFeedPostParams == null) {
            throw new ApiException("Missing the required parameter 'createFeedPostParams' when calling createFeedPostPublic(Async)");
        }

        return createFeedPostPublicCall(tenantId, createFeedPostParams, broadcastId, sso, _callback);

    }


    private ApiResponse<CreateFeedPostPublic200Response> createFeedPostPublicWithHttpInfo(String tenantId, CreateFeedPostParams createFeedPostParams, String broadcastId, String sso) throws ApiException {
        okhttp3.Call localVarCall = createFeedPostPublicValidateBeforeCall(tenantId, createFeedPostParams, broadcastId, sso, null);
        Type localVarReturnType = new TypeToken<CreateFeedPostPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFeedPostPublicAsync(String tenantId, CreateFeedPostParams createFeedPostParams, String broadcastId, String sso, final ApiCallback<CreateFeedPostPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFeedPostPublicValidateBeforeCall(tenantId, createFeedPostParams, broadcastId, sso, _callback);
        Type localVarReturnType = new TypeToken<CreateFeedPostPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateFeedPostPublicRequest {
        private final String tenantId;
        private final CreateFeedPostParams createFeedPostParams;
        private String broadcastId;
        private String sso;

        private APIcreateFeedPostPublicRequest(String tenantId, CreateFeedPostParams createFeedPostParams) {
            this.tenantId = tenantId;
            this.createFeedPostParams = createFeedPostParams;
        }

        /**
         * Set broadcastId
         * @param broadcastId  (optional)
         * @return APIcreateFeedPostPublicRequest
         */
        public APIcreateFeedPostPublicRequest broadcastId(String broadcastId) {
            this.broadcastId = broadcastId;
            return this;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIcreateFeedPostPublicRequest
         */
        public APIcreateFeedPostPublicRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for createFeedPostPublic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createFeedPostPublicCall(tenantId, createFeedPostParams, broadcastId, sso, _callback);
        }

        /**
         * Execute createFeedPostPublic request
         * @return CreateFeedPostPublic200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public CreateFeedPostPublic200Response execute() throws ApiException {
            ApiResponse<CreateFeedPostPublic200Response> localVarResp = createFeedPostPublicWithHttpInfo(tenantId, createFeedPostParams, broadcastId, sso);
            return localVarResp.getData();
        }

        /**
         * Execute createFeedPostPublic request with HTTP info returned
         * @return ApiResponse&lt;CreateFeedPostPublic200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateFeedPostPublic200Response> executeWithHttpInfo() throws ApiException {
            return createFeedPostPublicWithHttpInfo(tenantId, createFeedPostParams, broadcastId, sso);
        }

        /**
         * Execute createFeedPostPublic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateFeedPostPublic200Response> _callback) throws ApiException {
            return createFeedPostPublicAsync(tenantId, createFeedPostParams, broadcastId, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param createFeedPostParams  (required)
     * @return APIcreateFeedPostPublicRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateFeedPostPublicRequest createFeedPostPublic(String tenantId, CreateFeedPostParams createFeedPostParams) {
        return new APIcreateFeedPostPublicRequest(tenantId, createFeedPostParams);
    }
    private okhttp3.Call deleteCommentPublicCall(String tenantId, String commentId, String broadcastId, String editKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comments/{tenantId}/{commentId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (broadcastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("broadcastId", broadcastId));
        }

        if (editKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("editKey", editKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommentPublicValidateBeforeCall(String tenantId, String commentId, String broadcastId, String editKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling deleteCommentPublic(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteCommentPublic(Async)");
        }

        // verify the required parameter 'broadcastId' is set
        if (broadcastId == null) {
            throw new ApiException("Missing the required parameter 'broadcastId' when calling deleteCommentPublic(Async)");
        }

        return deleteCommentPublicCall(tenantId, commentId, broadcastId, editKey, _callback);

    }


    private ApiResponse<DeleteCommentPublic200Response> deleteCommentPublicWithHttpInfo(String tenantId, String commentId, String broadcastId, String editKey) throws ApiException {
        okhttp3.Call localVarCall = deleteCommentPublicValidateBeforeCall(tenantId, commentId, broadcastId, editKey, null);
        Type localVarReturnType = new TypeToken<DeleteCommentPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCommentPublicAsync(String tenantId, String commentId, String broadcastId, String editKey, final ApiCallback<DeleteCommentPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommentPublicValidateBeforeCall(tenantId, commentId, broadcastId, editKey, _callback);
        Type localVarReturnType = new TypeToken<DeleteCommentPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteCommentPublicRequest {
        private final String tenantId;
        private final String commentId;
        private final String broadcastId;
        private String editKey;

        private APIdeleteCommentPublicRequest(String tenantId, String commentId, String broadcastId) {
            this.tenantId = tenantId;
            this.commentId = commentId;
            this.broadcastId = broadcastId;
        }

        /**
         * Set editKey
         * @param editKey  (optional)
         * @return APIdeleteCommentPublicRequest
         */
        public APIdeleteCommentPublicRequest editKey(String editKey) {
            this.editKey = editKey;
            return this;
        }

        /**
         * Build call for deleteCommentPublic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCommentPublicCall(tenantId, commentId, broadcastId, editKey, _callback);
        }

        /**
         * Execute deleteCommentPublic request
         * @return DeleteCommentPublic200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public DeleteCommentPublic200Response execute() throws ApiException {
            ApiResponse<DeleteCommentPublic200Response> localVarResp = deleteCommentPublicWithHttpInfo(tenantId, commentId, broadcastId, editKey);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCommentPublic request with HTTP info returned
         * @return ApiResponse&lt;DeleteCommentPublic200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteCommentPublic200Response> executeWithHttpInfo() throws ApiException {
            return deleteCommentPublicWithHttpInfo(tenantId, commentId, broadcastId, editKey);
        }

        /**
         * Execute deleteCommentPublic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteCommentPublic200Response> _callback) throws ApiException {
            return deleteCommentPublicAsync(tenantId, commentId, broadcastId, editKey, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param commentId  (required)
     * @param broadcastId  (required)
     * @return APIdeleteCommentPublicRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteCommentPublicRequest deleteCommentPublic(String tenantId, String commentId, String broadcastId) {
        return new APIdeleteCommentPublicRequest(tenantId, commentId, broadcastId);
    }
    private okhttp3.Call deleteCommentVoteCall(String tenantId, String commentId, String voteId, String urlId, String broadcastId, String editKey, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comments/{tenantId}/{commentId}/vote/{voteId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()))
            .replace("{" + "voteId" + "}", localVarApiClient.escapeString(voteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (urlId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlId", urlId));
        }

        if (broadcastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("broadcastId", broadcastId));
        }

        if (editKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("editKey", editKey));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommentVoteValidateBeforeCall(String tenantId, String commentId, String voteId, String urlId, String broadcastId, String editKey, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling deleteCommentVote(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteCommentVote(Async)");
        }

        // verify the required parameter 'voteId' is set
        if (voteId == null) {
            throw new ApiException("Missing the required parameter 'voteId' when calling deleteCommentVote(Async)");
        }

        // verify the required parameter 'urlId' is set
        if (urlId == null) {
            throw new ApiException("Missing the required parameter 'urlId' when calling deleteCommentVote(Async)");
        }

        // verify the required parameter 'broadcastId' is set
        if (broadcastId == null) {
            throw new ApiException("Missing the required parameter 'broadcastId' when calling deleteCommentVote(Async)");
        }

        return deleteCommentVoteCall(tenantId, commentId, voteId, urlId, broadcastId, editKey, sso, _callback);

    }


    private ApiResponse<DeleteCommentVote200Response> deleteCommentVoteWithHttpInfo(String tenantId, String commentId, String voteId, String urlId, String broadcastId, String editKey, String sso) throws ApiException {
        okhttp3.Call localVarCall = deleteCommentVoteValidateBeforeCall(tenantId, commentId, voteId, urlId, broadcastId, editKey, sso, null);
        Type localVarReturnType = new TypeToken<DeleteCommentVote200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCommentVoteAsync(String tenantId, String commentId, String voteId, String urlId, String broadcastId, String editKey, String sso, final ApiCallback<DeleteCommentVote200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommentVoteValidateBeforeCall(tenantId, commentId, voteId, urlId, broadcastId, editKey, sso, _callback);
        Type localVarReturnType = new TypeToken<DeleteCommentVote200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteCommentVoteRequest {
        private final String tenantId;
        private final String commentId;
        private final String voteId;
        private final String urlId;
        private final String broadcastId;
        private String editKey;
        private String sso;

        private APIdeleteCommentVoteRequest(String tenantId, String commentId, String voteId, String urlId, String broadcastId) {
            this.tenantId = tenantId;
            this.commentId = commentId;
            this.voteId = voteId;
            this.urlId = urlId;
            this.broadcastId = broadcastId;
        }

        /**
         * Set editKey
         * @param editKey  (optional)
         * @return APIdeleteCommentVoteRequest
         */
        public APIdeleteCommentVoteRequest editKey(String editKey) {
            this.editKey = editKey;
            return this;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIdeleteCommentVoteRequest
         */
        public APIdeleteCommentVoteRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for deleteCommentVote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCommentVoteCall(tenantId, commentId, voteId, urlId, broadcastId, editKey, sso, _callback);
        }

        /**
         * Execute deleteCommentVote request
         * @return DeleteCommentVote200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public DeleteCommentVote200Response execute() throws ApiException {
            ApiResponse<DeleteCommentVote200Response> localVarResp = deleteCommentVoteWithHttpInfo(tenantId, commentId, voteId, urlId, broadcastId, editKey, sso);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCommentVote request with HTTP info returned
         * @return ApiResponse&lt;DeleteCommentVote200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteCommentVote200Response> executeWithHttpInfo() throws ApiException {
            return deleteCommentVoteWithHttpInfo(tenantId, commentId, voteId, urlId, broadcastId, editKey, sso);
        }

        /**
         * Execute deleteCommentVote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteCommentVote200Response> _callback) throws ApiException {
            return deleteCommentVoteAsync(tenantId, commentId, voteId, urlId, broadcastId, editKey, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param commentId  (required)
     * @param voteId  (required)
     * @param urlId  (required)
     * @param broadcastId  (required)
     * @return APIdeleteCommentVoteRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteCommentVoteRequest deleteCommentVote(String tenantId, String commentId, String voteId, String urlId, String broadcastId) {
        return new APIdeleteCommentVoteRequest(tenantId, commentId, voteId, urlId, broadcastId);
    }
    private okhttp3.Call flagCommentPublicCall(String tenantId, String commentId, Boolean isFlagged, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/flag-comment/{commentId}"
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (isFlagged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isFlagged", isFlagged));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flagCommentPublicValidateBeforeCall(String tenantId, String commentId, Boolean isFlagged, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling flagCommentPublic(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling flagCommentPublic(Async)");
        }

        // verify the required parameter 'isFlagged' is set
        if (isFlagged == null) {
            throw new ApiException("Missing the required parameter 'isFlagged' when calling flagCommentPublic(Async)");
        }

        return flagCommentPublicCall(tenantId, commentId, isFlagged, sso, _callback);

    }


    private ApiResponse<FlagCommentPublic200Response> flagCommentPublicWithHttpInfo(String tenantId, String commentId, Boolean isFlagged, String sso) throws ApiException {
        okhttp3.Call localVarCall = flagCommentPublicValidateBeforeCall(tenantId, commentId, isFlagged, sso, null);
        Type localVarReturnType = new TypeToken<FlagCommentPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call flagCommentPublicAsync(String tenantId, String commentId, Boolean isFlagged, String sso, final ApiCallback<FlagCommentPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = flagCommentPublicValidateBeforeCall(tenantId, commentId, isFlagged, sso, _callback);
        Type localVarReturnType = new TypeToken<FlagCommentPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIflagCommentPublicRequest {
        private final String tenantId;
        private final String commentId;
        private final Boolean isFlagged;
        private String sso;

        private APIflagCommentPublicRequest(String tenantId, String commentId, Boolean isFlagged) {
            this.tenantId = tenantId;
            this.commentId = commentId;
            this.isFlagged = isFlagged;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIflagCommentPublicRequest
         */
        public APIflagCommentPublicRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for flagCommentPublic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return flagCommentPublicCall(tenantId, commentId, isFlagged, sso, _callback);
        }

        /**
         * Execute flagCommentPublic request
         * @return FlagCommentPublic200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public FlagCommentPublic200Response execute() throws ApiException {
            ApiResponse<FlagCommentPublic200Response> localVarResp = flagCommentPublicWithHttpInfo(tenantId, commentId, isFlagged, sso);
            return localVarResp.getData();
        }

        /**
         * Execute flagCommentPublic request with HTTP info returned
         * @return ApiResponse&lt;FlagCommentPublic200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FlagCommentPublic200Response> executeWithHttpInfo() throws ApiException {
            return flagCommentPublicWithHttpInfo(tenantId, commentId, isFlagged, sso);
        }

        /**
         * Execute flagCommentPublic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FlagCommentPublic200Response> _callback) throws ApiException {
            return flagCommentPublicAsync(tenantId, commentId, isFlagged, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param commentId  (required)
     * @param isFlagged  (required)
     * @return APIflagCommentPublicRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIflagCommentPublicRequest flagCommentPublic(String tenantId, String commentId, Boolean isFlagged) {
        return new APIflagCommentPublicRequest(tenantId, commentId, isFlagged);
    }
    private okhttp3.Call getCommentTextCall(String tenantId, String commentId, String editKey, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comments/{tenantId}/{commentId}/text"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (editKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("editKey", editKey));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentTextValidateBeforeCall(String tenantId, String commentId, String editKey, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getCommentText(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getCommentText(Async)");
        }

        return getCommentTextCall(tenantId, commentId, editKey, sso, _callback);

    }


    private ApiResponse<GetCommentText200Response> getCommentTextWithHttpInfo(String tenantId, String commentId, String editKey, String sso) throws ApiException {
        okhttp3.Call localVarCall = getCommentTextValidateBeforeCall(tenantId, commentId, editKey, sso, null);
        Type localVarReturnType = new TypeToken<GetCommentText200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommentTextAsync(String tenantId, String commentId, String editKey, String sso, final ApiCallback<GetCommentText200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentTextValidateBeforeCall(tenantId, commentId, editKey, sso, _callback);
        Type localVarReturnType = new TypeToken<GetCommentText200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetCommentTextRequest {
        private final String tenantId;
        private final String commentId;
        private String editKey;
        private String sso;

        private APIgetCommentTextRequest(String tenantId, String commentId) {
            this.tenantId = tenantId;
            this.commentId = commentId;
        }

        /**
         * Set editKey
         * @param editKey  (optional)
         * @return APIgetCommentTextRequest
         */
        public APIgetCommentTextRequest editKey(String editKey) {
            this.editKey = editKey;
            return this;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIgetCommentTextRequest
         */
        public APIgetCommentTextRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for getCommentText
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommentTextCall(tenantId, commentId, editKey, sso, _callback);
        }

        /**
         * Execute getCommentText request
         * @return GetCommentText200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetCommentText200Response execute() throws ApiException {
            ApiResponse<GetCommentText200Response> localVarResp = getCommentTextWithHttpInfo(tenantId, commentId, editKey, sso);
            return localVarResp.getData();
        }

        /**
         * Execute getCommentText request with HTTP info returned
         * @return ApiResponse&lt;GetCommentText200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetCommentText200Response> executeWithHttpInfo() throws ApiException {
            return getCommentTextWithHttpInfo(tenantId, commentId, editKey, sso);
        }

        /**
         * Execute getCommentText request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetCommentText200Response> _callback) throws ApiException {
            return getCommentTextAsync(tenantId, commentId, editKey, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param commentId  (required)
     * @return APIgetCommentTextRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetCommentTextRequest getCommentText(String tenantId, String commentId) {
        return new APIgetCommentTextRequest(tenantId, commentId);
    }
    private okhttp3.Call getCommentVoteUserNamesCall(String tenantId, String commentId, Double direction, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comments/{tenantId}/{commentId}/votes"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentVoteUserNamesValidateBeforeCall(String tenantId, String commentId, Double direction, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getCommentVoteUserNames(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getCommentVoteUserNames(Async)");
        }

        // verify the required parameter 'direction' is set
        if (direction == null) {
            throw new ApiException("Missing the required parameter 'direction' when calling getCommentVoteUserNames(Async)");
        }

        return getCommentVoteUserNamesCall(tenantId, commentId, direction, sso, _callback);

    }


    private ApiResponse<GetCommentVoteUserNames200Response> getCommentVoteUserNamesWithHttpInfo(String tenantId, String commentId, Double direction, String sso) throws ApiException {
        okhttp3.Call localVarCall = getCommentVoteUserNamesValidateBeforeCall(tenantId, commentId, direction, sso, null);
        Type localVarReturnType = new TypeToken<GetCommentVoteUserNames200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommentVoteUserNamesAsync(String tenantId, String commentId, Double direction, String sso, final ApiCallback<GetCommentVoteUserNames200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentVoteUserNamesValidateBeforeCall(tenantId, commentId, direction, sso, _callback);
        Type localVarReturnType = new TypeToken<GetCommentVoteUserNames200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetCommentVoteUserNamesRequest {
        private final String tenantId;
        private final String commentId;
        private final Double direction;
        private String sso;

        private APIgetCommentVoteUserNamesRequest(String tenantId, String commentId, Double direction) {
            this.tenantId = tenantId;
            this.commentId = commentId;
            this.direction = direction;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIgetCommentVoteUserNamesRequest
         */
        public APIgetCommentVoteUserNamesRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for getCommentVoteUserNames
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommentVoteUserNamesCall(tenantId, commentId, direction, sso, _callback);
        }

        /**
         * Execute getCommentVoteUserNames request
         * @return GetCommentVoteUserNames200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetCommentVoteUserNames200Response execute() throws ApiException {
            ApiResponse<GetCommentVoteUserNames200Response> localVarResp = getCommentVoteUserNamesWithHttpInfo(tenantId, commentId, direction, sso);
            return localVarResp.getData();
        }

        /**
         * Execute getCommentVoteUserNames request with HTTP info returned
         * @return ApiResponse&lt;GetCommentVoteUserNames200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetCommentVoteUserNames200Response> executeWithHttpInfo() throws ApiException {
            return getCommentVoteUserNamesWithHttpInfo(tenantId, commentId, direction, sso);
        }

        /**
         * Execute getCommentVoteUserNames request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetCommentVoteUserNames200Response> _callback) throws ApiException {
            return getCommentVoteUserNamesAsync(tenantId, commentId, direction, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param commentId  (required)
     * @param direction Pass 1 for getting the names of users that up voted, and -1 for the usernames for users that down voted. (required)
     * @return APIgetCommentVoteUserNamesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetCommentVoteUserNamesRequest getCommentVoteUserNames(String tenantId, String commentId, Double direction) {
        return new APIgetCommentVoteUserNamesRequest(tenantId, commentId, direction);
    }
    private okhttp3.Call getCommentsPublicCall(String tenantId, String urlId, Integer page, SortDirections direction, String sso, Integer skip, Integer skipChildren, Integer limit, Integer limitChildren, Boolean countChildren, Long lastGenDate, String fetchPageForCommentId, Boolean includeConfig, Boolean countAll, Boolean includei10n, String locale, String modules, Boolean isCrawler, Boolean includeNotificationCount, Boolean asTree, Integer maxTreeDepth, Boolean useFullTranslationIds, String parentId, String searchText, List<String> hashTags, String userId, String customConfigStr, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comments/{tenantId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (urlId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlId", urlId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (skipChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipChildren", skipChildren));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (limitChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitChildren", limitChildren));
        }

        if (countChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countChildren", countChildren));
        }

        if (lastGenDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastGenDate", lastGenDate));
        }

        if (fetchPageForCommentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchPageForCommentId", fetchPageForCommentId));
        }

        if (includeConfig != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeConfig", includeConfig));
        }

        if (countAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countAll", countAll));
        }

        if (includei10n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includei10n", includei10n));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (modules != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modules", modules));
        }

        if (isCrawler != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isCrawler", isCrawler));
        }

        if (includeNotificationCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeNotificationCount", includeNotificationCount));
        }

        if (asTree != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asTree", asTree));
        }

        if (maxTreeDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxTreeDepth", maxTreeDepth));
        }

        if (useFullTranslationIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useFullTranslationIds", useFullTranslationIds));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentId", parentId));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (hashTags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "hashTags", hashTags));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (customConfigStr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customConfigStr", customConfigStr));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentsPublicValidateBeforeCall(String tenantId, String urlId, Integer page, SortDirections direction, String sso, Integer skip, Integer skipChildren, Integer limit, Integer limitChildren, Boolean countChildren, Long lastGenDate, String fetchPageForCommentId, Boolean includeConfig, Boolean countAll, Boolean includei10n, String locale, String modules, Boolean isCrawler, Boolean includeNotificationCount, Boolean asTree, Integer maxTreeDepth, Boolean useFullTranslationIds, String parentId, String searchText, List<String> hashTags, String userId, String customConfigStr, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getCommentsPublic(Async)");
        }

        // verify the required parameter 'urlId' is set
        if (urlId == null) {
            throw new ApiException("Missing the required parameter 'urlId' when calling getCommentsPublic(Async)");
        }

        return getCommentsPublicCall(tenantId, urlId, page, direction, sso, skip, skipChildren, limit, limitChildren, countChildren, lastGenDate, fetchPageForCommentId, includeConfig, countAll, includei10n, locale, modules, isCrawler, includeNotificationCount, asTree, maxTreeDepth, useFullTranslationIds, parentId, searchText, hashTags, userId, customConfigStr, _callback);

    }


    private ApiResponse<GetCommentsPublic200Response> getCommentsPublicWithHttpInfo(String tenantId, String urlId, Integer page, SortDirections direction, String sso, Integer skip, Integer skipChildren, Integer limit, Integer limitChildren, Boolean countChildren, Long lastGenDate, String fetchPageForCommentId, Boolean includeConfig, Boolean countAll, Boolean includei10n, String locale, String modules, Boolean isCrawler, Boolean includeNotificationCount, Boolean asTree, Integer maxTreeDepth, Boolean useFullTranslationIds, String parentId, String searchText, List<String> hashTags, String userId, String customConfigStr) throws ApiException {
        okhttp3.Call localVarCall = getCommentsPublicValidateBeforeCall(tenantId, urlId, page, direction, sso, skip, skipChildren, limit, limitChildren, countChildren, lastGenDate, fetchPageForCommentId, includeConfig, countAll, includei10n, locale, modules, isCrawler, includeNotificationCount, asTree, maxTreeDepth, useFullTranslationIds, parentId, searchText, hashTags, userId, customConfigStr, null);
        Type localVarReturnType = new TypeToken<GetCommentsPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommentsPublicAsync(String tenantId, String urlId, Integer page, SortDirections direction, String sso, Integer skip, Integer skipChildren, Integer limit, Integer limitChildren, Boolean countChildren, Long lastGenDate, String fetchPageForCommentId, Boolean includeConfig, Boolean countAll, Boolean includei10n, String locale, String modules, Boolean isCrawler, Boolean includeNotificationCount, Boolean asTree, Integer maxTreeDepth, Boolean useFullTranslationIds, String parentId, String searchText, List<String> hashTags, String userId, String customConfigStr, final ApiCallback<GetCommentsPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentsPublicValidateBeforeCall(tenantId, urlId, page, direction, sso, skip, skipChildren, limit, limitChildren, countChildren, lastGenDate, fetchPageForCommentId, includeConfig, countAll, includei10n, locale, modules, isCrawler, includeNotificationCount, asTree, maxTreeDepth, useFullTranslationIds, parentId, searchText, hashTags, userId, customConfigStr, _callback);
        Type localVarReturnType = new TypeToken<GetCommentsPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetCommentsPublicRequest {
        private final String tenantId;
        private final String urlId;
        private Integer page;
        private SortDirections direction;
        private String sso;
        private Integer skip;
        private Integer skipChildren;
        private Integer limit;
        private Integer limitChildren;
        private Boolean countChildren;
        private Long lastGenDate;
        private String fetchPageForCommentId;
        private Boolean includeConfig;
        private Boolean countAll;
        private Boolean includei10n;
        private String locale;
        private String modules;
        private Boolean isCrawler;
        private Boolean includeNotificationCount;
        private Boolean asTree;
        private Integer maxTreeDepth;
        private Boolean useFullTranslationIds;
        private String parentId;
        private String searchText;
        private List<String> hashTags;
        private String userId;
        private String customConfigStr;

        private APIgetCommentsPublicRequest(String tenantId, String urlId) {
            this.tenantId = tenantId;
            this.urlId = urlId;
        }

        /**
         * Set page
         * @param page  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set direction
         * @param direction  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest direction(SortDirections direction) {
            this.direction = direction;
            return this;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Set skip
         * @param skip  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest skip(Integer skip) {
            this.skip = skip;
            return this;
        }

        /**
         * Set skipChildren
         * @param skipChildren  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest skipChildren(Integer skipChildren) {
            this.skipChildren = skipChildren;
            return this;
        }

        /**
         * Set limit
         * @param limit  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set limitChildren
         * @param limitChildren  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest limitChildren(Integer limitChildren) {
            this.limitChildren = limitChildren;
            return this;
        }

        /**
         * Set countChildren
         * @param countChildren  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest countChildren(Boolean countChildren) {
            this.countChildren = countChildren;
            return this;
        }

        /**
         * Set lastGenDate
         * @param lastGenDate  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest lastGenDate(Long lastGenDate) {
            this.lastGenDate = lastGenDate;
            return this;
        }

        /**
         * Set fetchPageForCommentId
         * @param fetchPageForCommentId  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest fetchPageForCommentId(String fetchPageForCommentId) {
            this.fetchPageForCommentId = fetchPageForCommentId;
            return this;
        }

        /**
         * Set includeConfig
         * @param includeConfig  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest includeConfig(Boolean includeConfig) {
            this.includeConfig = includeConfig;
            return this;
        }

        /**
         * Set countAll
         * @param countAll  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest countAll(Boolean countAll) {
            this.countAll = countAll;
            return this;
        }

        /**
         * Set includei10n
         * @param includei10n  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest includei10n(Boolean includei10n) {
            this.includei10n = includei10n;
            return this;
        }

        /**
         * Set locale
         * @param locale  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest locale(String locale) {
            this.locale = locale;
            return this;
        }

        /**
         * Set modules
         * @param modules  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest modules(String modules) {
            this.modules = modules;
            return this;
        }

        /**
         * Set isCrawler
         * @param isCrawler  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest isCrawler(Boolean isCrawler) {
            this.isCrawler = isCrawler;
            return this;
        }

        /**
         * Set includeNotificationCount
         * @param includeNotificationCount  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest includeNotificationCount(Boolean includeNotificationCount) {
            this.includeNotificationCount = includeNotificationCount;
            return this;
        }

        /**
         * Set asTree
         * @param asTree  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest asTree(Boolean asTree) {
            this.asTree = asTree;
            return this;
        }

        /**
         * Set maxTreeDepth
         * @param maxTreeDepth  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest maxTreeDepth(Integer maxTreeDepth) {
            this.maxTreeDepth = maxTreeDepth;
            return this;
        }

        /**
         * Set useFullTranslationIds
         * @param useFullTranslationIds  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest useFullTranslationIds(Boolean useFullTranslationIds) {
            this.useFullTranslationIds = useFullTranslationIds;
            return this;
        }

        /**
         * Set parentId
         * @param parentId  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest parentId(String parentId) {
            this.parentId = parentId;
            return this;
        }

        /**
         * Set searchText
         * @param searchText  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest searchText(String searchText) {
            this.searchText = searchText;
            return this;
        }

        /**
         * Set hashTags
         * @param hashTags  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest hashTags(List<String> hashTags) {
            this.hashTags = hashTags;
            return this;
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set customConfigStr
         * @param customConfigStr  (optional)
         * @return APIgetCommentsPublicRequest
         */
        public APIgetCommentsPublicRequest customConfigStr(String customConfigStr) {
            this.customConfigStr = customConfigStr;
            return this;
        }

        /**
         * Build call for getCommentsPublic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommentsPublicCall(tenantId, urlId, page, direction, sso, skip, skipChildren, limit, limitChildren, countChildren, lastGenDate, fetchPageForCommentId, includeConfig, countAll, includei10n, locale, modules, isCrawler, includeNotificationCount, asTree, maxTreeDepth, useFullTranslationIds, parentId, searchText, hashTags, userId, customConfigStr, _callback);
        }

        /**
         * Execute getCommentsPublic request
         * @return GetCommentsPublic200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetCommentsPublic200Response execute() throws ApiException {
            ApiResponse<GetCommentsPublic200Response> localVarResp = getCommentsPublicWithHttpInfo(tenantId, urlId, page, direction, sso, skip, skipChildren, limit, limitChildren, countChildren, lastGenDate, fetchPageForCommentId, includeConfig, countAll, includei10n, locale, modules, isCrawler, includeNotificationCount, asTree, maxTreeDepth, useFullTranslationIds, parentId, searchText, hashTags, userId, customConfigStr);
            return localVarResp.getData();
        }

        /**
         * Execute getCommentsPublic request with HTTP info returned
         * @return ApiResponse&lt;GetCommentsPublic200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetCommentsPublic200Response> executeWithHttpInfo() throws ApiException {
            return getCommentsPublicWithHttpInfo(tenantId, urlId, page, direction, sso, skip, skipChildren, limit, limitChildren, countChildren, lastGenDate, fetchPageForCommentId, includeConfig, countAll, includei10n, locale, modules, isCrawler, includeNotificationCount, asTree, maxTreeDepth, useFullTranslationIds, parentId, searchText, hashTags, userId, customConfigStr);
        }

        /**
         * Execute getCommentsPublic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetCommentsPublic200Response> _callback) throws ApiException {
            return getCommentsPublicAsync(tenantId, urlId, page, direction, sso, skip, skipChildren, limit, limitChildren, countChildren, lastGenDate, fetchPageForCommentId, includeConfig, countAll, includei10n, locale, modules, isCrawler, includeNotificationCount, asTree, maxTreeDepth, useFullTranslationIds, parentId, searchText, hashTags, userId, customConfigStr, _callback);
        }
    }

    /**
     * 
     *  req tenantId urlId
     * @param tenantId  (required)
     * @param urlId  (required)
     * @return APIgetCommentsPublicRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetCommentsPublicRequest getCommentsPublic(String tenantId, String urlId) {
        return new APIgetCommentsPublicRequest(tenantId, urlId);
    }
    private okhttp3.Call getEventLogCall(String tenantId, String urlId, String userIdWS, Long startTime, Long endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/event-log/{tenantId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (urlId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlId", urlId));
        }

        if (userIdWS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIdWS", userIdWS));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventLogValidateBeforeCall(String tenantId, String urlId, String userIdWS, Long startTime, Long endTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getEventLog(Async)");
        }

        // verify the required parameter 'urlId' is set
        if (urlId == null) {
            throw new ApiException("Missing the required parameter 'urlId' when calling getEventLog(Async)");
        }

        // verify the required parameter 'userIdWS' is set
        if (userIdWS == null) {
            throw new ApiException("Missing the required parameter 'userIdWS' when calling getEventLog(Async)");
        }

        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getEventLog(Async)");
        }

        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getEventLog(Async)");
        }

        return getEventLogCall(tenantId, urlId, userIdWS, startTime, endTime, _callback);

    }


    private ApiResponse<GetEventLog200Response> getEventLogWithHttpInfo(String tenantId, String urlId, String userIdWS, Long startTime, Long endTime) throws ApiException {
        okhttp3.Call localVarCall = getEventLogValidateBeforeCall(tenantId, urlId, userIdWS, startTime, endTime, null);
        Type localVarReturnType = new TypeToken<GetEventLog200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventLogAsync(String tenantId, String urlId, String userIdWS, Long startTime, Long endTime, final ApiCallback<GetEventLog200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventLogValidateBeforeCall(tenantId, urlId, userIdWS, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<GetEventLog200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEventLogRequest {
        private final String tenantId;
        private final String urlId;
        private final String userIdWS;
        private final Long startTime;
        private final Long endTime;

        private APIgetEventLogRequest(String tenantId, String urlId, String userIdWS, Long startTime, Long endTime) {
            this.tenantId = tenantId;
            this.urlId = urlId;
            this.userIdWS = userIdWS;
            this.startTime = startTime;
            this.endTime = endTime;
        }

        /**
         * Build call for getEventLog
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventLogCall(tenantId, urlId, userIdWS, startTime, endTime, _callback);
        }

        /**
         * Execute getEventLog request
         * @return GetEventLog200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetEventLog200Response execute() throws ApiException {
            ApiResponse<GetEventLog200Response> localVarResp = getEventLogWithHttpInfo(tenantId, urlId, userIdWS, startTime, endTime);
            return localVarResp.getData();
        }

        /**
         * Execute getEventLog request with HTTP info returned
         * @return ApiResponse&lt;GetEventLog200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetEventLog200Response> executeWithHttpInfo() throws ApiException {
            return getEventLogWithHttpInfo(tenantId, urlId, userIdWS, startTime, endTime);
        }

        /**
         * Execute getEventLog request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetEventLog200Response> _callback) throws ApiException {
            return getEventLogAsync(tenantId, urlId, userIdWS, startTime, endTime, _callback);
        }
    }

    /**
     * 
     *  req tenantId urlId userIdWS
     * @param tenantId  (required)
     * @param urlId  (required)
     * @param userIdWS  (required)
     * @param startTime  (required)
     * @param endTime  (required)
     * @return APIgetEventLogRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEventLogRequest getEventLog(String tenantId, String urlId, String userIdWS, Long startTime, Long endTime) {
        return new APIgetEventLogRequest(tenantId, urlId, userIdWS, startTime, endTime);
    }
    private okhttp3.Call getFeedPostsPublicCall(String tenantId, String afterId, Integer limit, List<String> tags, String sso, Boolean isCrawler, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/feed-posts/{tenantId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (afterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterId", afterId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        if (isCrawler != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isCrawler", isCrawler));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeedPostsPublicValidateBeforeCall(String tenantId, String afterId, Integer limit, List<String> tags, String sso, Boolean isCrawler, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getFeedPostsPublic(Async)");
        }

        return getFeedPostsPublicCall(tenantId, afterId, limit, tags, sso, isCrawler, _callback);

    }


    private ApiResponse<GetFeedPostsPublic200Response> getFeedPostsPublicWithHttpInfo(String tenantId, String afterId, Integer limit, List<String> tags, String sso, Boolean isCrawler) throws ApiException {
        okhttp3.Call localVarCall = getFeedPostsPublicValidateBeforeCall(tenantId, afterId, limit, tags, sso, isCrawler, null);
        Type localVarReturnType = new TypeToken<GetFeedPostsPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeedPostsPublicAsync(String tenantId, String afterId, Integer limit, List<String> tags, String sso, Boolean isCrawler, final ApiCallback<GetFeedPostsPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeedPostsPublicValidateBeforeCall(tenantId, afterId, limit, tags, sso, isCrawler, _callback);
        Type localVarReturnType = new TypeToken<GetFeedPostsPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFeedPostsPublicRequest {
        private final String tenantId;
        private String afterId;
        private Integer limit;
        private List<String> tags;
        private String sso;
        private Boolean isCrawler;

        private APIgetFeedPostsPublicRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set afterId
         * @param afterId  (optional)
         * @return APIgetFeedPostsPublicRequest
         */
        public APIgetFeedPostsPublicRequest afterId(String afterId) {
            this.afterId = afterId;
            return this;
        }

        /**
         * Set limit
         * @param limit  (optional)
         * @return APIgetFeedPostsPublicRequest
         */
        public APIgetFeedPostsPublicRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set tags
         * @param tags  (optional)
         * @return APIgetFeedPostsPublicRequest
         */
        public APIgetFeedPostsPublicRequest tags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIgetFeedPostsPublicRequest
         */
        public APIgetFeedPostsPublicRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Set isCrawler
         * @param isCrawler  (optional)
         * @return APIgetFeedPostsPublicRequest
         */
        public APIgetFeedPostsPublicRequest isCrawler(Boolean isCrawler) {
            this.isCrawler = isCrawler;
            return this;
        }

        /**
         * Build call for getFeedPostsPublic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeedPostsPublicCall(tenantId, afterId, limit, tags, sso, isCrawler, _callback);
        }

        /**
         * Execute getFeedPostsPublic request
         * @return GetFeedPostsPublic200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetFeedPostsPublic200Response execute() throws ApiException {
            ApiResponse<GetFeedPostsPublic200Response> localVarResp = getFeedPostsPublicWithHttpInfo(tenantId, afterId, limit, tags, sso, isCrawler);
            return localVarResp.getData();
        }

        /**
         * Execute getFeedPostsPublic request with HTTP info returned
         * @return ApiResponse&lt;GetFeedPostsPublic200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetFeedPostsPublic200Response> executeWithHttpInfo() throws ApiException {
            return getFeedPostsPublicWithHttpInfo(tenantId, afterId, limit, tags, sso, isCrawler);
        }

        /**
         * Execute getFeedPostsPublic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetFeedPostsPublic200Response> _callback) throws ApiException {
            return getFeedPostsPublicAsync(tenantId, afterId, limit, tags, sso, isCrawler, _callback);
        }
    }

    /**
     * 
     *  req tenantId afterId
     * @param tenantId  (required)
     * @return APIgetFeedPostsPublicRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFeedPostsPublicRequest getFeedPostsPublic(String tenantId) {
        return new APIgetFeedPostsPublicRequest(tenantId);
    }
    private okhttp3.Call getGlobalEventLogCall(String tenantId, String urlId, String userIdWS, Long startTime, Long endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/event-log/global/{tenantId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (urlId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlId", urlId));
        }

        if (userIdWS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIdWS", userIdWS));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGlobalEventLogValidateBeforeCall(String tenantId, String urlId, String userIdWS, Long startTime, Long endTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getGlobalEventLog(Async)");
        }

        // verify the required parameter 'urlId' is set
        if (urlId == null) {
            throw new ApiException("Missing the required parameter 'urlId' when calling getGlobalEventLog(Async)");
        }

        // verify the required parameter 'userIdWS' is set
        if (userIdWS == null) {
            throw new ApiException("Missing the required parameter 'userIdWS' when calling getGlobalEventLog(Async)");
        }

        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getGlobalEventLog(Async)");
        }

        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getGlobalEventLog(Async)");
        }

        return getGlobalEventLogCall(tenantId, urlId, userIdWS, startTime, endTime, _callback);

    }


    private ApiResponse<GetEventLog200Response> getGlobalEventLogWithHttpInfo(String tenantId, String urlId, String userIdWS, Long startTime, Long endTime) throws ApiException {
        okhttp3.Call localVarCall = getGlobalEventLogValidateBeforeCall(tenantId, urlId, userIdWS, startTime, endTime, null);
        Type localVarReturnType = new TypeToken<GetEventLog200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGlobalEventLogAsync(String tenantId, String urlId, String userIdWS, Long startTime, Long endTime, final ApiCallback<GetEventLog200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGlobalEventLogValidateBeforeCall(tenantId, urlId, userIdWS, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<GetEventLog200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetGlobalEventLogRequest {
        private final String tenantId;
        private final String urlId;
        private final String userIdWS;
        private final Long startTime;
        private final Long endTime;

        private APIgetGlobalEventLogRequest(String tenantId, String urlId, String userIdWS, Long startTime, Long endTime) {
            this.tenantId = tenantId;
            this.urlId = urlId;
            this.userIdWS = userIdWS;
            this.startTime = startTime;
            this.endTime = endTime;
        }

        /**
         * Build call for getGlobalEventLog
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGlobalEventLogCall(tenantId, urlId, userIdWS, startTime, endTime, _callback);
        }

        /**
         * Execute getGlobalEventLog request
         * @return GetEventLog200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetEventLog200Response execute() throws ApiException {
            ApiResponse<GetEventLog200Response> localVarResp = getGlobalEventLogWithHttpInfo(tenantId, urlId, userIdWS, startTime, endTime);
            return localVarResp.getData();
        }

        /**
         * Execute getGlobalEventLog request with HTTP info returned
         * @return ApiResponse&lt;GetEventLog200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetEventLog200Response> executeWithHttpInfo() throws ApiException {
            return getGlobalEventLogWithHttpInfo(tenantId, urlId, userIdWS, startTime, endTime);
        }

        /**
         * Execute getGlobalEventLog request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetEventLog200Response> _callback) throws ApiException {
            return getGlobalEventLogAsync(tenantId, urlId, userIdWS, startTime, endTime, _callback);
        }
    }

    /**
     * 
     *  req tenantId urlId userIdWS
     * @param tenantId  (required)
     * @param urlId  (required)
     * @param userIdWS  (required)
     * @param startTime  (required)
     * @param endTime  (required)
     * @return APIgetGlobalEventLogRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetGlobalEventLogRequest getGlobalEventLog(String tenantId, String urlId, String userIdWS, Long startTime, Long endTime) {
        return new APIgetGlobalEventLogRequest(tenantId, urlId, userIdWS, startTime, endTime);
    }
    private okhttp3.Call getUserNotificationCountCall(String tenantId, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-notifications/get-count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserNotificationCountValidateBeforeCall(String tenantId, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getUserNotificationCount(Async)");
        }

        return getUserNotificationCountCall(tenantId, sso, _callback);

    }


    private ApiResponse<GetUserNotificationCount200Response> getUserNotificationCountWithHttpInfo(String tenantId, String sso) throws ApiException {
        okhttp3.Call localVarCall = getUserNotificationCountValidateBeforeCall(tenantId, sso, null);
        Type localVarReturnType = new TypeToken<GetUserNotificationCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserNotificationCountAsync(String tenantId, String sso, final ApiCallback<GetUserNotificationCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserNotificationCountValidateBeforeCall(tenantId, sso, _callback);
        Type localVarReturnType = new TypeToken<GetUserNotificationCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetUserNotificationCountRequest {
        private final String tenantId;
        private String sso;

        private APIgetUserNotificationCountRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIgetUserNotificationCountRequest
         */
        public APIgetUserNotificationCountRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for getUserNotificationCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserNotificationCountCall(tenantId, sso, _callback);
        }

        /**
         * Execute getUserNotificationCount request
         * @return GetUserNotificationCount200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetUserNotificationCount200Response execute() throws ApiException {
            ApiResponse<GetUserNotificationCount200Response> localVarResp = getUserNotificationCountWithHttpInfo(tenantId, sso);
            return localVarResp.getData();
        }

        /**
         * Execute getUserNotificationCount request with HTTP info returned
         * @return ApiResponse&lt;GetUserNotificationCount200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetUserNotificationCount200Response> executeWithHttpInfo() throws ApiException {
            return getUserNotificationCountWithHttpInfo(tenantId, sso);
        }

        /**
         * Execute getUserNotificationCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetUserNotificationCount200Response> _callback) throws ApiException {
            return getUserNotificationCountAsync(tenantId, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIgetUserNotificationCountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetUserNotificationCountRequest getUserNotificationCount(String tenantId) {
        return new APIgetUserNotificationCountRequest(tenantId);
    }
    private okhttp3.Call getUserNotificationsCall(String tenantId, Double pageSize, String afterId, Boolean includeContext, Double afterCreatedAt, Boolean unreadOnly, Boolean dmOnly, Boolean noDm, Boolean includeTranslations, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (afterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterId", afterId));
        }

        if (includeContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeContext", includeContext));
        }

        if (afterCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterCreatedAt", afterCreatedAt));
        }

        if (unreadOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unreadOnly", unreadOnly));
        }

        if (dmOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dmOnly", dmOnly));
        }

        if (noDm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("noDm", noDm));
        }

        if (includeTranslations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTranslations", includeTranslations));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserNotificationsValidateBeforeCall(String tenantId, Double pageSize, String afterId, Boolean includeContext, Double afterCreatedAt, Boolean unreadOnly, Boolean dmOnly, Boolean noDm, Boolean includeTranslations, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getUserNotifications(Async)");
        }

        return getUserNotificationsCall(tenantId, pageSize, afterId, includeContext, afterCreatedAt, unreadOnly, dmOnly, noDm, includeTranslations, sso, _callback);

    }


    private ApiResponse<GetUserNotifications200Response> getUserNotificationsWithHttpInfo(String tenantId, Double pageSize, String afterId, Boolean includeContext, Double afterCreatedAt, Boolean unreadOnly, Boolean dmOnly, Boolean noDm, Boolean includeTranslations, String sso) throws ApiException {
        okhttp3.Call localVarCall = getUserNotificationsValidateBeforeCall(tenantId, pageSize, afterId, includeContext, afterCreatedAt, unreadOnly, dmOnly, noDm, includeTranslations, sso, null);
        Type localVarReturnType = new TypeToken<GetUserNotifications200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserNotificationsAsync(String tenantId, Double pageSize, String afterId, Boolean includeContext, Double afterCreatedAt, Boolean unreadOnly, Boolean dmOnly, Boolean noDm, Boolean includeTranslations, String sso, final ApiCallback<GetUserNotifications200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserNotificationsValidateBeforeCall(tenantId, pageSize, afterId, includeContext, afterCreatedAt, unreadOnly, dmOnly, noDm, includeTranslations, sso, _callback);
        Type localVarReturnType = new TypeToken<GetUserNotifications200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetUserNotificationsRequest {
        private final String tenantId;
        private Double pageSize;
        private String afterId;
        private Boolean includeContext;
        private Double afterCreatedAt;
        private Boolean unreadOnly;
        private Boolean dmOnly;
        private Boolean noDm;
        private Boolean includeTranslations;
        private String sso;

        private APIgetUserNotificationsRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set pageSize
         * @param pageSize Defaults to 20. (optional)
         * @return APIgetUserNotificationsRequest
         */
        public APIgetUserNotificationsRequest pageSize(Double pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Set afterId
         * @param afterId  (optional)
         * @return APIgetUserNotificationsRequest
         */
        public APIgetUserNotificationsRequest afterId(String afterId) {
            this.afterId = afterId;
            return this;
        }

        /**
         * Set includeContext
         * @param includeContext  (optional)
         * @return APIgetUserNotificationsRequest
         */
        public APIgetUserNotificationsRequest includeContext(Boolean includeContext) {
            this.includeContext = includeContext;
            return this;
        }

        /**
         * Set afterCreatedAt
         * @param afterCreatedAt  (optional)
         * @return APIgetUserNotificationsRequest
         */
        public APIgetUserNotificationsRequest afterCreatedAt(Double afterCreatedAt) {
            this.afterCreatedAt = afterCreatedAt;
            return this;
        }

        /**
         * Set unreadOnly
         * @param unreadOnly  (optional)
         * @return APIgetUserNotificationsRequest
         */
        public APIgetUserNotificationsRequest unreadOnly(Boolean unreadOnly) {
            this.unreadOnly = unreadOnly;
            return this;
        }

        /**
         * Set dmOnly
         * @param dmOnly  (optional)
         * @return APIgetUserNotificationsRequest
         */
        public APIgetUserNotificationsRequest dmOnly(Boolean dmOnly) {
            this.dmOnly = dmOnly;
            return this;
        }

        /**
         * Set noDm
         * @param noDm  (optional)
         * @return APIgetUserNotificationsRequest
         */
        public APIgetUserNotificationsRequest noDm(Boolean noDm) {
            this.noDm = noDm;
            return this;
        }

        /**
         * Set includeTranslations
         * @param includeTranslations  (optional)
         * @return APIgetUserNotificationsRequest
         */
        public APIgetUserNotificationsRequest includeTranslations(Boolean includeTranslations) {
            this.includeTranslations = includeTranslations;
            return this;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIgetUserNotificationsRequest
         */
        public APIgetUserNotificationsRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for getUserNotifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserNotificationsCall(tenantId, pageSize, afterId, includeContext, afterCreatedAt, unreadOnly, dmOnly, noDm, includeTranslations, sso, _callback);
        }

        /**
         * Execute getUserNotifications request
         * @return GetUserNotifications200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetUserNotifications200Response execute() throws ApiException {
            ApiResponse<GetUserNotifications200Response> localVarResp = getUserNotificationsWithHttpInfo(tenantId, pageSize, afterId, includeContext, afterCreatedAt, unreadOnly, dmOnly, noDm, includeTranslations, sso);
            return localVarResp.getData();
        }

        /**
         * Execute getUserNotifications request with HTTP info returned
         * @return ApiResponse&lt;GetUserNotifications200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetUserNotifications200Response> executeWithHttpInfo() throws ApiException {
            return getUserNotificationsWithHttpInfo(tenantId, pageSize, afterId, includeContext, afterCreatedAt, unreadOnly, dmOnly, noDm, includeTranslations, sso);
        }

        /**
         * Execute getUserNotifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetUserNotifications200Response> _callback) throws ApiException {
            return getUserNotificationsAsync(tenantId, pageSize, afterId, includeContext, afterCreatedAt, unreadOnly, dmOnly, noDm, includeTranslations, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIgetUserNotificationsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetUserNotificationsRequest getUserNotifications(String tenantId) {
        return new APIgetUserNotificationsRequest(tenantId);
    }
    private okhttp3.Call getUserPresenceStatusesCall(String tenantId, String urlIdWS, String userIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-presence-status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (urlIdWS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlIdWS", urlIdWS));
        }

        if (userIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIds", userIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPresenceStatusesValidateBeforeCall(String tenantId, String urlIdWS, String userIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getUserPresenceStatuses(Async)");
        }

        // verify the required parameter 'urlIdWS' is set
        if (urlIdWS == null) {
            throw new ApiException("Missing the required parameter 'urlIdWS' when calling getUserPresenceStatuses(Async)");
        }

        // verify the required parameter 'userIds' is set
        if (userIds == null) {
            throw new ApiException("Missing the required parameter 'userIds' when calling getUserPresenceStatuses(Async)");
        }

        return getUserPresenceStatusesCall(tenantId, urlIdWS, userIds, _callback);

    }


    private ApiResponse<GetUserPresenceStatuses200Response> getUserPresenceStatusesWithHttpInfo(String tenantId, String urlIdWS, String userIds) throws ApiException {
        okhttp3.Call localVarCall = getUserPresenceStatusesValidateBeforeCall(tenantId, urlIdWS, userIds, null);
        Type localVarReturnType = new TypeToken<GetUserPresenceStatuses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserPresenceStatusesAsync(String tenantId, String urlIdWS, String userIds, final ApiCallback<GetUserPresenceStatuses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPresenceStatusesValidateBeforeCall(tenantId, urlIdWS, userIds, _callback);
        Type localVarReturnType = new TypeToken<GetUserPresenceStatuses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetUserPresenceStatusesRequest {
        private final String tenantId;
        private final String urlIdWS;
        private final String userIds;

        private APIgetUserPresenceStatusesRequest(String tenantId, String urlIdWS, String userIds) {
            this.tenantId = tenantId;
            this.urlIdWS = urlIdWS;
            this.userIds = userIds;
        }

        /**
         * Build call for getUserPresenceStatuses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Validation Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserPresenceStatusesCall(tenantId, urlIdWS, userIds, _callback);
        }

        /**
         * Execute getUserPresenceStatuses request
         * @return GetUserPresenceStatuses200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Validation Failed </td><td>  -  </td></tr>
         </table>
         */
        public GetUserPresenceStatuses200Response execute() throws ApiException {
            ApiResponse<GetUserPresenceStatuses200Response> localVarResp = getUserPresenceStatusesWithHttpInfo(tenantId, urlIdWS, userIds);
            return localVarResp.getData();
        }

        /**
         * Execute getUserPresenceStatuses request with HTTP info returned
         * @return ApiResponse&lt;GetUserPresenceStatuses200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Validation Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetUserPresenceStatuses200Response> executeWithHttpInfo() throws ApiException {
            return getUserPresenceStatusesWithHttpInfo(tenantId, urlIdWS, userIds);
        }

        /**
         * Execute getUserPresenceStatuses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Validation Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetUserPresenceStatuses200Response> _callback) throws ApiException {
            return getUserPresenceStatusesAsync(tenantId, urlIdWS, userIds, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param urlIdWS  (required)
     * @param userIds  (required)
     * @return APIgetUserPresenceStatusesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Failed </td><td>  -  </td></tr>
     </table>
     */
    public APIgetUserPresenceStatusesRequest getUserPresenceStatuses(String tenantId, String urlIdWS, String userIds) {
        return new APIgetUserPresenceStatusesRequest(tenantId, urlIdWS, userIds);
    }
    private okhttp3.Call getUserReactsPublicCall(String tenantId, List<String> postIds, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/feed-posts/{tenantId}/user-reacts"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (postIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "postIds", postIds));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserReactsPublicValidateBeforeCall(String tenantId, List<String> postIds, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getUserReactsPublic(Async)");
        }

        return getUserReactsPublicCall(tenantId, postIds, sso, _callback);

    }


    private ApiResponse<GetUserReactsPublic200Response> getUserReactsPublicWithHttpInfo(String tenantId, List<String> postIds, String sso) throws ApiException {
        okhttp3.Call localVarCall = getUserReactsPublicValidateBeforeCall(tenantId, postIds, sso, null);
        Type localVarReturnType = new TypeToken<GetUserReactsPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserReactsPublicAsync(String tenantId, List<String> postIds, String sso, final ApiCallback<GetUserReactsPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserReactsPublicValidateBeforeCall(tenantId, postIds, sso, _callback);
        Type localVarReturnType = new TypeToken<GetUserReactsPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetUserReactsPublicRequest {
        private final String tenantId;
        private List<String> postIds;
        private String sso;

        private APIgetUserReactsPublicRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set postIds
         * @param postIds  (optional)
         * @return APIgetUserReactsPublicRequest
         */
        public APIgetUserReactsPublicRequest postIds(List<String> postIds) {
            this.postIds = postIds;
            return this;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIgetUserReactsPublicRequest
         */
        public APIgetUserReactsPublicRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for getUserReactsPublic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserReactsPublicCall(tenantId, postIds, sso, _callback);
        }

        /**
         * Execute getUserReactsPublic request
         * @return GetUserReactsPublic200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetUserReactsPublic200Response execute() throws ApiException {
            ApiResponse<GetUserReactsPublic200Response> localVarResp = getUserReactsPublicWithHttpInfo(tenantId, postIds, sso);
            return localVarResp.getData();
        }

        /**
         * Execute getUserReactsPublic request with HTTP info returned
         * @return ApiResponse&lt;GetUserReactsPublic200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetUserReactsPublic200Response> executeWithHttpInfo() throws ApiException {
            return getUserReactsPublicWithHttpInfo(tenantId, postIds, sso);
        }

        /**
         * Execute getUserReactsPublic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetUserReactsPublic200Response> _callback) throws ApiException {
            return getUserReactsPublicAsync(tenantId, postIds, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIgetUserReactsPublicRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetUserReactsPublicRequest getUserReactsPublic(String tenantId) {
        return new APIgetUserReactsPublicRequest(tenantId);
    }
    private okhttp3.Call lockCommentCall(String tenantId, String commentId, String broadcastId, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comments/{tenantId}/{commentId}/lock"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (broadcastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("broadcastId", broadcastId));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockCommentValidateBeforeCall(String tenantId, String commentId, String broadcastId, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling lockComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling lockComment(Async)");
        }

        // verify the required parameter 'broadcastId' is set
        if (broadcastId == null) {
            throw new ApiException("Missing the required parameter 'broadcastId' when calling lockComment(Async)");
        }

        return lockCommentCall(tenantId, commentId, broadcastId, sso, _callback);

    }


    private ApiResponse<LockComment200Response> lockCommentWithHttpInfo(String tenantId, String commentId, String broadcastId, String sso) throws ApiException {
        okhttp3.Call localVarCall = lockCommentValidateBeforeCall(tenantId, commentId, broadcastId, sso, null);
        Type localVarReturnType = new TypeToken<LockComment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lockCommentAsync(String tenantId, String commentId, String broadcastId, String sso, final ApiCallback<LockComment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockCommentValidateBeforeCall(tenantId, commentId, broadcastId, sso, _callback);
        Type localVarReturnType = new TypeToken<LockComment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlockCommentRequest {
        private final String tenantId;
        private final String commentId;
        private final String broadcastId;
        private String sso;

        private APIlockCommentRequest(String tenantId, String commentId, String broadcastId) {
            this.tenantId = tenantId;
            this.commentId = commentId;
            this.broadcastId = broadcastId;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIlockCommentRequest
         */
        public APIlockCommentRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for lockComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lockCommentCall(tenantId, commentId, broadcastId, sso, _callback);
        }

        /**
         * Execute lockComment request
         * @return LockComment200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public LockComment200Response execute() throws ApiException {
            ApiResponse<LockComment200Response> localVarResp = lockCommentWithHttpInfo(tenantId, commentId, broadcastId, sso);
            return localVarResp.getData();
        }

        /**
         * Execute lockComment request with HTTP info returned
         * @return ApiResponse&lt;LockComment200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LockComment200Response> executeWithHttpInfo() throws ApiException {
            return lockCommentWithHttpInfo(tenantId, commentId, broadcastId, sso);
        }

        /**
         * Execute lockComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LockComment200Response> _callback) throws ApiException {
            return lockCommentAsync(tenantId, commentId, broadcastId, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param commentId  (required)
     * @param broadcastId  (required)
     * @return APIlockCommentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIlockCommentRequest lockComment(String tenantId, String commentId, String broadcastId) {
        return new APIlockCommentRequest(tenantId, commentId, broadcastId);
    }
    private okhttp3.Call pinCommentCall(String tenantId, String commentId, String broadcastId, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comments/{tenantId}/{commentId}/pin"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (broadcastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("broadcastId", broadcastId));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pinCommentValidateBeforeCall(String tenantId, String commentId, String broadcastId, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling pinComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling pinComment(Async)");
        }

        // verify the required parameter 'broadcastId' is set
        if (broadcastId == null) {
            throw new ApiException("Missing the required parameter 'broadcastId' when calling pinComment(Async)");
        }

        return pinCommentCall(tenantId, commentId, broadcastId, sso, _callback);

    }


    private ApiResponse<PinComment200Response> pinCommentWithHttpInfo(String tenantId, String commentId, String broadcastId, String sso) throws ApiException {
        okhttp3.Call localVarCall = pinCommentValidateBeforeCall(tenantId, commentId, broadcastId, sso, null);
        Type localVarReturnType = new TypeToken<PinComment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pinCommentAsync(String tenantId, String commentId, String broadcastId, String sso, final ApiCallback<PinComment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = pinCommentValidateBeforeCall(tenantId, commentId, broadcastId, sso, _callback);
        Type localVarReturnType = new TypeToken<PinComment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpinCommentRequest {
        private final String tenantId;
        private final String commentId;
        private final String broadcastId;
        private String sso;

        private APIpinCommentRequest(String tenantId, String commentId, String broadcastId) {
            this.tenantId = tenantId;
            this.commentId = commentId;
            this.broadcastId = broadcastId;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIpinCommentRequest
         */
        public APIpinCommentRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for pinComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pinCommentCall(tenantId, commentId, broadcastId, sso, _callback);
        }

        /**
         * Execute pinComment request
         * @return PinComment200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public PinComment200Response execute() throws ApiException {
            ApiResponse<PinComment200Response> localVarResp = pinCommentWithHttpInfo(tenantId, commentId, broadcastId, sso);
            return localVarResp.getData();
        }

        /**
         * Execute pinComment request with HTTP info returned
         * @return ApiResponse&lt;PinComment200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PinComment200Response> executeWithHttpInfo() throws ApiException {
            return pinCommentWithHttpInfo(tenantId, commentId, broadcastId, sso);
        }

        /**
         * Execute pinComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PinComment200Response> _callback) throws ApiException {
            return pinCommentAsync(tenantId, commentId, broadcastId, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param commentId  (required)
     * @param broadcastId  (required)
     * @return APIpinCommentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIpinCommentRequest pinComment(String tenantId, String commentId, String broadcastId) {
        return new APIpinCommentRequest(tenantId, commentId, broadcastId);
    }
    private okhttp3.Call reactFeedPostPublicCall(String tenantId, String postId, ReactBodyParams reactBodyParams, Boolean isUndo, String broadcastId, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactBodyParams;

        // create path and map variables
        String localVarPath = "/feed-posts/{tenantId}/react/{postId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "postId" + "}", localVarApiClient.escapeString(postId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isUndo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isUndo", isUndo));
        }

        if (broadcastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("broadcastId", broadcastId));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactFeedPostPublicValidateBeforeCall(String tenantId, String postId, ReactBodyParams reactBodyParams, Boolean isUndo, String broadcastId, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling reactFeedPostPublic(Async)");
        }

        // verify the required parameter 'postId' is set
        if (postId == null) {
            throw new ApiException("Missing the required parameter 'postId' when calling reactFeedPostPublic(Async)");
        }

        // verify the required parameter 'reactBodyParams' is set
        if (reactBodyParams == null) {
            throw new ApiException("Missing the required parameter 'reactBodyParams' when calling reactFeedPostPublic(Async)");
        }

        return reactFeedPostPublicCall(tenantId, postId, reactBodyParams, isUndo, broadcastId, sso, _callback);

    }


    private ApiResponse<ReactFeedPostPublic200Response> reactFeedPostPublicWithHttpInfo(String tenantId, String postId, ReactBodyParams reactBodyParams, Boolean isUndo, String broadcastId, String sso) throws ApiException {
        okhttp3.Call localVarCall = reactFeedPostPublicValidateBeforeCall(tenantId, postId, reactBodyParams, isUndo, broadcastId, sso, null);
        Type localVarReturnType = new TypeToken<ReactFeedPostPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reactFeedPostPublicAsync(String tenantId, String postId, ReactBodyParams reactBodyParams, Boolean isUndo, String broadcastId, String sso, final ApiCallback<ReactFeedPostPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactFeedPostPublicValidateBeforeCall(tenantId, postId, reactBodyParams, isUndo, broadcastId, sso, _callback);
        Type localVarReturnType = new TypeToken<ReactFeedPostPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIreactFeedPostPublicRequest {
        private final String tenantId;
        private final String postId;
        private final ReactBodyParams reactBodyParams;
        private Boolean isUndo;
        private String broadcastId;
        private String sso;

        private APIreactFeedPostPublicRequest(String tenantId, String postId, ReactBodyParams reactBodyParams) {
            this.tenantId = tenantId;
            this.postId = postId;
            this.reactBodyParams = reactBodyParams;
        }

        /**
         * Set isUndo
         * @param isUndo  (optional)
         * @return APIreactFeedPostPublicRequest
         */
        public APIreactFeedPostPublicRequest isUndo(Boolean isUndo) {
            this.isUndo = isUndo;
            return this;
        }

        /**
         * Set broadcastId
         * @param broadcastId  (optional)
         * @return APIreactFeedPostPublicRequest
         */
        public APIreactFeedPostPublicRequest broadcastId(String broadcastId) {
            this.broadcastId = broadcastId;
            return this;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIreactFeedPostPublicRequest
         */
        public APIreactFeedPostPublicRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for reactFeedPostPublic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return reactFeedPostPublicCall(tenantId, postId, reactBodyParams, isUndo, broadcastId, sso, _callback);
        }

        /**
         * Execute reactFeedPostPublic request
         * @return ReactFeedPostPublic200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ReactFeedPostPublic200Response execute() throws ApiException {
            ApiResponse<ReactFeedPostPublic200Response> localVarResp = reactFeedPostPublicWithHttpInfo(tenantId, postId, reactBodyParams, isUndo, broadcastId, sso);
            return localVarResp.getData();
        }

        /**
         * Execute reactFeedPostPublic request with HTTP info returned
         * @return ApiResponse&lt;ReactFeedPostPublic200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReactFeedPostPublic200Response> executeWithHttpInfo() throws ApiException {
            return reactFeedPostPublicWithHttpInfo(tenantId, postId, reactBodyParams, isUndo, broadcastId, sso);
        }

        /**
         * Execute reactFeedPostPublic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReactFeedPostPublic200Response> _callback) throws ApiException {
            return reactFeedPostPublicAsync(tenantId, postId, reactBodyParams, isUndo, broadcastId, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param postId  (required)
     * @param reactBodyParams  (required)
     * @return APIreactFeedPostPublicRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIreactFeedPostPublicRequest reactFeedPostPublic(String tenantId, String postId, ReactBodyParams reactBodyParams) {
        return new APIreactFeedPostPublicRequest(tenantId, postId, reactBodyParams);
    }
    private okhttp3.Call resetUserNotificationCountCall(String tenantId, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-notifications/reset-count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetUserNotificationCountValidateBeforeCall(String tenantId, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling resetUserNotificationCount(Async)");
        }

        return resetUserNotificationCountCall(tenantId, sso, _callback);

    }


    private ApiResponse<ResetUserNotifications200Response> resetUserNotificationCountWithHttpInfo(String tenantId, String sso) throws ApiException {
        okhttp3.Call localVarCall = resetUserNotificationCountValidateBeforeCall(tenantId, sso, null);
        Type localVarReturnType = new TypeToken<ResetUserNotifications200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resetUserNotificationCountAsync(String tenantId, String sso, final ApiCallback<ResetUserNotifications200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetUserNotificationCountValidateBeforeCall(tenantId, sso, _callback);
        Type localVarReturnType = new TypeToken<ResetUserNotifications200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIresetUserNotificationCountRequest {
        private final String tenantId;
        private String sso;

        private APIresetUserNotificationCountRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIresetUserNotificationCountRequest
         */
        public APIresetUserNotificationCountRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for resetUserNotificationCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resetUserNotificationCountCall(tenantId, sso, _callback);
        }

        /**
         * Execute resetUserNotificationCount request
         * @return ResetUserNotifications200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ResetUserNotifications200Response execute() throws ApiException {
            ApiResponse<ResetUserNotifications200Response> localVarResp = resetUserNotificationCountWithHttpInfo(tenantId, sso);
            return localVarResp.getData();
        }

        /**
         * Execute resetUserNotificationCount request with HTTP info returned
         * @return ApiResponse&lt;ResetUserNotifications200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResetUserNotifications200Response> executeWithHttpInfo() throws ApiException {
            return resetUserNotificationCountWithHttpInfo(tenantId, sso);
        }

        /**
         * Execute resetUserNotificationCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResetUserNotifications200Response> _callback) throws ApiException {
            return resetUserNotificationCountAsync(tenantId, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIresetUserNotificationCountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIresetUserNotificationCountRequest resetUserNotificationCount(String tenantId) {
        return new APIresetUserNotificationCountRequest(tenantId);
    }
    private okhttp3.Call resetUserNotificationsCall(String tenantId, String afterId, Double afterCreatedAt, Boolean unreadOnly, Boolean dmOnly, Boolean noDm, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-notifications/reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (afterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterId", afterId));
        }

        if (afterCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterCreatedAt", afterCreatedAt));
        }

        if (unreadOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unreadOnly", unreadOnly));
        }

        if (dmOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dmOnly", dmOnly));
        }

        if (noDm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("noDm", noDm));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetUserNotificationsValidateBeforeCall(String tenantId, String afterId, Double afterCreatedAt, Boolean unreadOnly, Boolean dmOnly, Boolean noDm, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling resetUserNotifications(Async)");
        }

        return resetUserNotificationsCall(tenantId, afterId, afterCreatedAt, unreadOnly, dmOnly, noDm, sso, _callback);

    }


    private ApiResponse<ResetUserNotifications200Response> resetUserNotificationsWithHttpInfo(String tenantId, String afterId, Double afterCreatedAt, Boolean unreadOnly, Boolean dmOnly, Boolean noDm, String sso) throws ApiException {
        okhttp3.Call localVarCall = resetUserNotificationsValidateBeforeCall(tenantId, afterId, afterCreatedAt, unreadOnly, dmOnly, noDm, sso, null);
        Type localVarReturnType = new TypeToken<ResetUserNotifications200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resetUserNotificationsAsync(String tenantId, String afterId, Double afterCreatedAt, Boolean unreadOnly, Boolean dmOnly, Boolean noDm, String sso, final ApiCallback<ResetUserNotifications200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetUserNotificationsValidateBeforeCall(tenantId, afterId, afterCreatedAt, unreadOnly, dmOnly, noDm, sso, _callback);
        Type localVarReturnType = new TypeToken<ResetUserNotifications200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIresetUserNotificationsRequest {
        private final String tenantId;
        private String afterId;
        private Double afterCreatedAt;
        private Boolean unreadOnly;
        private Boolean dmOnly;
        private Boolean noDm;
        private String sso;

        private APIresetUserNotificationsRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set afterId
         * @param afterId  (optional)
         * @return APIresetUserNotificationsRequest
         */
        public APIresetUserNotificationsRequest afterId(String afterId) {
            this.afterId = afterId;
            return this;
        }

        /**
         * Set afterCreatedAt
         * @param afterCreatedAt  (optional)
         * @return APIresetUserNotificationsRequest
         */
        public APIresetUserNotificationsRequest afterCreatedAt(Double afterCreatedAt) {
            this.afterCreatedAt = afterCreatedAt;
            return this;
        }

        /**
         * Set unreadOnly
         * @param unreadOnly  (optional)
         * @return APIresetUserNotificationsRequest
         */
        public APIresetUserNotificationsRequest unreadOnly(Boolean unreadOnly) {
            this.unreadOnly = unreadOnly;
            return this;
        }

        /**
         * Set dmOnly
         * @param dmOnly  (optional)
         * @return APIresetUserNotificationsRequest
         */
        public APIresetUserNotificationsRequest dmOnly(Boolean dmOnly) {
            this.dmOnly = dmOnly;
            return this;
        }

        /**
         * Set noDm
         * @param noDm  (optional)
         * @return APIresetUserNotificationsRequest
         */
        public APIresetUserNotificationsRequest noDm(Boolean noDm) {
            this.noDm = noDm;
            return this;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIresetUserNotificationsRequest
         */
        public APIresetUserNotificationsRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for resetUserNotifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resetUserNotificationsCall(tenantId, afterId, afterCreatedAt, unreadOnly, dmOnly, noDm, sso, _callback);
        }

        /**
         * Execute resetUserNotifications request
         * @return ResetUserNotifications200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ResetUserNotifications200Response execute() throws ApiException {
            ApiResponse<ResetUserNotifications200Response> localVarResp = resetUserNotificationsWithHttpInfo(tenantId, afterId, afterCreatedAt, unreadOnly, dmOnly, noDm, sso);
            return localVarResp.getData();
        }

        /**
         * Execute resetUserNotifications request with HTTP info returned
         * @return ApiResponse&lt;ResetUserNotifications200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResetUserNotifications200Response> executeWithHttpInfo() throws ApiException {
            return resetUserNotificationsWithHttpInfo(tenantId, afterId, afterCreatedAt, unreadOnly, dmOnly, noDm, sso);
        }

        /**
         * Execute resetUserNotifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResetUserNotifications200Response> _callback) throws ApiException {
            return resetUserNotificationsAsync(tenantId, afterId, afterCreatedAt, unreadOnly, dmOnly, noDm, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIresetUserNotificationsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIresetUserNotificationsRequest resetUserNotifications(String tenantId) {
        return new APIresetUserNotificationsRequest(tenantId);
    }
    private okhttp3.Call setCommentTextCall(String tenantId, String commentId, String broadcastId, CommentTextUpdateRequest commentTextUpdateRequest, String editKey, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commentTextUpdateRequest;

        // create path and map variables
        String localVarPath = "/comments/{tenantId}/{commentId}/update-text"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (broadcastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("broadcastId", broadcastId));
        }

        if (editKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("editKey", editKey));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setCommentTextValidateBeforeCall(String tenantId, String commentId, String broadcastId, CommentTextUpdateRequest commentTextUpdateRequest, String editKey, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling setCommentText(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling setCommentText(Async)");
        }

        // verify the required parameter 'broadcastId' is set
        if (broadcastId == null) {
            throw new ApiException("Missing the required parameter 'broadcastId' when calling setCommentText(Async)");
        }

        // verify the required parameter 'commentTextUpdateRequest' is set
        if (commentTextUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'commentTextUpdateRequest' when calling setCommentText(Async)");
        }

        return setCommentTextCall(tenantId, commentId, broadcastId, commentTextUpdateRequest, editKey, sso, _callback);

    }


    private ApiResponse<SetCommentText200Response> setCommentTextWithHttpInfo(String tenantId, String commentId, String broadcastId, CommentTextUpdateRequest commentTextUpdateRequest, String editKey, String sso) throws ApiException {
        okhttp3.Call localVarCall = setCommentTextValidateBeforeCall(tenantId, commentId, broadcastId, commentTextUpdateRequest, editKey, sso, null);
        Type localVarReturnType = new TypeToken<SetCommentText200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setCommentTextAsync(String tenantId, String commentId, String broadcastId, CommentTextUpdateRequest commentTextUpdateRequest, String editKey, String sso, final ApiCallback<SetCommentText200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setCommentTextValidateBeforeCall(tenantId, commentId, broadcastId, commentTextUpdateRequest, editKey, sso, _callback);
        Type localVarReturnType = new TypeToken<SetCommentText200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsetCommentTextRequest {
        private final String tenantId;
        private final String commentId;
        private final String broadcastId;
        private final CommentTextUpdateRequest commentTextUpdateRequest;
        private String editKey;
        private String sso;

        private APIsetCommentTextRequest(String tenantId, String commentId, String broadcastId, CommentTextUpdateRequest commentTextUpdateRequest) {
            this.tenantId = tenantId;
            this.commentId = commentId;
            this.broadcastId = broadcastId;
            this.commentTextUpdateRequest = commentTextUpdateRequest;
        }

        /**
         * Set editKey
         * @param editKey  (optional)
         * @return APIsetCommentTextRequest
         */
        public APIsetCommentTextRequest editKey(String editKey) {
            this.editKey = editKey;
            return this;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIsetCommentTextRequest
         */
        public APIsetCommentTextRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for setCommentText
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setCommentTextCall(tenantId, commentId, broadcastId, commentTextUpdateRequest, editKey, sso, _callback);
        }

        /**
         * Execute setCommentText request
         * @return SetCommentText200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public SetCommentText200Response execute() throws ApiException {
            ApiResponse<SetCommentText200Response> localVarResp = setCommentTextWithHttpInfo(tenantId, commentId, broadcastId, commentTextUpdateRequest, editKey, sso);
            return localVarResp.getData();
        }

        /**
         * Execute setCommentText request with HTTP info returned
         * @return ApiResponse&lt;SetCommentText200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SetCommentText200Response> executeWithHttpInfo() throws ApiException {
            return setCommentTextWithHttpInfo(tenantId, commentId, broadcastId, commentTextUpdateRequest, editKey, sso);
        }

        /**
         * Execute setCommentText request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SetCommentText200Response> _callback) throws ApiException {
            return setCommentTextAsync(tenantId, commentId, broadcastId, commentTextUpdateRequest, editKey, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param commentId  (required)
     * @param broadcastId  (required)
     * @param commentTextUpdateRequest  (required)
     * @return APIsetCommentTextRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIsetCommentTextRequest setCommentText(String tenantId, String commentId, String broadcastId, CommentTextUpdateRequest commentTextUpdateRequest) {
        return new APIsetCommentTextRequest(tenantId, commentId, broadcastId, commentTextUpdateRequest);
    }
    private okhttp3.Call unBlockCommentPublicCall(String tenantId, String commentId, PublicBlockFromCommentParams publicBlockFromCommentParams, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publicBlockFromCommentParams;

        // create path and map variables
        String localVarPath = "/block-from-comment/{commentId}"
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unBlockCommentPublicValidateBeforeCall(String tenantId, String commentId, PublicBlockFromCommentParams publicBlockFromCommentParams, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling unBlockCommentPublic(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling unBlockCommentPublic(Async)");
        }

        // verify the required parameter 'publicBlockFromCommentParams' is set
        if (publicBlockFromCommentParams == null) {
            throw new ApiException("Missing the required parameter 'publicBlockFromCommentParams' when calling unBlockCommentPublic(Async)");
        }

        return unBlockCommentPublicCall(tenantId, commentId, publicBlockFromCommentParams, sso, _callback);

    }


    private ApiResponse<UnBlockCommentPublic200Response> unBlockCommentPublicWithHttpInfo(String tenantId, String commentId, PublicBlockFromCommentParams publicBlockFromCommentParams, String sso) throws ApiException {
        okhttp3.Call localVarCall = unBlockCommentPublicValidateBeforeCall(tenantId, commentId, publicBlockFromCommentParams, sso, null);
        Type localVarReturnType = new TypeToken<UnBlockCommentPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unBlockCommentPublicAsync(String tenantId, String commentId, PublicBlockFromCommentParams publicBlockFromCommentParams, String sso, final ApiCallback<UnBlockCommentPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = unBlockCommentPublicValidateBeforeCall(tenantId, commentId, publicBlockFromCommentParams, sso, _callback);
        Type localVarReturnType = new TypeToken<UnBlockCommentPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIunBlockCommentPublicRequest {
        private final String tenantId;
        private final String commentId;
        private final PublicBlockFromCommentParams publicBlockFromCommentParams;
        private String sso;

        private APIunBlockCommentPublicRequest(String tenantId, String commentId, PublicBlockFromCommentParams publicBlockFromCommentParams) {
            this.tenantId = tenantId;
            this.commentId = commentId;
            this.publicBlockFromCommentParams = publicBlockFromCommentParams;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIunBlockCommentPublicRequest
         */
        public APIunBlockCommentPublicRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for unBlockCommentPublic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unBlockCommentPublicCall(tenantId, commentId, publicBlockFromCommentParams, sso, _callback);
        }

        /**
         * Execute unBlockCommentPublic request
         * @return UnBlockCommentPublic200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public UnBlockCommentPublic200Response execute() throws ApiException {
            ApiResponse<UnBlockCommentPublic200Response> localVarResp = unBlockCommentPublicWithHttpInfo(tenantId, commentId, publicBlockFromCommentParams, sso);
            return localVarResp.getData();
        }

        /**
         * Execute unBlockCommentPublic request with HTTP info returned
         * @return ApiResponse&lt;UnBlockCommentPublic200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UnBlockCommentPublic200Response> executeWithHttpInfo() throws ApiException {
            return unBlockCommentPublicWithHttpInfo(tenantId, commentId, publicBlockFromCommentParams, sso);
        }

        /**
         * Execute unBlockCommentPublic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UnBlockCommentPublic200Response> _callback) throws ApiException {
            return unBlockCommentPublicAsync(tenantId, commentId, publicBlockFromCommentParams, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param commentId  (required)
     * @param publicBlockFromCommentParams  (required)
     * @return APIunBlockCommentPublicRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIunBlockCommentPublicRequest unBlockCommentPublic(String tenantId, String commentId, PublicBlockFromCommentParams publicBlockFromCommentParams) {
        return new APIunBlockCommentPublicRequest(tenantId, commentId, publicBlockFromCommentParams);
    }
    private okhttp3.Call unLockCommentCall(String tenantId, String commentId, String broadcastId, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comments/{tenantId}/{commentId}/unlock"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (broadcastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("broadcastId", broadcastId));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unLockCommentValidateBeforeCall(String tenantId, String commentId, String broadcastId, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling unLockComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling unLockComment(Async)");
        }

        // verify the required parameter 'broadcastId' is set
        if (broadcastId == null) {
            throw new ApiException("Missing the required parameter 'broadcastId' when calling unLockComment(Async)");
        }

        return unLockCommentCall(tenantId, commentId, broadcastId, sso, _callback);

    }


    private ApiResponse<LockComment200Response> unLockCommentWithHttpInfo(String tenantId, String commentId, String broadcastId, String sso) throws ApiException {
        okhttp3.Call localVarCall = unLockCommentValidateBeforeCall(tenantId, commentId, broadcastId, sso, null);
        Type localVarReturnType = new TypeToken<LockComment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unLockCommentAsync(String tenantId, String commentId, String broadcastId, String sso, final ApiCallback<LockComment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = unLockCommentValidateBeforeCall(tenantId, commentId, broadcastId, sso, _callback);
        Type localVarReturnType = new TypeToken<LockComment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIunLockCommentRequest {
        private final String tenantId;
        private final String commentId;
        private final String broadcastId;
        private String sso;

        private APIunLockCommentRequest(String tenantId, String commentId, String broadcastId) {
            this.tenantId = tenantId;
            this.commentId = commentId;
            this.broadcastId = broadcastId;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIunLockCommentRequest
         */
        public APIunLockCommentRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for unLockComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unLockCommentCall(tenantId, commentId, broadcastId, sso, _callback);
        }

        /**
         * Execute unLockComment request
         * @return LockComment200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public LockComment200Response execute() throws ApiException {
            ApiResponse<LockComment200Response> localVarResp = unLockCommentWithHttpInfo(tenantId, commentId, broadcastId, sso);
            return localVarResp.getData();
        }

        /**
         * Execute unLockComment request with HTTP info returned
         * @return ApiResponse&lt;LockComment200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LockComment200Response> executeWithHttpInfo() throws ApiException {
            return unLockCommentWithHttpInfo(tenantId, commentId, broadcastId, sso);
        }

        /**
         * Execute unLockComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LockComment200Response> _callback) throws ApiException {
            return unLockCommentAsync(tenantId, commentId, broadcastId, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param commentId  (required)
     * @param broadcastId  (required)
     * @return APIunLockCommentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIunLockCommentRequest unLockComment(String tenantId, String commentId, String broadcastId) {
        return new APIunLockCommentRequest(tenantId, commentId, broadcastId);
    }
    private okhttp3.Call unPinCommentCall(String tenantId, String commentId, String broadcastId, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comments/{tenantId}/{commentId}/unpin"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (broadcastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("broadcastId", broadcastId));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unPinCommentValidateBeforeCall(String tenantId, String commentId, String broadcastId, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling unPinComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling unPinComment(Async)");
        }

        // verify the required parameter 'broadcastId' is set
        if (broadcastId == null) {
            throw new ApiException("Missing the required parameter 'broadcastId' when calling unPinComment(Async)");
        }

        return unPinCommentCall(tenantId, commentId, broadcastId, sso, _callback);

    }


    private ApiResponse<PinComment200Response> unPinCommentWithHttpInfo(String tenantId, String commentId, String broadcastId, String sso) throws ApiException {
        okhttp3.Call localVarCall = unPinCommentValidateBeforeCall(tenantId, commentId, broadcastId, sso, null);
        Type localVarReturnType = new TypeToken<PinComment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unPinCommentAsync(String tenantId, String commentId, String broadcastId, String sso, final ApiCallback<PinComment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = unPinCommentValidateBeforeCall(tenantId, commentId, broadcastId, sso, _callback);
        Type localVarReturnType = new TypeToken<PinComment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIunPinCommentRequest {
        private final String tenantId;
        private final String commentId;
        private final String broadcastId;
        private String sso;

        private APIunPinCommentRequest(String tenantId, String commentId, String broadcastId) {
            this.tenantId = tenantId;
            this.commentId = commentId;
            this.broadcastId = broadcastId;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIunPinCommentRequest
         */
        public APIunPinCommentRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for unPinComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unPinCommentCall(tenantId, commentId, broadcastId, sso, _callback);
        }

        /**
         * Execute unPinComment request
         * @return PinComment200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public PinComment200Response execute() throws ApiException {
            ApiResponse<PinComment200Response> localVarResp = unPinCommentWithHttpInfo(tenantId, commentId, broadcastId, sso);
            return localVarResp.getData();
        }

        /**
         * Execute unPinComment request with HTTP info returned
         * @return ApiResponse&lt;PinComment200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PinComment200Response> executeWithHttpInfo() throws ApiException {
            return unPinCommentWithHttpInfo(tenantId, commentId, broadcastId, sso);
        }

        /**
         * Execute unPinComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PinComment200Response> _callback) throws ApiException {
            return unPinCommentAsync(tenantId, commentId, broadcastId, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param commentId  (required)
     * @param broadcastId  (required)
     * @return APIunPinCommentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIunPinCommentRequest unPinComment(String tenantId, String commentId, String broadcastId) {
        return new APIunPinCommentRequest(tenantId, commentId, broadcastId);
    }
    private okhttp3.Call updateUserNotificationCommentSubscriptionStatusCall(String tenantId, String notificationId, String optedInOrOut, String commentId, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-notifications/{notificationId}/mark-opted/{optedInOrOut}"
            .replace("{" + "notificationId" + "}", localVarApiClient.escapeString(notificationId.toString()))
            .replace("{" + "optedInOrOut" + "}", localVarApiClient.escapeString(optedInOrOut.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (commentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commentId", commentId));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserNotificationCommentSubscriptionStatusValidateBeforeCall(String tenantId, String notificationId, String optedInOrOut, String commentId, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling updateUserNotificationCommentSubscriptionStatus(Async)");
        }

        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling updateUserNotificationCommentSubscriptionStatus(Async)");
        }

        // verify the required parameter 'optedInOrOut' is set
        if (optedInOrOut == null) {
            throw new ApiException("Missing the required parameter 'optedInOrOut' when calling updateUserNotificationCommentSubscriptionStatus(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling updateUserNotificationCommentSubscriptionStatus(Async)");
        }

        return updateUserNotificationCommentSubscriptionStatusCall(tenantId, notificationId, optedInOrOut, commentId, sso, _callback);

    }


    private ApiResponse<UpdateUserNotificationStatus200Response> updateUserNotificationCommentSubscriptionStatusWithHttpInfo(String tenantId, String notificationId, String optedInOrOut, String commentId, String sso) throws ApiException {
        okhttp3.Call localVarCall = updateUserNotificationCommentSubscriptionStatusValidateBeforeCall(tenantId, notificationId, optedInOrOut, commentId, sso, null);
        Type localVarReturnType = new TypeToken<UpdateUserNotificationStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserNotificationCommentSubscriptionStatusAsync(String tenantId, String notificationId, String optedInOrOut, String commentId, String sso, final ApiCallback<UpdateUserNotificationStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserNotificationCommentSubscriptionStatusValidateBeforeCall(tenantId, notificationId, optedInOrOut, commentId, sso, _callback);
        Type localVarReturnType = new TypeToken<UpdateUserNotificationStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateUserNotificationCommentSubscriptionStatusRequest {
        private final String tenantId;
        private final String notificationId;
        private final String optedInOrOut;
        private final String commentId;
        private String sso;

        private APIupdateUserNotificationCommentSubscriptionStatusRequest(String tenantId, String notificationId, String optedInOrOut, String commentId) {
            this.tenantId = tenantId;
            this.notificationId = notificationId;
            this.optedInOrOut = optedInOrOut;
            this.commentId = commentId;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIupdateUserNotificationCommentSubscriptionStatusRequest
         */
        public APIupdateUserNotificationCommentSubscriptionStatusRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for updateUserNotificationCommentSubscriptionStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateUserNotificationCommentSubscriptionStatusCall(tenantId, notificationId, optedInOrOut, commentId, sso, _callback);
        }

        /**
         * Execute updateUserNotificationCommentSubscriptionStatus request
         * @return UpdateUserNotificationStatus200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public UpdateUserNotificationStatus200Response execute() throws ApiException {
            ApiResponse<UpdateUserNotificationStatus200Response> localVarResp = updateUserNotificationCommentSubscriptionStatusWithHttpInfo(tenantId, notificationId, optedInOrOut, commentId, sso);
            return localVarResp.getData();
        }

        /**
         * Execute updateUserNotificationCommentSubscriptionStatus request with HTTP info returned
         * @return ApiResponse&lt;UpdateUserNotificationStatus200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateUserNotificationStatus200Response> executeWithHttpInfo() throws ApiException {
            return updateUserNotificationCommentSubscriptionStatusWithHttpInfo(tenantId, notificationId, optedInOrOut, commentId, sso);
        }

        /**
         * Execute updateUserNotificationCommentSubscriptionStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateUserNotificationStatus200Response> _callback) throws ApiException {
            return updateUserNotificationCommentSubscriptionStatusAsync(tenantId, notificationId, optedInOrOut, commentId, sso, _callback);
        }
    }

    /**
     * 
     * Enable or disable notifications for a specific comment.
     * @param tenantId  (required)
     * @param notificationId  (required)
     * @param optedInOrOut  (required)
     * @param commentId  (required)
     * @return APIupdateUserNotificationCommentSubscriptionStatusRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateUserNotificationCommentSubscriptionStatusRequest updateUserNotificationCommentSubscriptionStatus(String tenantId, String notificationId, String optedInOrOut, String commentId) {
        return new APIupdateUserNotificationCommentSubscriptionStatusRequest(tenantId, notificationId, optedInOrOut, commentId);
    }
    private okhttp3.Call updateUserNotificationPageSubscriptionStatusCall(String tenantId, String urlId, String url, String pageTitle, String subscribedOrUnsubscribed, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-notifications/set-subscription-state/{subscribedOrUnsubscribed}"
            .replace("{" + "subscribedOrUnsubscribed" + "}", localVarApiClient.escapeString(subscribedOrUnsubscribed.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (urlId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlId", urlId));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (pageTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageTitle", pageTitle));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserNotificationPageSubscriptionStatusValidateBeforeCall(String tenantId, String urlId, String url, String pageTitle, String subscribedOrUnsubscribed, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling updateUserNotificationPageSubscriptionStatus(Async)");
        }

        // verify the required parameter 'urlId' is set
        if (urlId == null) {
            throw new ApiException("Missing the required parameter 'urlId' when calling updateUserNotificationPageSubscriptionStatus(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling updateUserNotificationPageSubscriptionStatus(Async)");
        }

        // verify the required parameter 'pageTitle' is set
        if (pageTitle == null) {
            throw new ApiException("Missing the required parameter 'pageTitle' when calling updateUserNotificationPageSubscriptionStatus(Async)");
        }

        // verify the required parameter 'subscribedOrUnsubscribed' is set
        if (subscribedOrUnsubscribed == null) {
            throw new ApiException("Missing the required parameter 'subscribedOrUnsubscribed' when calling updateUserNotificationPageSubscriptionStatus(Async)");
        }

        return updateUserNotificationPageSubscriptionStatusCall(tenantId, urlId, url, pageTitle, subscribedOrUnsubscribed, sso, _callback);

    }


    private ApiResponse<UpdateUserNotificationStatus200Response> updateUserNotificationPageSubscriptionStatusWithHttpInfo(String tenantId, String urlId, String url, String pageTitle, String subscribedOrUnsubscribed, String sso) throws ApiException {
        okhttp3.Call localVarCall = updateUserNotificationPageSubscriptionStatusValidateBeforeCall(tenantId, urlId, url, pageTitle, subscribedOrUnsubscribed, sso, null);
        Type localVarReturnType = new TypeToken<UpdateUserNotificationStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserNotificationPageSubscriptionStatusAsync(String tenantId, String urlId, String url, String pageTitle, String subscribedOrUnsubscribed, String sso, final ApiCallback<UpdateUserNotificationStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserNotificationPageSubscriptionStatusValidateBeforeCall(tenantId, urlId, url, pageTitle, subscribedOrUnsubscribed, sso, _callback);
        Type localVarReturnType = new TypeToken<UpdateUserNotificationStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateUserNotificationPageSubscriptionStatusRequest {
        private final String tenantId;
        private final String urlId;
        private final String url;
        private final String pageTitle;
        private final String subscribedOrUnsubscribed;
        private String sso;

        private APIupdateUserNotificationPageSubscriptionStatusRequest(String tenantId, String urlId, String url, String pageTitle, String subscribedOrUnsubscribed) {
            this.tenantId = tenantId;
            this.urlId = urlId;
            this.url = url;
            this.pageTitle = pageTitle;
            this.subscribedOrUnsubscribed = subscribedOrUnsubscribed;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIupdateUserNotificationPageSubscriptionStatusRequest
         */
        public APIupdateUserNotificationPageSubscriptionStatusRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for updateUserNotificationPageSubscriptionStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateUserNotificationPageSubscriptionStatusCall(tenantId, urlId, url, pageTitle, subscribedOrUnsubscribed, sso, _callback);
        }

        /**
         * Execute updateUserNotificationPageSubscriptionStatus request
         * @return UpdateUserNotificationStatus200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public UpdateUserNotificationStatus200Response execute() throws ApiException {
            ApiResponse<UpdateUserNotificationStatus200Response> localVarResp = updateUserNotificationPageSubscriptionStatusWithHttpInfo(tenantId, urlId, url, pageTitle, subscribedOrUnsubscribed, sso);
            return localVarResp.getData();
        }

        /**
         * Execute updateUserNotificationPageSubscriptionStatus request with HTTP info returned
         * @return ApiResponse&lt;UpdateUserNotificationStatus200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateUserNotificationStatus200Response> executeWithHttpInfo() throws ApiException {
            return updateUserNotificationPageSubscriptionStatusWithHttpInfo(tenantId, urlId, url, pageTitle, subscribedOrUnsubscribed, sso);
        }

        /**
         * Execute updateUserNotificationPageSubscriptionStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateUserNotificationStatus200Response> _callback) throws ApiException {
            return updateUserNotificationPageSubscriptionStatusAsync(tenantId, urlId, url, pageTitle, subscribedOrUnsubscribed, sso, _callback);
        }
    }

    /**
     * 
     * Enable or disable notifications for a page. When users are subscribed to a page, notifications are created for new root comments, and also
     * @param tenantId  (required)
     * @param urlId  (required)
     * @param url  (required)
     * @param pageTitle  (required)
     * @param subscribedOrUnsubscribed  (required)
     * @return APIupdateUserNotificationPageSubscriptionStatusRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateUserNotificationPageSubscriptionStatusRequest updateUserNotificationPageSubscriptionStatus(String tenantId, String urlId, String url, String pageTitle, String subscribedOrUnsubscribed) {
        return new APIupdateUserNotificationPageSubscriptionStatusRequest(tenantId, urlId, url, pageTitle, subscribedOrUnsubscribed);
    }
    private okhttp3.Call updateUserNotificationStatusCall(String tenantId, String notificationId, String newStatus, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-notifications/{notificationId}/mark/{newStatus}"
            .replace("{" + "notificationId" + "}", localVarApiClient.escapeString(notificationId.toString()))
            .replace("{" + "newStatus" + "}", localVarApiClient.escapeString(newStatus.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserNotificationStatusValidateBeforeCall(String tenantId, String notificationId, String newStatus, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling updateUserNotificationStatus(Async)");
        }

        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling updateUserNotificationStatus(Async)");
        }

        // verify the required parameter 'newStatus' is set
        if (newStatus == null) {
            throw new ApiException("Missing the required parameter 'newStatus' when calling updateUserNotificationStatus(Async)");
        }

        return updateUserNotificationStatusCall(tenantId, notificationId, newStatus, sso, _callback);

    }


    private ApiResponse<UpdateUserNotificationStatus200Response> updateUserNotificationStatusWithHttpInfo(String tenantId, String notificationId, String newStatus, String sso) throws ApiException {
        okhttp3.Call localVarCall = updateUserNotificationStatusValidateBeforeCall(tenantId, notificationId, newStatus, sso, null);
        Type localVarReturnType = new TypeToken<UpdateUserNotificationStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserNotificationStatusAsync(String tenantId, String notificationId, String newStatus, String sso, final ApiCallback<UpdateUserNotificationStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserNotificationStatusValidateBeforeCall(tenantId, notificationId, newStatus, sso, _callback);
        Type localVarReturnType = new TypeToken<UpdateUserNotificationStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateUserNotificationStatusRequest {
        private final String tenantId;
        private final String notificationId;
        private final String newStatus;
        private String sso;

        private APIupdateUserNotificationStatusRequest(String tenantId, String notificationId, String newStatus) {
            this.tenantId = tenantId;
            this.notificationId = notificationId;
            this.newStatus = newStatus;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIupdateUserNotificationStatusRequest
         */
        public APIupdateUserNotificationStatusRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for updateUserNotificationStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateUserNotificationStatusCall(tenantId, notificationId, newStatus, sso, _callback);
        }

        /**
         * Execute updateUserNotificationStatus request
         * @return UpdateUserNotificationStatus200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public UpdateUserNotificationStatus200Response execute() throws ApiException {
            ApiResponse<UpdateUserNotificationStatus200Response> localVarResp = updateUserNotificationStatusWithHttpInfo(tenantId, notificationId, newStatus, sso);
            return localVarResp.getData();
        }

        /**
         * Execute updateUserNotificationStatus request with HTTP info returned
         * @return ApiResponse&lt;UpdateUserNotificationStatus200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateUserNotificationStatus200Response> executeWithHttpInfo() throws ApiException {
            return updateUserNotificationStatusWithHttpInfo(tenantId, notificationId, newStatus, sso);
        }

        /**
         * Execute updateUserNotificationStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateUserNotificationStatus200Response> _callback) throws ApiException {
            return updateUserNotificationStatusAsync(tenantId, notificationId, newStatus, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param notificationId  (required)
     * @param newStatus  (required)
     * @return APIupdateUserNotificationStatusRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateUserNotificationStatusRequest updateUserNotificationStatus(String tenantId, String notificationId, String newStatus) {
        return new APIupdateUserNotificationStatusRequest(tenantId, notificationId, newStatus);
    }
    private okhttp3.Call uploadImageCall(String tenantId, SizePreset sizePreset, String urlId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/upload-image/{tenantId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sizePreset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sizePreset", sizePreset));
        }

        if (urlId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlId", urlId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadImageValidateBeforeCall(String tenantId, SizePreset sizePreset, String urlId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling uploadImage(Async)");
        }

        return uploadImageCall(tenantId, sizePreset, urlId, _callback);

    }


    private ApiResponse<UploadImageResponse> uploadImageWithHttpInfo(String tenantId, SizePreset sizePreset, String urlId) throws ApiException {
        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(tenantId, sizePreset, urlId, null);
        Type localVarReturnType = new TypeToken<UploadImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadImageAsync(String tenantId, SizePreset sizePreset, String urlId, final ApiCallback<UploadImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(tenantId, sizePreset, urlId, _callback);
        Type localVarReturnType = new TypeToken<UploadImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIuploadImageRequest {
        private final String tenantId;
        private SizePreset sizePreset;
        private String urlId;

        private APIuploadImageRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set sizePreset
         * @param sizePreset Size preset: \&quot;Default\&quot; (1000x1000px) or \&quot;CrossPlatform\&quot; (creates sizes for popular devices) (optional)
         * @return APIuploadImageRequest
         */
        public APIuploadImageRequest sizePreset(SizePreset sizePreset) {
            this.sizePreset = sizePreset;
            return this;
        }

        /**
         * Set urlId
         * @param urlId Page id that upload is happening from, to configure (optional)
         * @return APIuploadImageRequest
         */
        public APIuploadImageRequest urlId(String urlId) {
            this.urlId = urlId;
            return this;
        }

        /**
         * Build call for uploadImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return uploadImageCall(tenantId, sizePreset, urlId, _callback);
        }

        /**
         * Execute uploadImage request
         * @return UploadImageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public UploadImageResponse execute() throws ApiException {
            ApiResponse<UploadImageResponse> localVarResp = uploadImageWithHttpInfo(tenantId, sizePreset, urlId);
            return localVarResp.getData();
        }

        /**
         * Execute uploadImage request with HTTP info returned
         * @return ApiResponse&lt;UploadImageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadImageResponse> executeWithHttpInfo() throws ApiException {
            return uploadImageWithHttpInfo(tenantId, sizePreset, urlId);
        }

        /**
         * Execute uploadImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadImageResponse> _callback) throws ApiException {
            return uploadImageAsync(tenantId, sizePreset, urlId, _callback);
        }
    }

    /**
     * 
     * Upload and resize an image
     * @param tenantId Tenant ID (required)
     * @return APIuploadImageRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIuploadImageRequest uploadImage(String tenantId) {
        return new APIuploadImageRequest(tenantId);
    }
    private okhttp3.Call voteCommentCall(String tenantId, String commentId, String urlId, String broadcastId, VoteBodyParams voteBodyParams, String sessionId, String sso, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voteBodyParams;

        // create path and map variables
        String localVarPath = "/comments/{tenantId}/{commentId}/vote"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (urlId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlId", urlId));
        }

        if (broadcastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("broadcastId", broadcastId));
        }

        if (sessionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionId", sessionId));
        }

        if (sso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sso", sso));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call voteCommentValidateBeforeCall(String tenantId, String commentId, String urlId, String broadcastId, VoteBodyParams voteBodyParams, String sessionId, String sso, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling voteComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling voteComment(Async)");
        }

        // verify the required parameter 'urlId' is set
        if (urlId == null) {
            throw new ApiException("Missing the required parameter 'urlId' when calling voteComment(Async)");
        }

        // verify the required parameter 'broadcastId' is set
        if (broadcastId == null) {
            throw new ApiException("Missing the required parameter 'broadcastId' when calling voteComment(Async)");
        }

        // verify the required parameter 'voteBodyParams' is set
        if (voteBodyParams == null) {
            throw new ApiException("Missing the required parameter 'voteBodyParams' when calling voteComment(Async)");
        }

        return voteCommentCall(tenantId, commentId, urlId, broadcastId, voteBodyParams, sessionId, sso, _callback);

    }


    private ApiResponse<VoteComment200Response> voteCommentWithHttpInfo(String tenantId, String commentId, String urlId, String broadcastId, VoteBodyParams voteBodyParams, String sessionId, String sso) throws ApiException {
        okhttp3.Call localVarCall = voteCommentValidateBeforeCall(tenantId, commentId, urlId, broadcastId, voteBodyParams, sessionId, sso, null);
        Type localVarReturnType = new TypeToken<VoteComment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call voteCommentAsync(String tenantId, String commentId, String urlId, String broadcastId, VoteBodyParams voteBodyParams, String sessionId, String sso, final ApiCallback<VoteComment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = voteCommentValidateBeforeCall(tenantId, commentId, urlId, broadcastId, voteBodyParams, sessionId, sso, _callback);
        Type localVarReturnType = new TypeToken<VoteComment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIvoteCommentRequest {
        private final String tenantId;
        private final String commentId;
        private final String urlId;
        private final String broadcastId;
        private final VoteBodyParams voteBodyParams;
        private String sessionId;
        private String sso;

        private APIvoteCommentRequest(String tenantId, String commentId, String urlId, String broadcastId, VoteBodyParams voteBodyParams) {
            this.tenantId = tenantId;
            this.commentId = commentId;
            this.urlId = urlId;
            this.broadcastId = broadcastId;
            this.voteBodyParams = voteBodyParams;
        }

        /**
         * Set sessionId
         * @param sessionId  (optional)
         * @return APIvoteCommentRequest
         */
        public APIvoteCommentRequest sessionId(String sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        /**
         * Set sso
         * @param sso  (optional)
         * @return APIvoteCommentRequest
         */
        public APIvoteCommentRequest sso(String sso) {
            this.sso = sso;
            return this;
        }

        /**
         * Build call for voteComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return voteCommentCall(tenantId, commentId, urlId, broadcastId, voteBodyParams, sessionId, sso, _callback);
        }

        /**
         * Execute voteComment request
         * @return VoteComment200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public VoteComment200Response execute() throws ApiException {
            ApiResponse<VoteComment200Response> localVarResp = voteCommentWithHttpInfo(tenantId, commentId, urlId, broadcastId, voteBodyParams, sessionId, sso);
            return localVarResp.getData();
        }

        /**
         * Execute voteComment request with HTTP info returned
         * @return ApiResponse&lt;VoteComment200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VoteComment200Response> executeWithHttpInfo() throws ApiException {
            return voteCommentWithHttpInfo(tenantId, commentId, urlId, broadcastId, voteBodyParams, sessionId, sso);
        }

        /**
         * Execute voteComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VoteComment200Response> _callback) throws ApiException {
            return voteCommentAsync(tenantId, commentId, urlId, broadcastId, voteBodyParams, sessionId, sso, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param commentId  (required)
     * @param urlId  (required)
     * @param broadcastId  (required)
     * @param voteBodyParams  (required)
     * @return APIvoteCommentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIvoteCommentRequest voteComment(String tenantId, String commentId, String urlId, String broadcastId, VoteBodyParams voteBodyParams) {
        return new APIvoteCommentRequest(tenantId, commentId, urlId, broadcastId, voteBodyParams);
    }
}
