/*
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fastcomments.api;

import com.fastcomments.invoker.ApiCallback;
import com.fastcomments.invoker.ApiClient;
import com.fastcomments.invoker.ApiException;
import com.fastcomments.invoker.ApiResponse;
import com.fastcomments.invoker.Configuration;
import com.fastcomments.invoker.Pair;
import com.fastcomments.invoker.ProgressRequestBody;
import com.fastcomments.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.fastcomments.model.AddDomainConfig200Response;
import com.fastcomments.model.AddDomainConfigParams;
import com.fastcomments.model.AddPageAPIResponse;
import com.fastcomments.model.AddSSOUserAPIResponse;
import com.fastcomments.model.AggregateQuestionResults200Response;
import com.fastcomments.model.AggregateTimeBucket;
import com.fastcomments.model.AggregationRequest;
import com.fastcomments.model.AggregationResponse;
import com.fastcomments.model.BlockFromCommentParams;
import com.fastcomments.model.BlockFromCommentPublic200Response;
import com.fastcomments.model.BulkAggregateQuestionResults200Response;
import com.fastcomments.model.BulkAggregateQuestionResultsRequest;
import com.fastcomments.model.CombineCommentsWithQuestionResults200Response;
import com.fastcomments.model.CreateAPIPageData;
import com.fastcomments.model.CreateAPISSOUserData;
import com.fastcomments.model.CreateAPIUserSubscriptionData;
import com.fastcomments.model.CreateCommentParams;
import com.fastcomments.model.CreateFeedPost200Response;
import com.fastcomments.model.CreateFeedPostParams;
import com.fastcomments.model.CreateSubscriptionAPIResponse;
import com.fastcomments.model.CreateUserBadge200Response;
import com.fastcomments.model.CreateUserBadgeParams;
import com.fastcomments.model.DeleteComment200Response;
import com.fastcomments.model.DeleteDomainConfig200Response;
import com.fastcomments.model.DeletePageAPIResponse;
import com.fastcomments.model.DeleteSSOUserAPIResponse;
import com.fastcomments.model.DeleteSubscriptionAPIResponse;
import com.fastcomments.model.FeedPost;
import com.fastcomments.model.FlagComment200Response;
import com.fastcomments.model.FlagCommentPublic200Response;
import com.fastcomments.model.GetAuditLogs200Response;
import com.fastcomments.model.GetComment200Response;
import com.fastcomments.model.GetComments200Response;
import com.fastcomments.model.GetDomainConfig200Response;
import com.fastcomments.model.GetDomainConfigs200Response;
import com.fastcomments.model.GetFeedPosts200Response;
import com.fastcomments.model.GetPageByURLIdAPIResponse;
import com.fastcomments.model.GetPagesAPIResponse;
import com.fastcomments.model.GetSSOUserByEmailAPIResponse;
import com.fastcomments.model.GetSSOUserByIdAPIResponse;
import com.fastcomments.model.GetSSOUsers200Response;
import com.fastcomments.model.GetSubscriptionsAPIResponse;
import com.fastcomments.model.GetUserBadge200Response;
import com.fastcomments.model.GetUserBadgeProgressById200Response;
import com.fastcomments.model.GetUserBadgeProgressList200Response;
import com.fastcomments.model.GetUserBadges200Response;
import java.time.OffsetDateTime;
import com.fastcomments.model.PatchDomainConfigParams;
import com.fastcomments.model.PatchPageAPIResponse;
import com.fastcomments.model.PatchSSOUserAPIResponse;
import com.fastcomments.model.PickAPICommentUpdatableCommentFields;
import com.fastcomments.model.PutSSOUserAPIResponse;
import com.fastcomments.model.SORTDIR;
import com.fastcomments.model.SaveComment200Response;
import com.fastcomments.model.SortDirections;
import com.fastcomments.model.UnBlockCommentPublic200Response;
import com.fastcomments.model.UnBlockFromCommentParams;
import com.fastcomments.model.UpdateAPIPageData;
import com.fastcomments.model.UpdateAPISSOUserData;
import com.fastcomments.model.UpdateDomainConfigParams;
import com.fastcomments.model.UpdateUserBadge200Response;
import com.fastcomments.model.UpdateUserBadgeParams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addDomainConfigCall(String tenantId, AddDomainConfigParams addDomainConfigParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addDomainConfigParams;

        // create path and map variables
        String localVarPath = "/api/v1/domain-configs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDomainConfigValidateBeforeCall(String tenantId, AddDomainConfigParams addDomainConfigParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling addDomainConfig(Async)");
        }

        // verify the required parameter 'addDomainConfigParams' is set
        if (addDomainConfigParams == null) {
            throw new ApiException("Missing the required parameter 'addDomainConfigParams' when calling addDomainConfig(Async)");
        }

        return addDomainConfigCall(tenantId, addDomainConfigParams, _callback);

    }


    private ApiResponse<AddDomainConfig200Response> addDomainConfigWithHttpInfo(String tenantId, AddDomainConfigParams addDomainConfigParams) throws ApiException {
        okhttp3.Call localVarCall = addDomainConfigValidateBeforeCall(tenantId, addDomainConfigParams, null);
        Type localVarReturnType = new TypeToken<AddDomainConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addDomainConfigAsync(String tenantId, AddDomainConfigParams addDomainConfigParams, final ApiCallback<AddDomainConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDomainConfigValidateBeforeCall(tenantId, addDomainConfigParams, _callback);
        Type localVarReturnType = new TypeToken<AddDomainConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaddDomainConfigRequest {
        private final String tenantId;
        private final AddDomainConfigParams addDomainConfigParams;

        private APIaddDomainConfigRequest(String tenantId, AddDomainConfigParams addDomainConfigParams) {
            this.tenantId = tenantId;
            this.addDomainConfigParams = addDomainConfigParams;
        }

        /**
         * Build call for addDomainConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addDomainConfigCall(tenantId, addDomainConfigParams, _callback);
        }

        /**
         * Execute addDomainConfig request
         * @return AddDomainConfig200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public AddDomainConfig200Response execute() throws ApiException {
            ApiResponse<AddDomainConfig200Response> localVarResp = addDomainConfigWithHttpInfo(tenantId, addDomainConfigParams);
            return localVarResp.getData();
        }

        /**
         * Execute addDomainConfig request with HTTP info returned
         * @return ApiResponse&lt;AddDomainConfig200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddDomainConfig200Response> executeWithHttpInfo() throws ApiException {
            return addDomainConfigWithHttpInfo(tenantId, addDomainConfigParams);
        }

        /**
         * Execute addDomainConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddDomainConfig200Response> _callback) throws ApiException {
            return addDomainConfigAsync(tenantId, addDomainConfigParams, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param addDomainConfigParams  (required)
     * @return APIaddDomainConfigRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIaddDomainConfigRequest addDomainConfig(String tenantId, AddDomainConfigParams addDomainConfigParams) {
        return new APIaddDomainConfigRequest(tenantId, addDomainConfigParams);
    }
    private okhttp3.Call addPageCall(String tenantId, CreateAPIPageData createAPIPageData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAPIPageData;

        // create path and map variables
        String localVarPath = "/api/v1/pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPageValidateBeforeCall(String tenantId, CreateAPIPageData createAPIPageData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling addPage(Async)");
        }

        // verify the required parameter 'createAPIPageData' is set
        if (createAPIPageData == null) {
            throw new ApiException("Missing the required parameter 'createAPIPageData' when calling addPage(Async)");
        }

        return addPageCall(tenantId, createAPIPageData, _callback);

    }


    private ApiResponse<AddPageAPIResponse> addPageWithHttpInfo(String tenantId, CreateAPIPageData createAPIPageData) throws ApiException {
        okhttp3.Call localVarCall = addPageValidateBeforeCall(tenantId, createAPIPageData, null);
        Type localVarReturnType = new TypeToken<AddPageAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPageAsync(String tenantId, CreateAPIPageData createAPIPageData, final ApiCallback<AddPageAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPageValidateBeforeCall(tenantId, createAPIPageData, _callback);
        Type localVarReturnType = new TypeToken<AddPageAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaddPageRequest {
        private final String tenantId;
        private final CreateAPIPageData createAPIPageData;

        private APIaddPageRequest(String tenantId, CreateAPIPageData createAPIPageData) {
            this.tenantId = tenantId;
            this.createAPIPageData = createAPIPageData;
        }

        /**
         * Build call for addPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addPageCall(tenantId, createAPIPageData, _callback);
        }

        /**
         * Execute addPage request
         * @return AddPageAPIResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public AddPageAPIResponse execute() throws ApiException {
            ApiResponse<AddPageAPIResponse> localVarResp = addPageWithHttpInfo(tenantId, createAPIPageData);
            return localVarResp.getData();
        }

        /**
         * Execute addPage request with HTTP info returned
         * @return ApiResponse&lt;AddPageAPIResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddPageAPIResponse> executeWithHttpInfo() throws ApiException {
            return addPageWithHttpInfo(tenantId, createAPIPageData);
        }

        /**
         * Execute addPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddPageAPIResponse> _callback) throws ApiException {
            return addPageAsync(tenantId, createAPIPageData, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param createAPIPageData  (required)
     * @return APIaddPageRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIaddPageRequest addPage(String tenantId, CreateAPIPageData createAPIPageData) {
        return new APIaddPageRequest(tenantId, createAPIPageData);
    }
    private okhttp3.Call addSSOUserCall(String tenantId, CreateAPISSOUserData createAPISSOUserData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAPISSOUserData;

        // create path and map variables
        String localVarPath = "/api/v1/sso-users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSSOUserValidateBeforeCall(String tenantId, CreateAPISSOUserData createAPISSOUserData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling addSSOUser(Async)");
        }

        // verify the required parameter 'createAPISSOUserData' is set
        if (createAPISSOUserData == null) {
            throw new ApiException("Missing the required parameter 'createAPISSOUserData' when calling addSSOUser(Async)");
        }

        return addSSOUserCall(tenantId, createAPISSOUserData, _callback);

    }


    private ApiResponse<AddSSOUserAPIResponse> addSSOUserWithHttpInfo(String tenantId, CreateAPISSOUserData createAPISSOUserData) throws ApiException {
        okhttp3.Call localVarCall = addSSOUserValidateBeforeCall(tenantId, createAPISSOUserData, null);
        Type localVarReturnType = new TypeToken<AddSSOUserAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addSSOUserAsync(String tenantId, CreateAPISSOUserData createAPISSOUserData, final ApiCallback<AddSSOUserAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSSOUserValidateBeforeCall(tenantId, createAPISSOUserData, _callback);
        Type localVarReturnType = new TypeToken<AddSSOUserAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaddSSOUserRequest {
        private final String tenantId;
        private final CreateAPISSOUserData createAPISSOUserData;

        private APIaddSSOUserRequest(String tenantId, CreateAPISSOUserData createAPISSOUserData) {
            this.tenantId = tenantId;
            this.createAPISSOUserData = createAPISSOUserData;
        }

        /**
         * Build call for addSSOUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addSSOUserCall(tenantId, createAPISSOUserData, _callback);
        }

        /**
         * Execute addSSOUser request
         * @return AddSSOUserAPIResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public AddSSOUserAPIResponse execute() throws ApiException {
            ApiResponse<AddSSOUserAPIResponse> localVarResp = addSSOUserWithHttpInfo(tenantId, createAPISSOUserData);
            return localVarResp.getData();
        }

        /**
         * Execute addSSOUser request with HTTP info returned
         * @return ApiResponse&lt;AddSSOUserAPIResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddSSOUserAPIResponse> executeWithHttpInfo() throws ApiException {
            return addSSOUserWithHttpInfo(tenantId, createAPISSOUserData);
        }

        /**
         * Execute addSSOUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddSSOUserAPIResponse> _callback) throws ApiException {
            return addSSOUserAsync(tenantId, createAPISSOUserData, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param createAPISSOUserData  (required)
     * @return APIaddSSOUserRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIaddSSOUserRequest addSSOUser(String tenantId, CreateAPISSOUserData createAPISSOUserData) {
        return new APIaddSSOUserRequest(tenantId, createAPISSOUserData);
    }
    private okhttp3.Call aggregateCall(String tenantId, AggregationRequest aggregationRequest, String parentTenantId, Boolean includeStats, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = aggregationRequest;

        // create path and map variables
        String localVarPath = "/api/v1/aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (parentTenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentTenantId", parentTenantId));
        }

        if (includeStats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeStats", includeStats));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aggregateValidateBeforeCall(String tenantId, AggregationRequest aggregationRequest, String parentTenantId, Boolean includeStats, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling aggregate(Async)");
        }

        // verify the required parameter 'aggregationRequest' is set
        if (aggregationRequest == null) {
            throw new ApiException("Missing the required parameter 'aggregationRequest' when calling aggregate(Async)");
        }

        return aggregateCall(tenantId, aggregationRequest, parentTenantId, includeStats, _callback);

    }


    private ApiResponse<AggregationResponse> aggregateWithHttpInfo(String tenantId, AggregationRequest aggregationRequest, String parentTenantId, Boolean includeStats) throws ApiException {
        okhttp3.Call localVarCall = aggregateValidateBeforeCall(tenantId, aggregationRequest, parentTenantId, includeStats, null);
        Type localVarReturnType = new TypeToken<AggregationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call aggregateAsync(String tenantId, AggregationRequest aggregationRequest, String parentTenantId, Boolean includeStats, final ApiCallback<AggregationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aggregateValidateBeforeCall(tenantId, aggregationRequest, parentTenantId, includeStats, _callback);
        Type localVarReturnType = new TypeToken<AggregationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaggregateRequest {
        private final String tenantId;
        private final AggregationRequest aggregationRequest;
        private String parentTenantId;
        private Boolean includeStats;

        private APIaggregateRequest(String tenantId, AggregationRequest aggregationRequest) {
            this.tenantId = tenantId;
            this.aggregationRequest = aggregationRequest;
        }

        /**
         * Set parentTenantId
         * @param parentTenantId  (optional)
         * @return APIaggregateRequest
         */
        public APIaggregateRequest parentTenantId(String parentTenantId) {
            this.parentTenantId = parentTenantId;
            return this;
        }

        /**
         * Set includeStats
         * @param includeStats  (optional)
         * @return APIaggregateRequest
         */
        public APIaggregateRequest includeStats(Boolean includeStats) {
            this.includeStats = includeStats;
            return this;
        }

        /**
         * Build call for aggregate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return aggregateCall(tenantId, aggregationRequest, parentTenantId, includeStats, _callback);
        }

        /**
         * Execute aggregate request
         * @return AggregationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public AggregationResponse execute() throws ApiException {
            ApiResponse<AggregationResponse> localVarResp = aggregateWithHttpInfo(tenantId, aggregationRequest, parentTenantId, includeStats);
            return localVarResp.getData();
        }

        /**
         * Execute aggregate request with HTTP info returned
         * @return ApiResponse&lt;AggregationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AggregationResponse> executeWithHttpInfo() throws ApiException {
            return aggregateWithHttpInfo(tenantId, aggregationRequest, parentTenantId, includeStats);
        }

        /**
         * Execute aggregate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AggregationResponse> _callback) throws ApiException {
            return aggregateAsync(tenantId, aggregationRequest, parentTenantId, includeStats, _callback);
        }
    }

    /**
     * 
     * Aggregates documents by grouping them (if groupBy is provided) and applying multiple operations. Different operations (e.g. sum, countDistinct, avg, etc.) are supported.
     * @param tenantId  (required)
     * @param aggregationRequest  (required)
     * @return APIaggregateRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIaggregateRequest aggregate(String tenantId, AggregationRequest aggregationRequest) {
        return new APIaggregateRequest(tenantId, aggregationRequest);
    }
    private okhttp3.Call aggregateQuestionResultsCall(String tenantId, String questionId, List<String> questionIds, String urlId, AggregateTimeBucket timeBucket, OffsetDateTime startDate, Boolean forceRecalculate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/question-results-aggregation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (questionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("questionId", questionId));
        }

        if (questionIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "questionIds", questionIds));
        }

        if (urlId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlId", urlId));
        }

        if (timeBucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeBucket", timeBucket));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (forceRecalculate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceRecalculate", forceRecalculate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aggregateQuestionResultsValidateBeforeCall(String tenantId, String questionId, List<String> questionIds, String urlId, AggregateTimeBucket timeBucket, OffsetDateTime startDate, Boolean forceRecalculate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling aggregateQuestionResults(Async)");
        }

        return aggregateQuestionResultsCall(tenantId, questionId, questionIds, urlId, timeBucket, startDate, forceRecalculate, _callback);

    }


    private ApiResponse<AggregateQuestionResults200Response> aggregateQuestionResultsWithHttpInfo(String tenantId, String questionId, List<String> questionIds, String urlId, AggregateTimeBucket timeBucket, OffsetDateTime startDate, Boolean forceRecalculate) throws ApiException {
        okhttp3.Call localVarCall = aggregateQuestionResultsValidateBeforeCall(tenantId, questionId, questionIds, urlId, timeBucket, startDate, forceRecalculate, null);
        Type localVarReturnType = new TypeToken<AggregateQuestionResults200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call aggregateQuestionResultsAsync(String tenantId, String questionId, List<String> questionIds, String urlId, AggregateTimeBucket timeBucket, OffsetDateTime startDate, Boolean forceRecalculate, final ApiCallback<AggregateQuestionResults200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = aggregateQuestionResultsValidateBeforeCall(tenantId, questionId, questionIds, urlId, timeBucket, startDate, forceRecalculate, _callback);
        Type localVarReturnType = new TypeToken<AggregateQuestionResults200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaggregateQuestionResultsRequest {
        private final String tenantId;
        private String questionId;
        private List<String> questionIds;
        private String urlId;
        private AggregateTimeBucket timeBucket;
        private OffsetDateTime startDate;
        private Boolean forceRecalculate;

        private APIaggregateQuestionResultsRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set questionId
         * @param questionId  (optional)
         * @return APIaggregateQuestionResultsRequest
         */
        public APIaggregateQuestionResultsRequest questionId(String questionId) {
            this.questionId = questionId;
            return this;
        }

        /**
         * Set questionIds
         * @param questionIds  (optional)
         * @return APIaggregateQuestionResultsRequest
         */
        public APIaggregateQuestionResultsRequest questionIds(List<String> questionIds) {
            this.questionIds = questionIds;
            return this;
        }

        /**
         * Set urlId
         * @param urlId  (optional)
         * @return APIaggregateQuestionResultsRequest
         */
        public APIaggregateQuestionResultsRequest urlId(String urlId) {
            this.urlId = urlId;
            return this;
        }

        /**
         * Set timeBucket
         * @param timeBucket  (optional)
         * @return APIaggregateQuestionResultsRequest
         */
        public APIaggregateQuestionResultsRequest timeBucket(AggregateTimeBucket timeBucket) {
            this.timeBucket = timeBucket;
            return this;
        }

        /**
         * Set startDate
         * @param startDate  (optional)
         * @return APIaggregateQuestionResultsRequest
         */
        public APIaggregateQuestionResultsRequest startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }

        /**
         * Set forceRecalculate
         * @param forceRecalculate  (optional)
         * @return APIaggregateQuestionResultsRequest
         */
        public APIaggregateQuestionResultsRequest forceRecalculate(Boolean forceRecalculate) {
            this.forceRecalculate = forceRecalculate;
            return this;
        }

        /**
         * Build call for aggregateQuestionResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return aggregateQuestionResultsCall(tenantId, questionId, questionIds, urlId, timeBucket, startDate, forceRecalculate, _callback);
        }

        /**
         * Execute aggregateQuestionResults request
         * @return AggregateQuestionResults200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public AggregateQuestionResults200Response execute() throws ApiException {
            ApiResponse<AggregateQuestionResults200Response> localVarResp = aggregateQuestionResultsWithHttpInfo(tenantId, questionId, questionIds, urlId, timeBucket, startDate, forceRecalculate);
            return localVarResp.getData();
        }

        /**
         * Execute aggregateQuestionResults request with HTTP info returned
         * @return ApiResponse&lt;AggregateQuestionResults200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AggregateQuestionResults200Response> executeWithHttpInfo() throws ApiException {
            return aggregateQuestionResultsWithHttpInfo(tenantId, questionId, questionIds, urlId, timeBucket, startDate, forceRecalculate);
        }

        /**
         * Execute aggregateQuestionResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AggregateQuestionResults200Response> _callback) throws ApiException {
            return aggregateQuestionResultsAsync(tenantId, questionId, questionIds, urlId, timeBucket, startDate, forceRecalculate, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIaggregateQuestionResultsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIaggregateQuestionResultsRequest aggregateQuestionResults(String tenantId) {
        return new APIaggregateQuestionResultsRequest(tenantId);
    }
    private okhttp3.Call blockUserFromCommentCall(String tenantId, String id, BlockFromCommentParams blockFromCommentParams, String userId, String anonUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockFromCommentParams;

        // create path and map variables
        String localVarPath = "/api/v1/comments/{id}/block"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (anonUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anonUserId", anonUserId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockUserFromCommentValidateBeforeCall(String tenantId, String id, BlockFromCommentParams blockFromCommentParams, String userId, String anonUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling blockUserFromComment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling blockUserFromComment(Async)");
        }

        // verify the required parameter 'blockFromCommentParams' is set
        if (blockFromCommentParams == null) {
            throw new ApiException("Missing the required parameter 'blockFromCommentParams' when calling blockUserFromComment(Async)");
        }

        return blockUserFromCommentCall(tenantId, id, blockFromCommentParams, userId, anonUserId, _callback);

    }


    private ApiResponse<BlockFromCommentPublic200Response> blockUserFromCommentWithHttpInfo(String tenantId, String id, BlockFromCommentParams blockFromCommentParams, String userId, String anonUserId) throws ApiException {
        okhttp3.Call localVarCall = blockUserFromCommentValidateBeforeCall(tenantId, id, blockFromCommentParams, userId, anonUserId, null);
        Type localVarReturnType = new TypeToken<BlockFromCommentPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call blockUserFromCommentAsync(String tenantId, String id, BlockFromCommentParams blockFromCommentParams, String userId, String anonUserId, final ApiCallback<BlockFromCommentPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockUserFromCommentValidateBeforeCall(tenantId, id, blockFromCommentParams, userId, anonUserId, _callback);
        Type localVarReturnType = new TypeToken<BlockFromCommentPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIblockUserFromCommentRequest {
        private final String tenantId;
        private final String id;
        private final BlockFromCommentParams blockFromCommentParams;
        private String userId;
        private String anonUserId;

        private APIblockUserFromCommentRequest(String tenantId, String id, BlockFromCommentParams blockFromCommentParams) {
            this.tenantId = tenantId;
            this.id = id;
            this.blockFromCommentParams = blockFromCommentParams;
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return APIblockUserFromCommentRequest
         */
        public APIblockUserFromCommentRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set anonUserId
         * @param anonUserId  (optional)
         * @return APIblockUserFromCommentRequest
         */
        public APIblockUserFromCommentRequest anonUserId(String anonUserId) {
            this.anonUserId = anonUserId;
            return this;
        }

        /**
         * Build call for blockUserFromComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return blockUserFromCommentCall(tenantId, id, blockFromCommentParams, userId, anonUserId, _callback);
        }

        /**
         * Execute blockUserFromComment request
         * @return BlockFromCommentPublic200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public BlockFromCommentPublic200Response execute() throws ApiException {
            ApiResponse<BlockFromCommentPublic200Response> localVarResp = blockUserFromCommentWithHttpInfo(tenantId, id, blockFromCommentParams, userId, anonUserId);
            return localVarResp.getData();
        }

        /**
         * Execute blockUserFromComment request with HTTP info returned
         * @return ApiResponse&lt;BlockFromCommentPublic200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BlockFromCommentPublic200Response> executeWithHttpInfo() throws ApiException {
            return blockUserFromCommentWithHttpInfo(tenantId, id, blockFromCommentParams, userId, anonUserId);
        }

        /**
         * Execute blockUserFromComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BlockFromCommentPublic200Response> _callback) throws ApiException {
            return blockUserFromCommentAsync(tenantId, id, blockFromCommentParams, userId, anonUserId, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @param blockFromCommentParams  (required)
     * @return APIblockUserFromCommentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIblockUserFromCommentRequest blockUserFromComment(String tenantId, String id, BlockFromCommentParams blockFromCommentParams) {
        return new APIblockUserFromCommentRequest(tenantId, id, blockFromCommentParams);
    }
    private okhttp3.Call bulkAggregateQuestionResultsCall(String tenantId, BulkAggregateQuestionResultsRequest bulkAggregateQuestionResultsRequest, Boolean forceRecalculate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkAggregateQuestionResultsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/question-results-aggregation/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (forceRecalculate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceRecalculate", forceRecalculate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkAggregateQuestionResultsValidateBeforeCall(String tenantId, BulkAggregateQuestionResultsRequest bulkAggregateQuestionResultsRequest, Boolean forceRecalculate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling bulkAggregateQuestionResults(Async)");
        }

        // verify the required parameter 'bulkAggregateQuestionResultsRequest' is set
        if (bulkAggregateQuestionResultsRequest == null) {
            throw new ApiException("Missing the required parameter 'bulkAggregateQuestionResultsRequest' when calling bulkAggregateQuestionResults(Async)");
        }

        return bulkAggregateQuestionResultsCall(tenantId, bulkAggregateQuestionResultsRequest, forceRecalculate, _callback);

    }


    private ApiResponse<BulkAggregateQuestionResults200Response> bulkAggregateQuestionResultsWithHttpInfo(String tenantId, BulkAggregateQuestionResultsRequest bulkAggregateQuestionResultsRequest, Boolean forceRecalculate) throws ApiException {
        okhttp3.Call localVarCall = bulkAggregateQuestionResultsValidateBeforeCall(tenantId, bulkAggregateQuestionResultsRequest, forceRecalculate, null);
        Type localVarReturnType = new TypeToken<BulkAggregateQuestionResults200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkAggregateQuestionResultsAsync(String tenantId, BulkAggregateQuestionResultsRequest bulkAggregateQuestionResultsRequest, Boolean forceRecalculate, final ApiCallback<BulkAggregateQuestionResults200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkAggregateQuestionResultsValidateBeforeCall(tenantId, bulkAggregateQuestionResultsRequest, forceRecalculate, _callback);
        Type localVarReturnType = new TypeToken<BulkAggregateQuestionResults200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIbulkAggregateQuestionResultsRequest {
        private final String tenantId;
        private final BulkAggregateQuestionResultsRequest bulkAggregateQuestionResultsRequest;
        private Boolean forceRecalculate;

        private APIbulkAggregateQuestionResultsRequest(String tenantId, BulkAggregateQuestionResultsRequest bulkAggregateQuestionResultsRequest) {
            this.tenantId = tenantId;
            this.bulkAggregateQuestionResultsRequest = bulkAggregateQuestionResultsRequest;
        }

        /**
         * Set forceRecalculate
         * @param forceRecalculate  (optional)
         * @return APIbulkAggregateQuestionResultsRequest
         */
        public APIbulkAggregateQuestionResultsRequest forceRecalculate(Boolean forceRecalculate) {
            this.forceRecalculate = forceRecalculate;
            return this;
        }

        /**
         * Build call for bulkAggregateQuestionResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return bulkAggregateQuestionResultsCall(tenantId, bulkAggregateQuestionResultsRequest, forceRecalculate, _callback);
        }

        /**
         * Execute bulkAggregateQuestionResults request
         * @return BulkAggregateQuestionResults200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public BulkAggregateQuestionResults200Response execute() throws ApiException {
            ApiResponse<BulkAggregateQuestionResults200Response> localVarResp = bulkAggregateQuestionResultsWithHttpInfo(tenantId, bulkAggregateQuestionResultsRequest, forceRecalculate);
            return localVarResp.getData();
        }

        /**
         * Execute bulkAggregateQuestionResults request with HTTP info returned
         * @return ApiResponse&lt;BulkAggregateQuestionResults200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BulkAggregateQuestionResults200Response> executeWithHttpInfo() throws ApiException {
            return bulkAggregateQuestionResultsWithHttpInfo(tenantId, bulkAggregateQuestionResultsRequest, forceRecalculate);
        }

        /**
         * Execute bulkAggregateQuestionResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BulkAggregateQuestionResults200Response> _callback) throws ApiException {
            return bulkAggregateQuestionResultsAsync(tenantId, bulkAggregateQuestionResultsRequest, forceRecalculate, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param bulkAggregateQuestionResultsRequest  (required)
     * @return APIbulkAggregateQuestionResultsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIbulkAggregateQuestionResultsRequest bulkAggregateQuestionResults(String tenantId, BulkAggregateQuestionResultsRequest bulkAggregateQuestionResultsRequest) {
        return new APIbulkAggregateQuestionResultsRequest(tenantId, bulkAggregateQuestionResultsRequest);
    }
    private okhttp3.Call combineCommentsWithQuestionResultsCall(String tenantId, String questionId, List<String> questionIds, String urlId, OffsetDateTime startDate, Boolean forceRecalculate, Double minValue, Double maxValue, Double limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/question-results-aggregation/combine/comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (questionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("questionId", questionId));
        }

        if (questionIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "questionIds", questionIds));
        }

        if (urlId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlId", urlId));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (forceRecalculate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceRecalculate", forceRecalculate));
        }

        if (minValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minValue", minValue));
        }

        if (maxValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxValue", maxValue));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call combineCommentsWithQuestionResultsValidateBeforeCall(String tenantId, String questionId, List<String> questionIds, String urlId, OffsetDateTime startDate, Boolean forceRecalculate, Double minValue, Double maxValue, Double limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling combineCommentsWithQuestionResults(Async)");
        }

        return combineCommentsWithQuestionResultsCall(tenantId, questionId, questionIds, urlId, startDate, forceRecalculate, minValue, maxValue, limit, _callback);

    }


    private ApiResponse<CombineCommentsWithQuestionResults200Response> combineCommentsWithQuestionResultsWithHttpInfo(String tenantId, String questionId, List<String> questionIds, String urlId, OffsetDateTime startDate, Boolean forceRecalculate, Double minValue, Double maxValue, Double limit) throws ApiException {
        okhttp3.Call localVarCall = combineCommentsWithQuestionResultsValidateBeforeCall(tenantId, questionId, questionIds, urlId, startDate, forceRecalculate, minValue, maxValue, limit, null);
        Type localVarReturnType = new TypeToken<CombineCommentsWithQuestionResults200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call combineCommentsWithQuestionResultsAsync(String tenantId, String questionId, List<String> questionIds, String urlId, OffsetDateTime startDate, Boolean forceRecalculate, Double minValue, Double maxValue, Double limit, final ApiCallback<CombineCommentsWithQuestionResults200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = combineCommentsWithQuestionResultsValidateBeforeCall(tenantId, questionId, questionIds, urlId, startDate, forceRecalculate, minValue, maxValue, limit, _callback);
        Type localVarReturnType = new TypeToken<CombineCommentsWithQuestionResults200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcombineCommentsWithQuestionResultsRequest {
        private final String tenantId;
        private String questionId;
        private List<String> questionIds;
        private String urlId;
        private OffsetDateTime startDate;
        private Boolean forceRecalculate;
        private Double minValue;
        private Double maxValue;
        private Double limit;

        private APIcombineCommentsWithQuestionResultsRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set questionId
         * @param questionId  (optional)
         * @return APIcombineCommentsWithQuestionResultsRequest
         */
        public APIcombineCommentsWithQuestionResultsRequest questionId(String questionId) {
            this.questionId = questionId;
            return this;
        }

        /**
         * Set questionIds
         * @param questionIds  (optional)
         * @return APIcombineCommentsWithQuestionResultsRequest
         */
        public APIcombineCommentsWithQuestionResultsRequest questionIds(List<String> questionIds) {
            this.questionIds = questionIds;
            return this;
        }

        /**
         * Set urlId
         * @param urlId  (optional)
         * @return APIcombineCommentsWithQuestionResultsRequest
         */
        public APIcombineCommentsWithQuestionResultsRequest urlId(String urlId) {
            this.urlId = urlId;
            return this;
        }

        /**
         * Set startDate
         * @param startDate  (optional)
         * @return APIcombineCommentsWithQuestionResultsRequest
         */
        public APIcombineCommentsWithQuestionResultsRequest startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }

        /**
         * Set forceRecalculate
         * @param forceRecalculate  (optional)
         * @return APIcombineCommentsWithQuestionResultsRequest
         */
        public APIcombineCommentsWithQuestionResultsRequest forceRecalculate(Boolean forceRecalculate) {
            this.forceRecalculate = forceRecalculate;
            return this;
        }

        /**
         * Set minValue
         * @param minValue  (optional)
         * @return APIcombineCommentsWithQuestionResultsRequest
         */
        public APIcombineCommentsWithQuestionResultsRequest minValue(Double minValue) {
            this.minValue = minValue;
            return this;
        }

        /**
         * Set maxValue
         * @param maxValue  (optional)
         * @return APIcombineCommentsWithQuestionResultsRequest
         */
        public APIcombineCommentsWithQuestionResultsRequest maxValue(Double maxValue) {
            this.maxValue = maxValue;
            return this;
        }

        /**
         * Set limit
         * @param limit  (optional)
         * @return APIcombineCommentsWithQuestionResultsRequest
         */
        public APIcombineCommentsWithQuestionResultsRequest limit(Double limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for combineCommentsWithQuestionResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return combineCommentsWithQuestionResultsCall(tenantId, questionId, questionIds, urlId, startDate, forceRecalculate, minValue, maxValue, limit, _callback);
        }

        /**
         * Execute combineCommentsWithQuestionResults request
         * @return CombineCommentsWithQuestionResults200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public CombineCommentsWithQuestionResults200Response execute() throws ApiException {
            ApiResponse<CombineCommentsWithQuestionResults200Response> localVarResp = combineCommentsWithQuestionResultsWithHttpInfo(tenantId, questionId, questionIds, urlId, startDate, forceRecalculate, minValue, maxValue, limit);
            return localVarResp.getData();
        }

        /**
         * Execute combineCommentsWithQuestionResults request with HTTP info returned
         * @return ApiResponse&lt;CombineCommentsWithQuestionResults200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CombineCommentsWithQuestionResults200Response> executeWithHttpInfo() throws ApiException {
            return combineCommentsWithQuestionResultsWithHttpInfo(tenantId, questionId, questionIds, urlId, startDate, forceRecalculate, minValue, maxValue, limit);
        }

        /**
         * Execute combineCommentsWithQuestionResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CombineCommentsWithQuestionResults200Response> _callback) throws ApiException {
            return combineCommentsWithQuestionResultsAsync(tenantId, questionId, questionIds, urlId, startDate, forceRecalculate, minValue, maxValue, limit, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIcombineCommentsWithQuestionResultsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIcombineCommentsWithQuestionResultsRequest combineCommentsWithQuestionResults(String tenantId) {
        return new APIcombineCommentsWithQuestionResultsRequest(tenantId);
    }
    private okhttp3.Call createFeedPostCall(String tenantId, CreateFeedPostParams createFeedPostParams, String broadcastId, Boolean isLive, Boolean doSpamCheck, Boolean skipDupCheck, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFeedPostParams;

        // create path and map variables
        String localVarPath = "/api/v1/feed-posts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (broadcastId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("broadcastId", broadcastId));
        }

        if (isLive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isLive", isLive));
        }

        if (doSpamCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doSpamCheck", doSpamCheck));
        }

        if (skipDupCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipDupCheck", skipDupCheck));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFeedPostValidateBeforeCall(String tenantId, CreateFeedPostParams createFeedPostParams, String broadcastId, Boolean isLive, Boolean doSpamCheck, Boolean skipDupCheck, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling createFeedPost(Async)");
        }

        // verify the required parameter 'createFeedPostParams' is set
        if (createFeedPostParams == null) {
            throw new ApiException("Missing the required parameter 'createFeedPostParams' when calling createFeedPost(Async)");
        }

        return createFeedPostCall(tenantId, createFeedPostParams, broadcastId, isLive, doSpamCheck, skipDupCheck, _callback);

    }


    private ApiResponse<CreateFeedPost200Response> createFeedPostWithHttpInfo(String tenantId, CreateFeedPostParams createFeedPostParams, String broadcastId, Boolean isLive, Boolean doSpamCheck, Boolean skipDupCheck) throws ApiException {
        okhttp3.Call localVarCall = createFeedPostValidateBeforeCall(tenantId, createFeedPostParams, broadcastId, isLive, doSpamCheck, skipDupCheck, null);
        Type localVarReturnType = new TypeToken<CreateFeedPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFeedPostAsync(String tenantId, CreateFeedPostParams createFeedPostParams, String broadcastId, Boolean isLive, Boolean doSpamCheck, Boolean skipDupCheck, final ApiCallback<CreateFeedPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFeedPostValidateBeforeCall(tenantId, createFeedPostParams, broadcastId, isLive, doSpamCheck, skipDupCheck, _callback);
        Type localVarReturnType = new TypeToken<CreateFeedPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateFeedPostRequest {
        private final String tenantId;
        private final CreateFeedPostParams createFeedPostParams;
        private String broadcastId;
        private Boolean isLive;
        private Boolean doSpamCheck;
        private Boolean skipDupCheck;

        private APIcreateFeedPostRequest(String tenantId, CreateFeedPostParams createFeedPostParams) {
            this.tenantId = tenantId;
            this.createFeedPostParams = createFeedPostParams;
        }

        /**
         * Set broadcastId
         * @param broadcastId  (optional)
         * @return APIcreateFeedPostRequest
         */
        public APIcreateFeedPostRequest broadcastId(String broadcastId) {
            this.broadcastId = broadcastId;
            return this;
        }

        /**
         * Set isLive
         * @param isLive  (optional)
         * @return APIcreateFeedPostRequest
         */
        public APIcreateFeedPostRequest isLive(Boolean isLive) {
            this.isLive = isLive;
            return this;
        }

        /**
         * Set doSpamCheck
         * @param doSpamCheck  (optional)
         * @return APIcreateFeedPostRequest
         */
        public APIcreateFeedPostRequest doSpamCheck(Boolean doSpamCheck) {
            this.doSpamCheck = doSpamCheck;
            return this;
        }

        /**
         * Set skipDupCheck
         * @param skipDupCheck  (optional)
         * @return APIcreateFeedPostRequest
         */
        public APIcreateFeedPostRequest skipDupCheck(Boolean skipDupCheck) {
            this.skipDupCheck = skipDupCheck;
            return this;
        }

        /**
         * Build call for createFeedPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createFeedPostCall(tenantId, createFeedPostParams, broadcastId, isLive, doSpamCheck, skipDupCheck, _callback);
        }

        /**
         * Execute createFeedPost request
         * @return CreateFeedPost200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public CreateFeedPost200Response execute() throws ApiException {
            ApiResponse<CreateFeedPost200Response> localVarResp = createFeedPostWithHttpInfo(tenantId, createFeedPostParams, broadcastId, isLive, doSpamCheck, skipDupCheck);
            return localVarResp.getData();
        }

        /**
         * Execute createFeedPost request with HTTP info returned
         * @return ApiResponse&lt;CreateFeedPost200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateFeedPost200Response> executeWithHttpInfo() throws ApiException {
            return createFeedPostWithHttpInfo(tenantId, createFeedPostParams, broadcastId, isLive, doSpamCheck, skipDupCheck);
        }

        /**
         * Execute createFeedPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateFeedPost200Response> _callback) throws ApiException {
            return createFeedPostAsync(tenantId, createFeedPostParams, broadcastId, isLive, doSpamCheck, skipDupCheck, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param createFeedPostParams  (required)
     * @return APIcreateFeedPostRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateFeedPostRequest createFeedPost(String tenantId, CreateFeedPostParams createFeedPostParams) {
        return new APIcreateFeedPostRequest(tenantId, createFeedPostParams);
    }
    private okhttp3.Call createSubscriptionCall(String tenantId, CreateAPIUserSubscriptionData createAPIUserSubscriptionData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAPIUserSubscriptionData;

        // create path and map variables
        String localVarPath = "/api/v1/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubscriptionValidateBeforeCall(String tenantId, CreateAPIUserSubscriptionData createAPIUserSubscriptionData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling createSubscription(Async)");
        }

        // verify the required parameter 'createAPIUserSubscriptionData' is set
        if (createAPIUserSubscriptionData == null) {
            throw new ApiException("Missing the required parameter 'createAPIUserSubscriptionData' when calling createSubscription(Async)");
        }

        return createSubscriptionCall(tenantId, createAPIUserSubscriptionData, _callback);

    }


    private ApiResponse<CreateSubscriptionAPIResponse> createSubscriptionWithHttpInfo(String tenantId, CreateAPIUserSubscriptionData createAPIUserSubscriptionData) throws ApiException {
        okhttp3.Call localVarCall = createSubscriptionValidateBeforeCall(tenantId, createAPIUserSubscriptionData, null);
        Type localVarReturnType = new TypeToken<CreateSubscriptionAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSubscriptionAsync(String tenantId, CreateAPIUserSubscriptionData createAPIUserSubscriptionData, final ApiCallback<CreateSubscriptionAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubscriptionValidateBeforeCall(tenantId, createAPIUserSubscriptionData, _callback);
        Type localVarReturnType = new TypeToken<CreateSubscriptionAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateSubscriptionRequest {
        private final String tenantId;
        private final CreateAPIUserSubscriptionData createAPIUserSubscriptionData;

        private APIcreateSubscriptionRequest(String tenantId, CreateAPIUserSubscriptionData createAPIUserSubscriptionData) {
            this.tenantId = tenantId;
            this.createAPIUserSubscriptionData = createAPIUserSubscriptionData;
        }

        /**
         * Build call for createSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createSubscriptionCall(tenantId, createAPIUserSubscriptionData, _callback);
        }

        /**
         * Execute createSubscription request
         * @return CreateSubscriptionAPIResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public CreateSubscriptionAPIResponse execute() throws ApiException {
            ApiResponse<CreateSubscriptionAPIResponse> localVarResp = createSubscriptionWithHttpInfo(tenantId, createAPIUserSubscriptionData);
            return localVarResp.getData();
        }

        /**
         * Execute createSubscription request with HTTP info returned
         * @return ApiResponse&lt;CreateSubscriptionAPIResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateSubscriptionAPIResponse> executeWithHttpInfo() throws ApiException {
            return createSubscriptionWithHttpInfo(tenantId, createAPIUserSubscriptionData);
        }

        /**
         * Execute createSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateSubscriptionAPIResponse> _callback) throws ApiException {
            return createSubscriptionAsync(tenantId, createAPIUserSubscriptionData, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param createAPIUserSubscriptionData  (required)
     * @return APIcreateSubscriptionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateSubscriptionRequest createSubscription(String tenantId, CreateAPIUserSubscriptionData createAPIUserSubscriptionData) {
        return new APIcreateSubscriptionRequest(tenantId, createAPIUserSubscriptionData);
    }
    private okhttp3.Call createUserBadgeCall(String tenantId, CreateUserBadgeParams createUserBadgeParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserBadgeParams;

        // create path and map variables
        String localVarPath = "/api/v1/user-badges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserBadgeValidateBeforeCall(String tenantId, CreateUserBadgeParams createUserBadgeParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling createUserBadge(Async)");
        }

        // verify the required parameter 'createUserBadgeParams' is set
        if (createUserBadgeParams == null) {
            throw new ApiException("Missing the required parameter 'createUserBadgeParams' when calling createUserBadge(Async)");
        }

        return createUserBadgeCall(tenantId, createUserBadgeParams, _callback);

    }


    private ApiResponse<CreateUserBadge200Response> createUserBadgeWithHttpInfo(String tenantId, CreateUserBadgeParams createUserBadgeParams) throws ApiException {
        okhttp3.Call localVarCall = createUserBadgeValidateBeforeCall(tenantId, createUserBadgeParams, null);
        Type localVarReturnType = new TypeToken<CreateUserBadge200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createUserBadgeAsync(String tenantId, CreateUserBadgeParams createUserBadgeParams, final ApiCallback<CreateUserBadge200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserBadgeValidateBeforeCall(tenantId, createUserBadgeParams, _callback);
        Type localVarReturnType = new TypeToken<CreateUserBadge200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateUserBadgeRequest {
        private final String tenantId;
        private final CreateUserBadgeParams createUserBadgeParams;

        private APIcreateUserBadgeRequest(String tenantId, CreateUserBadgeParams createUserBadgeParams) {
            this.tenantId = tenantId;
            this.createUserBadgeParams = createUserBadgeParams;
        }

        /**
         * Build call for createUserBadge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createUserBadgeCall(tenantId, createUserBadgeParams, _callback);
        }

        /**
         * Execute createUserBadge request
         * @return CreateUserBadge200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public CreateUserBadge200Response execute() throws ApiException {
            ApiResponse<CreateUserBadge200Response> localVarResp = createUserBadgeWithHttpInfo(tenantId, createUserBadgeParams);
            return localVarResp.getData();
        }

        /**
         * Execute createUserBadge request with HTTP info returned
         * @return ApiResponse&lt;CreateUserBadge200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateUserBadge200Response> executeWithHttpInfo() throws ApiException {
            return createUserBadgeWithHttpInfo(tenantId, createUserBadgeParams);
        }

        /**
         * Execute createUserBadge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateUserBadge200Response> _callback) throws ApiException {
            return createUserBadgeAsync(tenantId, createUserBadgeParams, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param createUserBadgeParams  (required)
     * @return APIcreateUserBadgeRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateUserBadgeRequest createUserBadge(String tenantId, CreateUserBadgeParams createUserBadgeParams) {
        return new APIcreateUserBadgeRequest(tenantId, createUserBadgeParams);
    }
    private okhttp3.Call deleteCommentCall(String tenantId, String id, String contextUserId, Boolean isLive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/comments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (contextUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contextUserId", contextUserId));
        }

        if (isLive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isLive", isLive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommentValidateBeforeCall(String tenantId, String id, String contextUserId, Boolean isLive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling deleteComment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteComment(Async)");
        }

        return deleteCommentCall(tenantId, id, contextUserId, isLive, _callback);

    }


    private ApiResponse<DeleteComment200Response> deleteCommentWithHttpInfo(String tenantId, String id, String contextUserId, Boolean isLive) throws ApiException {
        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(tenantId, id, contextUserId, isLive, null);
        Type localVarReturnType = new TypeToken<DeleteComment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCommentAsync(String tenantId, String id, String contextUserId, Boolean isLive, final ApiCallback<DeleteComment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(tenantId, id, contextUserId, isLive, _callback);
        Type localVarReturnType = new TypeToken<DeleteComment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteCommentRequest {
        private final String tenantId;
        private final String id;
        private String contextUserId;
        private Boolean isLive;

        private APIdeleteCommentRequest(String tenantId, String id) {
            this.tenantId = tenantId;
            this.id = id;
        }

        /**
         * Set contextUserId
         * @param contextUserId  (optional)
         * @return APIdeleteCommentRequest
         */
        public APIdeleteCommentRequest contextUserId(String contextUserId) {
            this.contextUserId = contextUserId;
            return this;
        }

        /**
         * Set isLive
         * @param isLive  (optional)
         * @return APIdeleteCommentRequest
         */
        public APIdeleteCommentRequest isLive(Boolean isLive) {
            this.isLive = isLive;
            return this;
        }

        /**
         * Build call for deleteComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCommentCall(tenantId, id, contextUserId, isLive, _callback);
        }

        /**
         * Execute deleteComment request
         * @return DeleteComment200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public DeleteComment200Response execute() throws ApiException {
            ApiResponse<DeleteComment200Response> localVarResp = deleteCommentWithHttpInfo(tenantId, id, contextUserId, isLive);
            return localVarResp.getData();
        }

        /**
         * Execute deleteComment request with HTTP info returned
         * @return ApiResponse&lt;DeleteComment200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteComment200Response> executeWithHttpInfo() throws ApiException {
            return deleteCommentWithHttpInfo(tenantId, id, contextUserId, isLive);
        }

        /**
         * Execute deleteComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteComment200Response> _callback) throws ApiException {
            return deleteCommentAsync(tenantId, id, contextUserId, isLive, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @return APIdeleteCommentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteCommentRequest deleteComment(String tenantId, String id) {
        return new APIdeleteCommentRequest(tenantId, id);
    }
    private okhttp3.Call deleteDomainConfigCall(String tenantId, String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/domain-configs/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDomainConfigValidateBeforeCall(String tenantId, String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling deleteDomainConfig(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteDomainConfig(Async)");
        }

        return deleteDomainConfigCall(tenantId, domain, _callback);

    }


    private ApiResponse<DeleteDomainConfig200Response> deleteDomainConfigWithHttpInfo(String tenantId, String domain) throws ApiException {
        okhttp3.Call localVarCall = deleteDomainConfigValidateBeforeCall(tenantId, domain, null);
        Type localVarReturnType = new TypeToken<DeleteDomainConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteDomainConfigAsync(String tenantId, String domain, final ApiCallback<DeleteDomainConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDomainConfigValidateBeforeCall(tenantId, domain, _callback);
        Type localVarReturnType = new TypeToken<DeleteDomainConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteDomainConfigRequest {
        private final String tenantId;
        private final String domain;

        private APIdeleteDomainConfigRequest(String tenantId, String domain) {
            this.tenantId = tenantId;
            this.domain = domain;
        }

        /**
         * Build call for deleteDomainConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDomainConfigCall(tenantId, domain, _callback);
        }

        /**
         * Execute deleteDomainConfig request
         * @return DeleteDomainConfig200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public DeleteDomainConfig200Response execute() throws ApiException {
            ApiResponse<DeleteDomainConfig200Response> localVarResp = deleteDomainConfigWithHttpInfo(tenantId, domain);
            return localVarResp.getData();
        }

        /**
         * Execute deleteDomainConfig request with HTTP info returned
         * @return ApiResponse&lt;DeleteDomainConfig200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteDomainConfig200Response> executeWithHttpInfo() throws ApiException {
            return deleteDomainConfigWithHttpInfo(tenantId, domain);
        }

        /**
         * Execute deleteDomainConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteDomainConfig200Response> _callback) throws ApiException {
            return deleteDomainConfigAsync(tenantId, domain, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domain  (required)
     * @return APIdeleteDomainConfigRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteDomainConfigRequest deleteDomainConfig(String tenantId, String domain) {
        return new APIdeleteDomainConfigRequest(tenantId, domain);
    }
    private okhttp3.Call deletePageCall(String tenantId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/pages/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePageValidateBeforeCall(String tenantId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling deletePage(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePage(Async)");
        }

        return deletePageCall(tenantId, id, _callback);

    }


    private ApiResponse<DeletePageAPIResponse> deletePageWithHttpInfo(String tenantId, String id) throws ApiException {
        okhttp3.Call localVarCall = deletePageValidateBeforeCall(tenantId, id, null);
        Type localVarReturnType = new TypeToken<DeletePageAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deletePageAsync(String tenantId, String id, final ApiCallback<DeletePageAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePageValidateBeforeCall(tenantId, id, _callback);
        Type localVarReturnType = new TypeToken<DeletePageAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeletePageRequest {
        private final String tenantId;
        private final String id;

        private APIdeletePageRequest(String tenantId, String id) {
            this.tenantId = tenantId;
            this.id = id;
        }

        /**
         * Build call for deletePage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePageCall(tenantId, id, _callback);
        }

        /**
         * Execute deletePage request
         * @return DeletePageAPIResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public DeletePageAPIResponse execute() throws ApiException {
            ApiResponse<DeletePageAPIResponse> localVarResp = deletePageWithHttpInfo(tenantId, id);
            return localVarResp.getData();
        }

        /**
         * Execute deletePage request with HTTP info returned
         * @return ApiResponse&lt;DeletePageAPIResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletePageAPIResponse> executeWithHttpInfo() throws ApiException {
            return deletePageWithHttpInfo(tenantId, id);
        }

        /**
         * Execute deletePage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletePageAPIResponse> _callback) throws ApiException {
            return deletePageAsync(tenantId, id, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @return APIdeletePageRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIdeletePageRequest deletePage(String tenantId, String id) {
        return new APIdeletePageRequest(tenantId, id);
    }
    private okhttp3.Call deleteSSOUserCall(String tenantId, String id, Boolean deleteComments, String commentDeleteMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sso-users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (deleteComments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteComments", deleteComments));
        }

        if (commentDeleteMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commentDeleteMode", commentDeleteMode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSSOUserValidateBeforeCall(String tenantId, String id, Boolean deleteComments, String commentDeleteMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling deleteSSOUser(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSSOUser(Async)");
        }

        return deleteSSOUserCall(tenantId, id, deleteComments, commentDeleteMode, _callback);

    }


    private ApiResponse<DeleteSSOUserAPIResponse> deleteSSOUserWithHttpInfo(String tenantId, String id, Boolean deleteComments, String commentDeleteMode) throws ApiException {
        okhttp3.Call localVarCall = deleteSSOUserValidateBeforeCall(tenantId, id, deleteComments, commentDeleteMode, null);
        Type localVarReturnType = new TypeToken<DeleteSSOUserAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSSOUserAsync(String tenantId, String id, Boolean deleteComments, String commentDeleteMode, final ApiCallback<DeleteSSOUserAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSSOUserValidateBeforeCall(tenantId, id, deleteComments, commentDeleteMode, _callback);
        Type localVarReturnType = new TypeToken<DeleteSSOUserAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteSSOUserRequest {
        private final String tenantId;
        private final String id;
        private Boolean deleteComments;
        private String commentDeleteMode;

        private APIdeleteSSOUserRequest(String tenantId, String id) {
            this.tenantId = tenantId;
            this.id = id;
        }

        /**
         * Set deleteComments
         * @param deleteComments  (optional)
         * @return APIdeleteSSOUserRequest
         */
        public APIdeleteSSOUserRequest deleteComments(Boolean deleteComments) {
            this.deleteComments = deleteComments;
            return this;
        }

        /**
         * Set commentDeleteMode
         * @param commentDeleteMode  (optional)
         * @return APIdeleteSSOUserRequest
         */
        public APIdeleteSSOUserRequest commentDeleteMode(String commentDeleteMode) {
            this.commentDeleteMode = commentDeleteMode;
            return this;
        }

        /**
         * Build call for deleteSSOUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSSOUserCall(tenantId, id, deleteComments, commentDeleteMode, _callback);
        }

        /**
         * Execute deleteSSOUser request
         * @return DeleteSSOUserAPIResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public DeleteSSOUserAPIResponse execute() throws ApiException {
            ApiResponse<DeleteSSOUserAPIResponse> localVarResp = deleteSSOUserWithHttpInfo(tenantId, id, deleteComments, commentDeleteMode);
            return localVarResp.getData();
        }

        /**
         * Execute deleteSSOUser request with HTTP info returned
         * @return ApiResponse&lt;DeleteSSOUserAPIResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteSSOUserAPIResponse> executeWithHttpInfo() throws ApiException {
            return deleteSSOUserWithHttpInfo(tenantId, id, deleteComments, commentDeleteMode);
        }

        /**
         * Execute deleteSSOUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteSSOUserAPIResponse> _callback) throws ApiException {
            return deleteSSOUserAsync(tenantId, id, deleteComments, commentDeleteMode, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @return APIdeleteSSOUserRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteSSOUserRequest deleteSSOUser(String tenantId, String id) {
        return new APIdeleteSSOUserRequest(tenantId, id);
    }
    private okhttp3.Call deleteSubscriptionCall(String tenantId, String id, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/subscriptions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubscriptionValidateBeforeCall(String tenantId, String id, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling deleteSubscription(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSubscription(Async)");
        }

        return deleteSubscriptionCall(tenantId, id, userId, _callback);

    }


    private ApiResponse<DeleteSubscriptionAPIResponse> deleteSubscriptionWithHttpInfo(String tenantId, String id, String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteSubscriptionValidateBeforeCall(tenantId, id, userId, null);
        Type localVarReturnType = new TypeToken<DeleteSubscriptionAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSubscriptionAsync(String tenantId, String id, String userId, final ApiCallback<DeleteSubscriptionAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubscriptionValidateBeforeCall(tenantId, id, userId, _callback);
        Type localVarReturnType = new TypeToken<DeleteSubscriptionAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteSubscriptionRequest {
        private final String tenantId;
        private final String id;
        private String userId;

        private APIdeleteSubscriptionRequest(String tenantId, String id) {
            this.tenantId = tenantId;
            this.id = id;
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return APIdeleteSubscriptionRequest
         */
        public APIdeleteSubscriptionRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Build call for deleteSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSubscriptionCall(tenantId, id, userId, _callback);
        }

        /**
         * Execute deleteSubscription request
         * @return DeleteSubscriptionAPIResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public DeleteSubscriptionAPIResponse execute() throws ApiException {
            ApiResponse<DeleteSubscriptionAPIResponse> localVarResp = deleteSubscriptionWithHttpInfo(tenantId, id, userId);
            return localVarResp.getData();
        }

        /**
         * Execute deleteSubscription request with HTTP info returned
         * @return ApiResponse&lt;DeleteSubscriptionAPIResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteSubscriptionAPIResponse> executeWithHttpInfo() throws ApiException {
            return deleteSubscriptionWithHttpInfo(tenantId, id, userId);
        }

        /**
         * Execute deleteSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteSubscriptionAPIResponse> _callback) throws ApiException {
            return deleteSubscriptionAsync(tenantId, id, userId, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @return APIdeleteSubscriptionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteSubscriptionRequest deleteSubscription(String tenantId, String id) {
        return new APIdeleteSubscriptionRequest(tenantId, id);
    }
    private okhttp3.Call deleteUserBadgeCall(String tenantId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/user-badges/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserBadgeValidateBeforeCall(String tenantId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling deleteUserBadge(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteUserBadge(Async)");
        }

        return deleteUserBadgeCall(tenantId, id, _callback);

    }


    private ApiResponse<UpdateUserBadge200Response> deleteUserBadgeWithHttpInfo(String tenantId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteUserBadgeValidateBeforeCall(tenantId, id, null);
        Type localVarReturnType = new TypeToken<UpdateUserBadge200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteUserBadgeAsync(String tenantId, String id, final ApiCallback<UpdateUserBadge200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserBadgeValidateBeforeCall(tenantId, id, _callback);
        Type localVarReturnType = new TypeToken<UpdateUserBadge200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteUserBadgeRequest {
        private final String tenantId;
        private final String id;

        private APIdeleteUserBadgeRequest(String tenantId, String id) {
            this.tenantId = tenantId;
            this.id = id;
        }

        /**
         * Build call for deleteUserBadge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUserBadgeCall(tenantId, id, _callback);
        }

        /**
         * Execute deleteUserBadge request
         * @return UpdateUserBadge200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public UpdateUserBadge200Response execute() throws ApiException {
            ApiResponse<UpdateUserBadge200Response> localVarResp = deleteUserBadgeWithHttpInfo(tenantId, id);
            return localVarResp.getData();
        }

        /**
         * Execute deleteUserBadge request with HTTP info returned
         * @return ApiResponse&lt;UpdateUserBadge200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateUserBadge200Response> executeWithHttpInfo() throws ApiException {
            return deleteUserBadgeWithHttpInfo(tenantId, id);
        }

        /**
         * Execute deleteUserBadge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateUserBadge200Response> _callback) throws ApiException {
            return deleteUserBadgeAsync(tenantId, id, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @return APIdeleteUserBadgeRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteUserBadgeRequest deleteUserBadge(String tenantId, String id) {
        return new APIdeleteUserBadgeRequest(tenantId, id);
    }
    private okhttp3.Call flagCommentCall(String tenantId, String id, String userId, String anonUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/comments/{id}/flag"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (anonUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anonUserId", anonUserId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flagCommentValidateBeforeCall(String tenantId, String id, String userId, String anonUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling flagComment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling flagComment(Async)");
        }

        return flagCommentCall(tenantId, id, userId, anonUserId, _callback);

    }


    private ApiResponse<FlagComment200Response> flagCommentWithHttpInfo(String tenantId, String id, String userId, String anonUserId) throws ApiException {
        okhttp3.Call localVarCall = flagCommentValidateBeforeCall(tenantId, id, userId, anonUserId, null);
        Type localVarReturnType = new TypeToken<FlagComment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call flagCommentAsync(String tenantId, String id, String userId, String anonUserId, final ApiCallback<FlagComment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = flagCommentValidateBeforeCall(tenantId, id, userId, anonUserId, _callback);
        Type localVarReturnType = new TypeToken<FlagComment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIflagCommentRequest {
        private final String tenantId;
        private final String id;
        private String userId;
        private String anonUserId;

        private APIflagCommentRequest(String tenantId, String id) {
            this.tenantId = tenantId;
            this.id = id;
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return APIflagCommentRequest
         */
        public APIflagCommentRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set anonUserId
         * @param anonUserId  (optional)
         * @return APIflagCommentRequest
         */
        public APIflagCommentRequest anonUserId(String anonUserId) {
            this.anonUserId = anonUserId;
            return this;
        }

        /**
         * Build call for flagComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return flagCommentCall(tenantId, id, userId, anonUserId, _callback);
        }

        /**
         * Execute flagComment request
         * @return FlagComment200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public FlagComment200Response execute() throws ApiException {
            ApiResponse<FlagComment200Response> localVarResp = flagCommentWithHttpInfo(tenantId, id, userId, anonUserId);
            return localVarResp.getData();
        }

        /**
         * Execute flagComment request with HTTP info returned
         * @return ApiResponse&lt;FlagComment200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FlagComment200Response> executeWithHttpInfo() throws ApiException {
            return flagCommentWithHttpInfo(tenantId, id, userId, anonUserId);
        }

        /**
         * Execute flagComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FlagComment200Response> _callback) throws ApiException {
            return flagCommentAsync(tenantId, id, userId, anonUserId, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @return APIflagCommentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIflagCommentRequest flagComment(String tenantId, String id) {
        return new APIflagCommentRequest(tenantId, id);
    }
    private okhttp3.Call getAuditLogsCall(String tenantId, Double limit, Double skip, SORTDIR order, Double after, Double before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/audit-logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuditLogsValidateBeforeCall(String tenantId, Double limit, Double skip, SORTDIR order, Double after, Double before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getAuditLogs(Async)");
        }

        return getAuditLogsCall(tenantId, limit, skip, order, after, before, _callback);

    }


    private ApiResponse<GetAuditLogs200Response> getAuditLogsWithHttpInfo(String tenantId, Double limit, Double skip, SORTDIR order, Double after, Double before) throws ApiException {
        okhttp3.Call localVarCall = getAuditLogsValidateBeforeCall(tenantId, limit, skip, order, after, before, null);
        Type localVarReturnType = new TypeToken<GetAuditLogs200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAuditLogsAsync(String tenantId, Double limit, Double skip, SORTDIR order, Double after, Double before, final ApiCallback<GetAuditLogs200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuditLogsValidateBeforeCall(tenantId, limit, skip, order, after, before, _callback);
        Type localVarReturnType = new TypeToken<GetAuditLogs200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAuditLogsRequest {
        private final String tenantId;
        private Double limit;
        private Double skip;
        private SORTDIR order;
        private Double after;
        private Double before;

        private APIgetAuditLogsRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set limit
         * @param limit  (optional)
         * @return APIgetAuditLogsRequest
         */
        public APIgetAuditLogsRequest limit(Double limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set skip
         * @param skip  (optional)
         * @return APIgetAuditLogsRequest
         */
        public APIgetAuditLogsRequest skip(Double skip) {
            this.skip = skip;
            return this;
        }

        /**
         * Set order
         * @param order  (optional)
         * @return APIgetAuditLogsRequest
         */
        public APIgetAuditLogsRequest order(SORTDIR order) {
            this.order = order;
            return this;
        }

        /**
         * Set after
         * @param after  (optional)
         * @return APIgetAuditLogsRequest
         */
        public APIgetAuditLogsRequest after(Double after) {
            this.after = after;
            return this;
        }

        /**
         * Set before
         * @param before  (optional)
         * @return APIgetAuditLogsRequest
         */
        public APIgetAuditLogsRequest before(Double before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getAuditLogs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAuditLogsCall(tenantId, limit, skip, order, after, before, _callback);
        }

        /**
         * Execute getAuditLogs request
         * @return GetAuditLogs200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetAuditLogs200Response execute() throws ApiException {
            ApiResponse<GetAuditLogs200Response> localVarResp = getAuditLogsWithHttpInfo(tenantId, limit, skip, order, after, before);
            return localVarResp.getData();
        }

        /**
         * Execute getAuditLogs request with HTTP info returned
         * @return ApiResponse&lt;GetAuditLogs200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetAuditLogs200Response> executeWithHttpInfo() throws ApiException {
            return getAuditLogsWithHttpInfo(tenantId, limit, skip, order, after, before);
        }

        /**
         * Execute getAuditLogs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetAuditLogs200Response> _callback) throws ApiException {
            return getAuditLogsAsync(tenantId, limit, skip, order, after, before, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIgetAuditLogsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAuditLogsRequest getAuditLogs(String tenantId) {
        return new APIgetAuditLogsRequest(tenantId);
    }
    private okhttp3.Call getCommentCall(String tenantId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/comments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentValidateBeforeCall(String tenantId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getComment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getComment(Async)");
        }

        return getCommentCall(tenantId, id, _callback);

    }


    private ApiResponse<GetComment200Response> getCommentWithHttpInfo(String tenantId, String id) throws ApiException {
        okhttp3.Call localVarCall = getCommentValidateBeforeCall(tenantId, id, null);
        Type localVarReturnType = new TypeToken<GetComment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommentAsync(String tenantId, String id, final ApiCallback<GetComment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentValidateBeforeCall(tenantId, id, _callback);
        Type localVarReturnType = new TypeToken<GetComment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetCommentRequest {
        private final String tenantId;
        private final String id;

        private APIgetCommentRequest(String tenantId, String id) {
            this.tenantId = tenantId;
            this.id = id;
        }

        /**
         * Build call for getComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommentCall(tenantId, id, _callback);
        }

        /**
         * Execute getComment request
         * @return GetComment200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetComment200Response execute() throws ApiException {
            ApiResponse<GetComment200Response> localVarResp = getCommentWithHttpInfo(tenantId, id);
            return localVarResp.getData();
        }

        /**
         * Execute getComment request with HTTP info returned
         * @return ApiResponse&lt;GetComment200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetComment200Response> executeWithHttpInfo() throws ApiException {
            return getCommentWithHttpInfo(tenantId, id);
        }

        /**
         * Execute getComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetComment200Response> _callback) throws ApiException {
            return getCommentAsync(tenantId, id, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @return APIgetCommentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetCommentRequest getComment(String tenantId, String id) {
        return new APIgetCommentRequest(tenantId, id);
    }
    private okhttp3.Call getCommentsCall(String tenantId, Integer page, Integer limit, Integer skip, Boolean asTree, Integer skipChildren, Integer limitChildren, Integer maxTreeDepth, String urlId, String userId, String anonUserId, String contextUserId, String hashTag, String parentId, SortDirections direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (asTree != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asTree", asTree));
        }

        if (skipChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipChildren", skipChildren));
        }

        if (limitChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitChildren", limitChildren));
        }

        if (maxTreeDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxTreeDepth", maxTreeDepth));
        }

        if (urlId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlId", urlId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (anonUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anonUserId", anonUserId));
        }

        if (contextUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contextUserId", contextUserId));
        }

        if (hashTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hashTag", hashTag));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentId", parentId));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentsValidateBeforeCall(String tenantId, Integer page, Integer limit, Integer skip, Boolean asTree, Integer skipChildren, Integer limitChildren, Integer maxTreeDepth, String urlId, String userId, String anonUserId, String contextUserId, String hashTag, String parentId, SortDirections direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getComments(Async)");
        }

        return getCommentsCall(tenantId, page, limit, skip, asTree, skipChildren, limitChildren, maxTreeDepth, urlId, userId, anonUserId, contextUserId, hashTag, parentId, direction, _callback);

    }


    private ApiResponse<GetComments200Response> getCommentsWithHttpInfo(String tenantId, Integer page, Integer limit, Integer skip, Boolean asTree, Integer skipChildren, Integer limitChildren, Integer maxTreeDepth, String urlId, String userId, String anonUserId, String contextUserId, String hashTag, String parentId, SortDirections direction) throws ApiException {
        okhttp3.Call localVarCall = getCommentsValidateBeforeCall(tenantId, page, limit, skip, asTree, skipChildren, limitChildren, maxTreeDepth, urlId, userId, anonUserId, contextUserId, hashTag, parentId, direction, null);
        Type localVarReturnType = new TypeToken<GetComments200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommentsAsync(String tenantId, Integer page, Integer limit, Integer skip, Boolean asTree, Integer skipChildren, Integer limitChildren, Integer maxTreeDepth, String urlId, String userId, String anonUserId, String contextUserId, String hashTag, String parentId, SortDirections direction, final ApiCallback<GetComments200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentsValidateBeforeCall(tenantId, page, limit, skip, asTree, skipChildren, limitChildren, maxTreeDepth, urlId, userId, anonUserId, contextUserId, hashTag, parentId, direction, _callback);
        Type localVarReturnType = new TypeToken<GetComments200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetCommentsRequest {
        private final String tenantId;
        private Integer page;
        private Integer limit;
        private Integer skip;
        private Boolean asTree;
        private Integer skipChildren;
        private Integer limitChildren;
        private Integer maxTreeDepth;
        private String urlId;
        private String userId;
        private String anonUserId;
        private String contextUserId;
        private String hashTag;
        private String parentId;
        private SortDirections direction;

        private APIgetCommentsRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set page
         * @param page  (optional)
         * @return APIgetCommentsRequest
         */
        public APIgetCommentsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit  (optional)
         * @return APIgetCommentsRequest
         */
        public APIgetCommentsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set skip
         * @param skip  (optional)
         * @return APIgetCommentsRequest
         */
        public APIgetCommentsRequest skip(Integer skip) {
            this.skip = skip;
            return this;
        }

        /**
         * Set asTree
         * @param asTree  (optional)
         * @return APIgetCommentsRequest
         */
        public APIgetCommentsRequest asTree(Boolean asTree) {
            this.asTree = asTree;
            return this;
        }

        /**
         * Set skipChildren
         * @param skipChildren  (optional)
         * @return APIgetCommentsRequest
         */
        public APIgetCommentsRequest skipChildren(Integer skipChildren) {
            this.skipChildren = skipChildren;
            return this;
        }

        /**
         * Set limitChildren
         * @param limitChildren  (optional)
         * @return APIgetCommentsRequest
         */
        public APIgetCommentsRequest limitChildren(Integer limitChildren) {
            this.limitChildren = limitChildren;
            return this;
        }

        /**
         * Set maxTreeDepth
         * @param maxTreeDepth  (optional)
         * @return APIgetCommentsRequest
         */
        public APIgetCommentsRequest maxTreeDepth(Integer maxTreeDepth) {
            this.maxTreeDepth = maxTreeDepth;
            return this;
        }

        /**
         * Set urlId
         * @param urlId  (optional)
         * @return APIgetCommentsRequest
         */
        public APIgetCommentsRequest urlId(String urlId) {
            this.urlId = urlId;
            return this;
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return APIgetCommentsRequest
         */
        public APIgetCommentsRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set anonUserId
         * @param anonUserId  (optional)
         * @return APIgetCommentsRequest
         */
        public APIgetCommentsRequest anonUserId(String anonUserId) {
            this.anonUserId = anonUserId;
            return this;
        }

        /**
         * Set contextUserId
         * @param contextUserId  (optional)
         * @return APIgetCommentsRequest
         */
        public APIgetCommentsRequest contextUserId(String contextUserId) {
            this.contextUserId = contextUserId;
            return this;
        }

        /**
         * Set hashTag
         * @param hashTag  (optional)
         * @return APIgetCommentsRequest
         */
        public APIgetCommentsRequest hashTag(String hashTag) {
            this.hashTag = hashTag;
            return this;
        }

        /**
         * Set parentId
         * @param parentId  (optional)
         * @return APIgetCommentsRequest
         */
        public APIgetCommentsRequest parentId(String parentId) {
            this.parentId = parentId;
            return this;
        }

        /**
         * Set direction
         * @param direction  (optional)
         * @return APIgetCommentsRequest
         */
        public APIgetCommentsRequest direction(SortDirections direction) {
            this.direction = direction;
            return this;
        }

        /**
         * Build call for getComments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommentsCall(tenantId, page, limit, skip, asTree, skipChildren, limitChildren, maxTreeDepth, urlId, userId, anonUserId, contextUserId, hashTag, parentId, direction, _callback);
        }

        /**
         * Execute getComments request
         * @return GetComments200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetComments200Response execute() throws ApiException {
            ApiResponse<GetComments200Response> localVarResp = getCommentsWithHttpInfo(tenantId, page, limit, skip, asTree, skipChildren, limitChildren, maxTreeDepth, urlId, userId, anonUserId, contextUserId, hashTag, parentId, direction);
            return localVarResp.getData();
        }

        /**
         * Execute getComments request with HTTP info returned
         * @return ApiResponse&lt;GetComments200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetComments200Response> executeWithHttpInfo() throws ApiException {
            return getCommentsWithHttpInfo(tenantId, page, limit, skip, asTree, skipChildren, limitChildren, maxTreeDepth, urlId, userId, anonUserId, contextUserId, hashTag, parentId, direction);
        }

        /**
         * Execute getComments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetComments200Response> _callback) throws ApiException {
            return getCommentsAsync(tenantId, page, limit, skip, asTree, skipChildren, limitChildren, maxTreeDepth, urlId, userId, anonUserId, contextUserId, hashTag, parentId, direction, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIgetCommentsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetCommentsRequest getComments(String tenantId) {
        return new APIgetCommentsRequest(tenantId);
    }
    private okhttp3.Call getDomainConfigCall(String tenantId, String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/domain-configs/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainConfigValidateBeforeCall(String tenantId, String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getDomainConfig(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDomainConfig(Async)");
        }

        return getDomainConfigCall(tenantId, domain, _callback);

    }


    private ApiResponse<GetDomainConfig200Response> getDomainConfigWithHttpInfo(String tenantId, String domain) throws ApiException {
        okhttp3.Call localVarCall = getDomainConfigValidateBeforeCall(tenantId, domain, null);
        Type localVarReturnType = new TypeToken<GetDomainConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDomainConfigAsync(String tenantId, String domain, final ApiCallback<GetDomainConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainConfigValidateBeforeCall(tenantId, domain, _callback);
        Type localVarReturnType = new TypeToken<GetDomainConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDomainConfigRequest {
        private final String tenantId;
        private final String domain;

        private APIgetDomainConfigRequest(String tenantId, String domain) {
            this.tenantId = tenantId;
            this.domain = domain;
        }

        /**
         * Build call for getDomainConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDomainConfigCall(tenantId, domain, _callback);
        }

        /**
         * Execute getDomainConfig request
         * @return GetDomainConfig200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetDomainConfig200Response execute() throws ApiException {
            ApiResponse<GetDomainConfig200Response> localVarResp = getDomainConfigWithHttpInfo(tenantId, domain);
            return localVarResp.getData();
        }

        /**
         * Execute getDomainConfig request with HTTP info returned
         * @return ApiResponse&lt;GetDomainConfig200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetDomainConfig200Response> executeWithHttpInfo() throws ApiException {
            return getDomainConfigWithHttpInfo(tenantId, domain);
        }

        /**
         * Execute getDomainConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetDomainConfig200Response> _callback) throws ApiException {
            return getDomainConfigAsync(tenantId, domain, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domain  (required)
     * @return APIgetDomainConfigRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDomainConfigRequest getDomainConfig(String tenantId, String domain) {
        return new APIgetDomainConfigRequest(tenantId, domain);
    }
    private okhttp3.Call getDomainConfigsCall(String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/domain-configs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainConfigsValidateBeforeCall(String tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getDomainConfigs(Async)");
        }

        return getDomainConfigsCall(tenantId, _callback);

    }


    private ApiResponse<GetDomainConfigs200Response> getDomainConfigsWithHttpInfo(String tenantId) throws ApiException {
        okhttp3.Call localVarCall = getDomainConfigsValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<GetDomainConfigs200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDomainConfigsAsync(String tenantId, final ApiCallback<GetDomainConfigs200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainConfigsValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<GetDomainConfigs200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDomainConfigsRequest {
        private final String tenantId;

        private APIgetDomainConfigsRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Build call for getDomainConfigs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDomainConfigsCall(tenantId, _callback);
        }

        /**
         * Execute getDomainConfigs request
         * @return GetDomainConfigs200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetDomainConfigs200Response execute() throws ApiException {
            ApiResponse<GetDomainConfigs200Response> localVarResp = getDomainConfigsWithHttpInfo(tenantId);
            return localVarResp.getData();
        }

        /**
         * Execute getDomainConfigs request with HTTP info returned
         * @return ApiResponse&lt;GetDomainConfigs200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetDomainConfigs200Response> executeWithHttpInfo() throws ApiException {
            return getDomainConfigsWithHttpInfo(tenantId);
        }

        /**
         * Execute getDomainConfigs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetDomainConfigs200Response> _callback) throws ApiException {
            return getDomainConfigsAsync(tenantId, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIgetDomainConfigsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDomainConfigsRequest getDomainConfigs(String tenantId) {
        return new APIgetDomainConfigsRequest(tenantId);
    }
    private okhttp3.Call getFeedPostsCall(String tenantId, String afterId, Integer limit, List<String> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/feed-posts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (afterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterId", afterId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeedPostsValidateBeforeCall(String tenantId, String afterId, Integer limit, List<String> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getFeedPosts(Async)");
        }

        return getFeedPostsCall(tenantId, afterId, limit, tags, _callback);

    }


    private ApiResponse<GetFeedPosts200Response> getFeedPostsWithHttpInfo(String tenantId, String afterId, Integer limit, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = getFeedPostsValidateBeforeCall(tenantId, afterId, limit, tags, null);
        Type localVarReturnType = new TypeToken<GetFeedPosts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeedPostsAsync(String tenantId, String afterId, Integer limit, List<String> tags, final ApiCallback<GetFeedPosts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeedPostsValidateBeforeCall(tenantId, afterId, limit, tags, _callback);
        Type localVarReturnType = new TypeToken<GetFeedPosts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFeedPostsRequest {
        private final String tenantId;
        private String afterId;
        private Integer limit;
        private List<String> tags;

        private APIgetFeedPostsRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set afterId
         * @param afterId  (optional)
         * @return APIgetFeedPostsRequest
         */
        public APIgetFeedPostsRequest afterId(String afterId) {
            this.afterId = afterId;
            return this;
        }

        /**
         * Set limit
         * @param limit  (optional)
         * @return APIgetFeedPostsRequest
         */
        public APIgetFeedPostsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set tags
         * @param tags  (optional)
         * @return APIgetFeedPostsRequest
         */
        public APIgetFeedPostsRequest tags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * Build call for getFeedPosts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeedPostsCall(tenantId, afterId, limit, tags, _callback);
        }

        /**
         * Execute getFeedPosts request
         * @return GetFeedPosts200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetFeedPosts200Response execute() throws ApiException {
            ApiResponse<GetFeedPosts200Response> localVarResp = getFeedPostsWithHttpInfo(tenantId, afterId, limit, tags);
            return localVarResp.getData();
        }

        /**
         * Execute getFeedPosts request with HTTP info returned
         * @return ApiResponse&lt;GetFeedPosts200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetFeedPosts200Response> executeWithHttpInfo() throws ApiException {
            return getFeedPostsWithHttpInfo(tenantId, afterId, limit, tags);
        }

        /**
         * Execute getFeedPosts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetFeedPosts200Response> _callback) throws ApiException {
            return getFeedPostsAsync(tenantId, afterId, limit, tags, _callback);
        }
    }

    /**
     * 
     *  req tenantId afterId
     * @param tenantId  (required)
     * @return APIgetFeedPostsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFeedPostsRequest getFeedPosts(String tenantId) {
        return new APIgetFeedPostsRequest(tenantId);
    }
    private okhttp3.Call getPageByURLIdCall(String tenantId, String urlId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/pages/by-url-id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (urlId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlId", urlId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPageByURLIdValidateBeforeCall(String tenantId, String urlId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getPageByURLId(Async)");
        }

        // verify the required parameter 'urlId' is set
        if (urlId == null) {
            throw new ApiException("Missing the required parameter 'urlId' when calling getPageByURLId(Async)");
        }

        return getPageByURLIdCall(tenantId, urlId, _callback);

    }


    private ApiResponse<GetPageByURLIdAPIResponse> getPageByURLIdWithHttpInfo(String tenantId, String urlId) throws ApiException {
        okhttp3.Call localVarCall = getPageByURLIdValidateBeforeCall(tenantId, urlId, null);
        Type localVarReturnType = new TypeToken<GetPageByURLIdAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPageByURLIdAsync(String tenantId, String urlId, final ApiCallback<GetPageByURLIdAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPageByURLIdValidateBeforeCall(tenantId, urlId, _callback);
        Type localVarReturnType = new TypeToken<GetPageByURLIdAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPageByURLIdRequest {
        private final String tenantId;
        private final String urlId;

        private APIgetPageByURLIdRequest(String tenantId, String urlId) {
            this.tenantId = tenantId;
            this.urlId = urlId;
        }

        /**
         * Build call for getPageByURLId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPageByURLIdCall(tenantId, urlId, _callback);
        }

        /**
         * Execute getPageByURLId request
         * @return GetPageByURLIdAPIResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetPageByURLIdAPIResponse execute() throws ApiException {
            ApiResponse<GetPageByURLIdAPIResponse> localVarResp = getPageByURLIdWithHttpInfo(tenantId, urlId);
            return localVarResp.getData();
        }

        /**
         * Execute getPageByURLId request with HTTP info returned
         * @return ApiResponse&lt;GetPageByURLIdAPIResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPageByURLIdAPIResponse> executeWithHttpInfo() throws ApiException {
            return getPageByURLIdWithHttpInfo(tenantId, urlId);
        }

        /**
         * Execute getPageByURLId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPageByURLIdAPIResponse> _callback) throws ApiException {
            return getPageByURLIdAsync(tenantId, urlId, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param urlId  (required)
     * @return APIgetPageByURLIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPageByURLIdRequest getPageByURLId(String tenantId, String urlId) {
        return new APIgetPageByURLIdRequest(tenantId, urlId);
    }
    private okhttp3.Call getPagesCall(String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesValidateBeforeCall(String tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getPages(Async)");
        }

        return getPagesCall(tenantId, _callback);

    }


    private ApiResponse<GetPagesAPIResponse> getPagesWithHttpInfo(String tenantId) throws ApiException {
        okhttp3.Call localVarCall = getPagesValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<GetPagesAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPagesAsync(String tenantId, final ApiCallback<GetPagesAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<GetPagesAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPagesRequest {
        private final String tenantId;

        private APIgetPagesRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Build call for getPages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPagesCall(tenantId, _callback);
        }

        /**
         * Execute getPages request
         * @return GetPagesAPIResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetPagesAPIResponse execute() throws ApiException {
            ApiResponse<GetPagesAPIResponse> localVarResp = getPagesWithHttpInfo(tenantId);
            return localVarResp.getData();
        }

        /**
         * Execute getPages request with HTTP info returned
         * @return ApiResponse&lt;GetPagesAPIResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPagesAPIResponse> executeWithHttpInfo() throws ApiException {
            return getPagesWithHttpInfo(tenantId);
        }

        /**
         * Execute getPages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPagesAPIResponse> _callback) throws ApiException {
            return getPagesAsync(tenantId, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIgetPagesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPagesRequest getPages(String tenantId) {
        return new APIgetPagesRequest(tenantId);
    }
    private okhttp3.Call getSSOUserByEmailCall(String tenantId, String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sso-users/by-email/{email}"
            .replace("{" + "email" + "}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSSOUserByEmailValidateBeforeCall(String tenantId, String email, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getSSOUserByEmail(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling getSSOUserByEmail(Async)");
        }

        return getSSOUserByEmailCall(tenantId, email, _callback);

    }


    private ApiResponse<GetSSOUserByEmailAPIResponse> getSSOUserByEmailWithHttpInfo(String tenantId, String email) throws ApiException {
        okhttp3.Call localVarCall = getSSOUserByEmailValidateBeforeCall(tenantId, email, null);
        Type localVarReturnType = new TypeToken<GetSSOUserByEmailAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSSOUserByEmailAsync(String tenantId, String email, final ApiCallback<GetSSOUserByEmailAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSSOUserByEmailValidateBeforeCall(tenantId, email, _callback);
        Type localVarReturnType = new TypeToken<GetSSOUserByEmailAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSSOUserByEmailRequest {
        private final String tenantId;
        private final String email;

        private APIgetSSOUserByEmailRequest(String tenantId, String email) {
            this.tenantId = tenantId;
            this.email = email;
        }

        /**
         * Build call for getSSOUserByEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSSOUserByEmailCall(tenantId, email, _callback);
        }

        /**
         * Execute getSSOUserByEmail request
         * @return GetSSOUserByEmailAPIResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetSSOUserByEmailAPIResponse execute() throws ApiException {
            ApiResponse<GetSSOUserByEmailAPIResponse> localVarResp = getSSOUserByEmailWithHttpInfo(tenantId, email);
            return localVarResp.getData();
        }

        /**
         * Execute getSSOUserByEmail request with HTTP info returned
         * @return ApiResponse&lt;GetSSOUserByEmailAPIResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetSSOUserByEmailAPIResponse> executeWithHttpInfo() throws ApiException {
            return getSSOUserByEmailWithHttpInfo(tenantId, email);
        }

        /**
         * Execute getSSOUserByEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetSSOUserByEmailAPIResponse> _callback) throws ApiException {
            return getSSOUserByEmailAsync(tenantId, email, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param email  (required)
     * @return APIgetSSOUserByEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSSOUserByEmailRequest getSSOUserByEmail(String tenantId, String email) {
        return new APIgetSSOUserByEmailRequest(tenantId, email);
    }
    private okhttp3.Call getSSOUserByIdCall(String tenantId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sso-users/by-id/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSSOUserByIdValidateBeforeCall(String tenantId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getSSOUserById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSSOUserById(Async)");
        }

        return getSSOUserByIdCall(tenantId, id, _callback);

    }


    private ApiResponse<GetSSOUserByIdAPIResponse> getSSOUserByIdWithHttpInfo(String tenantId, String id) throws ApiException {
        okhttp3.Call localVarCall = getSSOUserByIdValidateBeforeCall(tenantId, id, null);
        Type localVarReturnType = new TypeToken<GetSSOUserByIdAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSSOUserByIdAsync(String tenantId, String id, final ApiCallback<GetSSOUserByIdAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSSOUserByIdValidateBeforeCall(tenantId, id, _callback);
        Type localVarReturnType = new TypeToken<GetSSOUserByIdAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSSOUserByIdRequest {
        private final String tenantId;
        private final String id;

        private APIgetSSOUserByIdRequest(String tenantId, String id) {
            this.tenantId = tenantId;
            this.id = id;
        }

        /**
         * Build call for getSSOUserById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSSOUserByIdCall(tenantId, id, _callback);
        }

        /**
         * Execute getSSOUserById request
         * @return GetSSOUserByIdAPIResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetSSOUserByIdAPIResponse execute() throws ApiException {
            ApiResponse<GetSSOUserByIdAPIResponse> localVarResp = getSSOUserByIdWithHttpInfo(tenantId, id);
            return localVarResp.getData();
        }

        /**
         * Execute getSSOUserById request with HTTP info returned
         * @return ApiResponse&lt;GetSSOUserByIdAPIResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetSSOUserByIdAPIResponse> executeWithHttpInfo() throws ApiException {
            return getSSOUserByIdWithHttpInfo(tenantId, id);
        }

        /**
         * Execute getSSOUserById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetSSOUserByIdAPIResponse> _callback) throws ApiException {
            return getSSOUserByIdAsync(tenantId, id, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @return APIgetSSOUserByIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSSOUserByIdRequest getSSOUserById(String tenantId, String id) {
        return new APIgetSSOUserByIdRequest(tenantId, id);
    }
    private okhttp3.Call getSSOUsersCall(String tenantId, Integer skip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sso-users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSSOUsersValidateBeforeCall(String tenantId, Integer skip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getSSOUsers(Async)");
        }

        return getSSOUsersCall(tenantId, skip, _callback);

    }


    private ApiResponse<GetSSOUsers200Response> getSSOUsersWithHttpInfo(String tenantId, Integer skip) throws ApiException {
        okhttp3.Call localVarCall = getSSOUsersValidateBeforeCall(tenantId, skip, null);
        Type localVarReturnType = new TypeToken<GetSSOUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSSOUsersAsync(String tenantId, Integer skip, final ApiCallback<GetSSOUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSSOUsersValidateBeforeCall(tenantId, skip, _callback);
        Type localVarReturnType = new TypeToken<GetSSOUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSSOUsersRequest {
        private final String tenantId;
        private Integer skip;

        private APIgetSSOUsersRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set skip
         * @param skip  (optional)
         * @return APIgetSSOUsersRequest
         */
        public APIgetSSOUsersRequest skip(Integer skip) {
            this.skip = skip;
            return this;
        }

        /**
         * Build call for getSSOUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSSOUsersCall(tenantId, skip, _callback);
        }

        /**
         * Execute getSSOUsers request
         * @return GetSSOUsers200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetSSOUsers200Response execute() throws ApiException {
            ApiResponse<GetSSOUsers200Response> localVarResp = getSSOUsersWithHttpInfo(tenantId, skip);
            return localVarResp.getData();
        }

        /**
         * Execute getSSOUsers request with HTTP info returned
         * @return ApiResponse&lt;GetSSOUsers200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetSSOUsers200Response> executeWithHttpInfo() throws ApiException {
            return getSSOUsersWithHttpInfo(tenantId, skip);
        }

        /**
         * Execute getSSOUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetSSOUsers200Response> _callback) throws ApiException {
            return getSSOUsersAsync(tenantId, skip, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIgetSSOUsersRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSSOUsersRequest getSSOUsers(String tenantId) {
        return new APIgetSSOUsersRequest(tenantId);
    }
    private okhttp3.Call getSubscriptionsCall(String tenantId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionsValidateBeforeCall(String tenantId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getSubscriptions(Async)");
        }

        return getSubscriptionsCall(tenantId, userId, _callback);

    }


    private ApiResponse<GetSubscriptionsAPIResponse> getSubscriptionsWithHttpInfo(String tenantId, String userId) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionsValidateBeforeCall(tenantId, userId, null);
        Type localVarReturnType = new TypeToken<GetSubscriptionsAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSubscriptionsAsync(String tenantId, String userId, final ApiCallback<GetSubscriptionsAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionsValidateBeforeCall(tenantId, userId, _callback);
        Type localVarReturnType = new TypeToken<GetSubscriptionsAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSubscriptionsRequest {
        private final String tenantId;
        private String userId;

        private APIgetSubscriptionsRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return APIgetSubscriptionsRequest
         */
        public APIgetSubscriptionsRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Build call for getSubscriptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSubscriptionsCall(tenantId, userId, _callback);
        }

        /**
         * Execute getSubscriptions request
         * @return GetSubscriptionsAPIResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetSubscriptionsAPIResponse execute() throws ApiException {
            ApiResponse<GetSubscriptionsAPIResponse> localVarResp = getSubscriptionsWithHttpInfo(tenantId, userId);
            return localVarResp.getData();
        }

        /**
         * Execute getSubscriptions request with HTTP info returned
         * @return ApiResponse&lt;GetSubscriptionsAPIResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetSubscriptionsAPIResponse> executeWithHttpInfo() throws ApiException {
            return getSubscriptionsWithHttpInfo(tenantId, userId);
        }

        /**
         * Execute getSubscriptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetSubscriptionsAPIResponse> _callback) throws ApiException {
            return getSubscriptionsAsync(tenantId, userId, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIgetSubscriptionsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSubscriptionsRequest getSubscriptions(String tenantId) {
        return new APIgetSubscriptionsRequest(tenantId);
    }
    private okhttp3.Call getUserBadgeCall(String tenantId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/user-badges/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserBadgeValidateBeforeCall(String tenantId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getUserBadge(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserBadge(Async)");
        }

        return getUserBadgeCall(tenantId, id, _callback);

    }


    private ApiResponse<GetUserBadge200Response> getUserBadgeWithHttpInfo(String tenantId, String id) throws ApiException {
        okhttp3.Call localVarCall = getUserBadgeValidateBeforeCall(tenantId, id, null);
        Type localVarReturnType = new TypeToken<GetUserBadge200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserBadgeAsync(String tenantId, String id, final ApiCallback<GetUserBadge200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserBadgeValidateBeforeCall(tenantId, id, _callback);
        Type localVarReturnType = new TypeToken<GetUserBadge200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetUserBadgeRequest {
        private final String tenantId;
        private final String id;

        private APIgetUserBadgeRequest(String tenantId, String id) {
            this.tenantId = tenantId;
            this.id = id;
        }

        /**
         * Build call for getUserBadge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserBadgeCall(tenantId, id, _callback);
        }

        /**
         * Execute getUserBadge request
         * @return GetUserBadge200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetUserBadge200Response execute() throws ApiException {
            ApiResponse<GetUserBadge200Response> localVarResp = getUserBadgeWithHttpInfo(tenantId, id);
            return localVarResp.getData();
        }

        /**
         * Execute getUserBadge request with HTTP info returned
         * @return ApiResponse&lt;GetUserBadge200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetUserBadge200Response> executeWithHttpInfo() throws ApiException {
            return getUserBadgeWithHttpInfo(tenantId, id);
        }

        /**
         * Execute getUserBadge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetUserBadge200Response> _callback) throws ApiException {
            return getUserBadgeAsync(tenantId, id, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @return APIgetUserBadgeRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetUserBadgeRequest getUserBadge(String tenantId, String id) {
        return new APIgetUserBadgeRequest(tenantId, id);
    }
    private okhttp3.Call getUserBadgeProgressByIdCall(String tenantId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/user-badge-progress/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserBadgeProgressByIdValidateBeforeCall(String tenantId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getUserBadgeProgressById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserBadgeProgressById(Async)");
        }

        return getUserBadgeProgressByIdCall(tenantId, id, _callback);

    }


    private ApiResponse<GetUserBadgeProgressById200Response> getUserBadgeProgressByIdWithHttpInfo(String tenantId, String id) throws ApiException {
        okhttp3.Call localVarCall = getUserBadgeProgressByIdValidateBeforeCall(tenantId, id, null);
        Type localVarReturnType = new TypeToken<GetUserBadgeProgressById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserBadgeProgressByIdAsync(String tenantId, String id, final ApiCallback<GetUserBadgeProgressById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserBadgeProgressByIdValidateBeforeCall(tenantId, id, _callback);
        Type localVarReturnType = new TypeToken<GetUserBadgeProgressById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetUserBadgeProgressByIdRequest {
        private final String tenantId;
        private final String id;

        private APIgetUserBadgeProgressByIdRequest(String tenantId, String id) {
            this.tenantId = tenantId;
            this.id = id;
        }

        /**
         * Build call for getUserBadgeProgressById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserBadgeProgressByIdCall(tenantId, id, _callback);
        }

        /**
         * Execute getUserBadgeProgressById request
         * @return GetUserBadgeProgressById200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetUserBadgeProgressById200Response execute() throws ApiException {
            ApiResponse<GetUserBadgeProgressById200Response> localVarResp = getUserBadgeProgressByIdWithHttpInfo(tenantId, id);
            return localVarResp.getData();
        }

        /**
         * Execute getUserBadgeProgressById request with HTTP info returned
         * @return ApiResponse&lt;GetUserBadgeProgressById200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetUserBadgeProgressById200Response> executeWithHttpInfo() throws ApiException {
            return getUserBadgeProgressByIdWithHttpInfo(tenantId, id);
        }

        /**
         * Execute getUserBadgeProgressById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetUserBadgeProgressById200Response> _callback) throws ApiException {
            return getUserBadgeProgressByIdAsync(tenantId, id, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @return APIgetUserBadgeProgressByIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetUserBadgeProgressByIdRequest getUserBadgeProgressById(String tenantId, String id) {
        return new APIgetUserBadgeProgressByIdRequest(tenantId, id);
    }
    private okhttp3.Call getUserBadgeProgressByUserIdCall(String tenantId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/user-badge-progress/user/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserBadgeProgressByUserIdValidateBeforeCall(String tenantId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getUserBadgeProgressByUserId(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserBadgeProgressByUserId(Async)");
        }

        return getUserBadgeProgressByUserIdCall(tenantId, userId, _callback);

    }


    private ApiResponse<GetUserBadgeProgressById200Response> getUserBadgeProgressByUserIdWithHttpInfo(String tenantId, String userId) throws ApiException {
        okhttp3.Call localVarCall = getUserBadgeProgressByUserIdValidateBeforeCall(tenantId, userId, null);
        Type localVarReturnType = new TypeToken<GetUserBadgeProgressById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserBadgeProgressByUserIdAsync(String tenantId, String userId, final ApiCallback<GetUserBadgeProgressById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserBadgeProgressByUserIdValidateBeforeCall(tenantId, userId, _callback);
        Type localVarReturnType = new TypeToken<GetUserBadgeProgressById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetUserBadgeProgressByUserIdRequest {
        private final String tenantId;
        private final String userId;

        private APIgetUserBadgeProgressByUserIdRequest(String tenantId, String userId) {
            this.tenantId = tenantId;
            this.userId = userId;
        }

        /**
         * Build call for getUserBadgeProgressByUserId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserBadgeProgressByUserIdCall(tenantId, userId, _callback);
        }

        /**
         * Execute getUserBadgeProgressByUserId request
         * @return GetUserBadgeProgressById200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetUserBadgeProgressById200Response execute() throws ApiException {
            ApiResponse<GetUserBadgeProgressById200Response> localVarResp = getUserBadgeProgressByUserIdWithHttpInfo(tenantId, userId);
            return localVarResp.getData();
        }

        /**
         * Execute getUserBadgeProgressByUserId request with HTTP info returned
         * @return ApiResponse&lt;GetUserBadgeProgressById200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetUserBadgeProgressById200Response> executeWithHttpInfo() throws ApiException {
            return getUserBadgeProgressByUserIdWithHttpInfo(tenantId, userId);
        }

        /**
         * Execute getUserBadgeProgressByUserId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetUserBadgeProgressById200Response> _callback) throws ApiException {
            return getUserBadgeProgressByUserIdAsync(tenantId, userId, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param userId  (required)
     * @return APIgetUserBadgeProgressByUserIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetUserBadgeProgressByUserIdRequest getUserBadgeProgressByUserId(String tenantId, String userId) {
        return new APIgetUserBadgeProgressByUserIdRequest(tenantId, userId);
    }
    private okhttp3.Call getUserBadgeProgressListCall(String tenantId, String userId, Double limit, Double skip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/user-badge-progress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserBadgeProgressListValidateBeforeCall(String tenantId, String userId, Double limit, Double skip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getUserBadgeProgressList(Async)");
        }

        return getUserBadgeProgressListCall(tenantId, userId, limit, skip, _callback);

    }


    private ApiResponse<GetUserBadgeProgressList200Response> getUserBadgeProgressListWithHttpInfo(String tenantId, String userId, Double limit, Double skip) throws ApiException {
        okhttp3.Call localVarCall = getUserBadgeProgressListValidateBeforeCall(tenantId, userId, limit, skip, null);
        Type localVarReturnType = new TypeToken<GetUserBadgeProgressList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserBadgeProgressListAsync(String tenantId, String userId, Double limit, Double skip, final ApiCallback<GetUserBadgeProgressList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserBadgeProgressListValidateBeforeCall(tenantId, userId, limit, skip, _callback);
        Type localVarReturnType = new TypeToken<GetUserBadgeProgressList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetUserBadgeProgressListRequest {
        private final String tenantId;
        private String userId;
        private Double limit;
        private Double skip;

        private APIgetUserBadgeProgressListRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return APIgetUserBadgeProgressListRequest
         */
        public APIgetUserBadgeProgressListRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set limit
         * @param limit  (optional)
         * @return APIgetUserBadgeProgressListRequest
         */
        public APIgetUserBadgeProgressListRequest limit(Double limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set skip
         * @param skip  (optional)
         * @return APIgetUserBadgeProgressListRequest
         */
        public APIgetUserBadgeProgressListRequest skip(Double skip) {
            this.skip = skip;
            return this;
        }

        /**
         * Build call for getUserBadgeProgressList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserBadgeProgressListCall(tenantId, userId, limit, skip, _callback);
        }

        /**
         * Execute getUserBadgeProgressList request
         * @return GetUserBadgeProgressList200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetUserBadgeProgressList200Response execute() throws ApiException {
            ApiResponse<GetUserBadgeProgressList200Response> localVarResp = getUserBadgeProgressListWithHttpInfo(tenantId, userId, limit, skip);
            return localVarResp.getData();
        }

        /**
         * Execute getUserBadgeProgressList request with HTTP info returned
         * @return ApiResponse&lt;GetUserBadgeProgressList200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetUserBadgeProgressList200Response> executeWithHttpInfo() throws ApiException {
            return getUserBadgeProgressListWithHttpInfo(tenantId, userId, limit, skip);
        }

        /**
         * Execute getUserBadgeProgressList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetUserBadgeProgressList200Response> _callback) throws ApiException {
            return getUserBadgeProgressListAsync(tenantId, userId, limit, skip, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIgetUserBadgeProgressListRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetUserBadgeProgressListRequest getUserBadgeProgressList(String tenantId) {
        return new APIgetUserBadgeProgressListRequest(tenantId);
    }
    private okhttp3.Call getUserBadgesCall(String tenantId, String userId, String badgeId, Double type, Boolean displayedOnComments, Double limit, Double skip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/user-badges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (badgeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("badgeId", badgeId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (displayedOnComments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayedOnComments", displayedOnComments));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserBadgesValidateBeforeCall(String tenantId, String userId, String badgeId, Double type, Boolean displayedOnComments, Double limit, Double skip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getUserBadges(Async)");
        }

        return getUserBadgesCall(tenantId, userId, badgeId, type, displayedOnComments, limit, skip, _callback);

    }


    private ApiResponse<GetUserBadges200Response> getUserBadgesWithHttpInfo(String tenantId, String userId, String badgeId, Double type, Boolean displayedOnComments, Double limit, Double skip) throws ApiException {
        okhttp3.Call localVarCall = getUserBadgesValidateBeforeCall(tenantId, userId, badgeId, type, displayedOnComments, limit, skip, null);
        Type localVarReturnType = new TypeToken<GetUserBadges200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserBadgesAsync(String tenantId, String userId, String badgeId, Double type, Boolean displayedOnComments, Double limit, Double skip, final ApiCallback<GetUserBadges200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserBadgesValidateBeforeCall(tenantId, userId, badgeId, type, displayedOnComments, limit, skip, _callback);
        Type localVarReturnType = new TypeToken<GetUserBadges200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetUserBadgesRequest {
        private final String tenantId;
        private String userId;
        private String badgeId;
        private Double type;
        private Boolean displayedOnComments;
        private Double limit;
        private Double skip;

        private APIgetUserBadgesRequest(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return APIgetUserBadgesRequest
         */
        public APIgetUserBadgesRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set badgeId
         * @param badgeId  (optional)
         * @return APIgetUserBadgesRequest
         */
        public APIgetUserBadgesRequest badgeId(String badgeId) {
            this.badgeId = badgeId;
            return this;
        }

        /**
         * Set type
         * @param type  (optional)
         * @return APIgetUserBadgesRequest
         */
        public APIgetUserBadgesRequest type(Double type) {
            this.type = type;
            return this;
        }

        /**
         * Set displayedOnComments
         * @param displayedOnComments  (optional)
         * @return APIgetUserBadgesRequest
         */
        public APIgetUserBadgesRequest displayedOnComments(Boolean displayedOnComments) {
            this.displayedOnComments = displayedOnComments;
            return this;
        }

        /**
         * Set limit
         * @param limit  (optional)
         * @return APIgetUserBadgesRequest
         */
        public APIgetUserBadgesRequest limit(Double limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set skip
         * @param skip  (optional)
         * @return APIgetUserBadgesRequest
         */
        public APIgetUserBadgesRequest skip(Double skip) {
            this.skip = skip;
            return this;
        }

        /**
         * Build call for getUserBadges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserBadgesCall(tenantId, userId, badgeId, type, displayedOnComments, limit, skip, _callback);
        }

        /**
         * Execute getUserBadges request
         * @return GetUserBadges200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetUserBadges200Response execute() throws ApiException {
            ApiResponse<GetUserBadges200Response> localVarResp = getUserBadgesWithHttpInfo(tenantId, userId, badgeId, type, displayedOnComments, limit, skip);
            return localVarResp.getData();
        }

        /**
         * Execute getUserBadges request with HTTP info returned
         * @return ApiResponse&lt;GetUserBadges200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetUserBadges200Response> executeWithHttpInfo() throws ApiException {
            return getUserBadgesWithHttpInfo(tenantId, userId, badgeId, type, displayedOnComments, limit, skip);
        }

        /**
         * Execute getUserBadges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetUserBadges200Response> _callback) throws ApiException {
            return getUserBadgesAsync(tenantId, userId, badgeId, type, displayedOnComments, limit, skip, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return APIgetUserBadgesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIgetUserBadgesRequest getUserBadges(String tenantId) {
        return new APIgetUserBadgesRequest(tenantId);
    }
    private okhttp3.Call patchDomainConfigCall(String tenantId, String domainToUpdate, PatchDomainConfigParams patchDomainConfigParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchDomainConfigParams;

        // create path and map variables
        String localVarPath = "/api/v1/domain-configs/{domainToUpdate}"
            .replace("{" + "domainToUpdate" + "}", localVarApiClient.escapeString(domainToUpdate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchDomainConfigValidateBeforeCall(String tenantId, String domainToUpdate, PatchDomainConfigParams patchDomainConfigParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling patchDomainConfig(Async)");
        }

        // verify the required parameter 'domainToUpdate' is set
        if (domainToUpdate == null) {
            throw new ApiException("Missing the required parameter 'domainToUpdate' when calling patchDomainConfig(Async)");
        }

        // verify the required parameter 'patchDomainConfigParams' is set
        if (patchDomainConfigParams == null) {
            throw new ApiException("Missing the required parameter 'patchDomainConfigParams' when calling patchDomainConfig(Async)");
        }

        return patchDomainConfigCall(tenantId, domainToUpdate, patchDomainConfigParams, _callback);

    }


    private ApiResponse<GetDomainConfig200Response> patchDomainConfigWithHttpInfo(String tenantId, String domainToUpdate, PatchDomainConfigParams patchDomainConfigParams) throws ApiException {
        okhttp3.Call localVarCall = patchDomainConfigValidateBeforeCall(tenantId, domainToUpdate, patchDomainConfigParams, null);
        Type localVarReturnType = new TypeToken<GetDomainConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call patchDomainConfigAsync(String tenantId, String domainToUpdate, PatchDomainConfigParams patchDomainConfigParams, final ApiCallback<GetDomainConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchDomainConfigValidateBeforeCall(tenantId, domainToUpdate, patchDomainConfigParams, _callback);
        Type localVarReturnType = new TypeToken<GetDomainConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpatchDomainConfigRequest {
        private final String tenantId;
        private final String domainToUpdate;
        private final PatchDomainConfigParams patchDomainConfigParams;

        private APIpatchDomainConfigRequest(String tenantId, String domainToUpdate, PatchDomainConfigParams patchDomainConfigParams) {
            this.tenantId = tenantId;
            this.domainToUpdate = domainToUpdate;
            this.patchDomainConfigParams = patchDomainConfigParams;
        }

        /**
         * Build call for patchDomainConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return patchDomainConfigCall(tenantId, domainToUpdate, patchDomainConfigParams, _callback);
        }

        /**
         * Execute patchDomainConfig request
         * @return GetDomainConfig200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetDomainConfig200Response execute() throws ApiException {
            ApiResponse<GetDomainConfig200Response> localVarResp = patchDomainConfigWithHttpInfo(tenantId, domainToUpdate, patchDomainConfigParams);
            return localVarResp.getData();
        }

        /**
         * Execute patchDomainConfig request with HTTP info returned
         * @return ApiResponse&lt;GetDomainConfig200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetDomainConfig200Response> executeWithHttpInfo() throws ApiException {
            return patchDomainConfigWithHttpInfo(tenantId, domainToUpdate, patchDomainConfigParams);
        }

        /**
         * Execute patchDomainConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetDomainConfig200Response> _callback) throws ApiException {
            return patchDomainConfigAsync(tenantId, domainToUpdate, patchDomainConfigParams, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainToUpdate  (required)
     * @param patchDomainConfigParams  (required)
     * @return APIpatchDomainConfigRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIpatchDomainConfigRequest patchDomainConfig(String tenantId, String domainToUpdate, PatchDomainConfigParams patchDomainConfigParams) {
        return new APIpatchDomainConfigRequest(tenantId, domainToUpdate, patchDomainConfigParams);
    }
    private okhttp3.Call patchPageCall(String tenantId, String id, UpdateAPIPageData updateAPIPageData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAPIPageData;

        // create path and map variables
        String localVarPath = "/api/v1/pages/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPageValidateBeforeCall(String tenantId, String id, UpdateAPIPageData updateAPIPageData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling patchPage(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchPage(Async)");
        }

        // verify the required parameter 'updateAPIPageData' is set
        if (updateAPIPageData == null) {
            throw new ApiException("Missing the required parameter 'updateAPIPageData' when calling patchPage(Async)");
        }

        return patchPageCall(tenantId, id, updateAPIPageData, _callback);

    }


    private ApiResponse<PatchPageAPIResponse> patchPageWithHttpInfo(String tenantId, String id, UpdateAPIPageData updateAPIPageData) throws ApiException {
        okhttp3.Call localVarCall = patchPageValidateBeforeCall(tenantId, id, updateAPIPageData, null);
        Type localVarReturnType = new TypeToken<PatchPageAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call patchPageAsync(String tenantId, String id, UpdateAPIPageData updateAPIPageData, final ApiCallback<PatchPageAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPageValidateBeforeCall(tenantId, id, updateAPIPageData, _callback);
        Type localVarReturnType = new TypeToken<PatchPageAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpatchPageRequest {
        private final String tenantId;
        private final String id;
        private final UpdateAPIPageData updateAPIPageData;

        private APIpatchPageRequest(String tenantId, String id, UpdateAPIPageData updateAPIPageData) {
            this.tenantId = tenantId;
            this.id = id;
            this.updateAPIPageData = updateAPIPageData;
        }

        /**
         * Build call for patchPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return patchPageCall(tenantId, id, updateAPIPageData, _callback);
        }

        /**
         * Execute patchPage request
         * @return PatchPageAPIResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public PatchPageAPIResponse execute() throws ApiException {
            ApiResponse<PatchPageAPIResponse> localVarResp = patchPageWithHttpInfo(tenantId, id, updateAPIPageData);
            return localVarResp.getData();
        }

        /**
         * Execute patchPage request with HTTP info returned
         * @return ApiResponse&lt;PatchPageAPIResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PatchPageAPIResponse> executeWithHttpInfo() throws ApiException {
            return patchPageWithHttpInfo(tenantId, id, updateAPIPageData);
        }

        /**
         * Execute patchPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PatchPageAPIResponse> _callback) throws ApiException {
            return patchPageAsync(tenantId, id, updateAPIPageData, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @param updateAPIPageData  (required)
     * @return APIpatchPageRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIpatchPageRequest patchPage(String tenantId, String id, UpdateAPIPageData updateAPIPageData) {
        return new APIpatchPageRequest(tenantId, id, updateAPIPageData);
    }
    private okhttp3.Call patchSSOUserCall(String tenantId, String id, UpdateAPISSOUserData updateAPISSOUserData, Boolean updateComments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAPISSOUserData;

        // create path and map variables
        String localVarPath = "/api/v1/sso-users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (updateComments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateComments", updateComments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchSSOUserValidateBeforeCall(String tenantId, String id, UpdateAPISSOUserData updateAPISSOUserData, Boolean updateComments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling patchSSOUser(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchSSOUser(Async)");
        }

        // verify the required parameter 'updateAPISSOUserData' is set
        if (updateAPISSOUserData == null) {
            throw new ApiException("Missing the required parameter 'updateAPISSOUserData' when calling patchSSOUser(Async)");
        }

        return patchSSOUserCall(tenantId, id, updateAPISSOUserData, updateComments, _callback);

    }


    private ApiResponse<PatchSSOUserAPIResponse> patchSSOUserWithHttpInfo(String tenantId, String id, UpdateAPISSOUserData updateAPISSOUserData, Boolean updateComments) throws ApiException {
        okhttp3.Call localVarCall = patchSSOUserValidateBeforeCall(tenantId, id, updateAPISSOUserData, updateComments, null);
        Type localVarReturnType = new TypeToken<PatchSSOUserAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call patchSSOUserAsync(String tenantId, String id, UpdateAPISSOUserData updateAPISSOUserData, Boolean updateComments, final ApiCallback<PatchSSOUserAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchSSOUserValidateBeforeCall(tenantId, id, updateAPISSOUserData, updateComments, _callback);
        Type localVarReturnType = new TypeToken<PatchSSOUserAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpatchSSOUserRequest {
        private final String tenantId;
        private final String id;
        private final UpdateAPISSOUserData updateAPISSOUserData;
        private Boolean updateComments;

        private APIpatchSSOUserRequest(String tenantId, String id, UpdateAPISSOUserData updateAPISSOUserData) {
            this.tenantId = tenantId;
            this.id = id;
            this.updateAPISSOUserData = updateAPISSOUserData;
        }

        /**
         * Set updateComments
         * @param updateComments  (optional)
         * @return APIpatchSSOUserRequest
         */
        public APIpatchSSOUserRequest updateComments(Boolean updateComments) {
            this.updateComments = updateComments;
            return this;
        }

        /**
         * Build call for patchSSOUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return patchSSOUserCall(tenantId, id, updateAPISSOUserData, updateComments, _callback);
        }

        /**
         * Execute patchSSOUser request
         * @return PatchSSOUserAPIResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public PatchSSOUserAPIResponse execute() throws ApiException {
            ApiResponse<PatchSSOUserAPIResponse> localVarResp = patchSSOUserWithHttpInfo(tenantId, id, updateAPISSOUserData, updateComments);
            return localVarResp.getData();
        }

        /**
         * Execute patchSSOUser request with HTTP info returned
         * @return ApiResponse&lt;PatchSSOUserAPIResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PatchSSOUserAPIResponse> executeWithHttpInfo() throws ApiException {
            return patchSSOUserWithHttpInfo(tenantId, id, updateAPISSOUserData, updateComments);
        }

        /**
         * Execute patchSSOUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PatchSSOUserAPIResponse> _callback) throws ApiException {
            return patchSSOUserAsync(tenantId, id, updateAPISSOUserData, updateComments, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @param updateAPISSOUserData  (required)
     * @return APIpatchSSOUserRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIpatchSSOUserRequest patchSSOUser(String tenantId, String id, UpdateAPISSOUserData updateAPISSOUserData) {
        return new APIpatchSSOUserRequest(tenantId, id, updateAPISSOUserData);
    }
    private okhttp3.Call putDomainConfigCall(String tenantId, String domainToUpdate, UpdateDomainConfigParams updateDomainConfigParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDomainConfigParams;

        // create path and map variables
        String localVarPath = "/api/v1/domain-configs/{domainToUpdate}"
            .replace("{" + "domainToUpdate" + "}", localVarApiClient.escapeString(domainToUpdate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putDomainConfigValidateBeforeCall(String tenantId, String domainToUpdate, UpdateDomainConfigParams updateDomainConfigParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling putDomainConfig(Async)");
        }

        // verify the required parameter 'domainToUpdate' is set
        if (domainToUpdate == null) {
            throw new ApiException("Missing the required parameter 'domainToUpdate' when calling putDomainConfig(Async)");
        }

        // verify the required parameter 'updateDomainConfigParams' is set
        if (updateDomainConfigParams == null) {
            throw new ApiException("Missing the required parameter 'updateDomainConfigParams' when calling putDomainConfig(Async)");
        }

        return putDomainConfigCall(tenantId, domainToUpdate, updateDomainConfigParams, _callback);

    }


    private ApiResponse<GetDomainConfig200Response> putDomainConfigWithHttpInfo(String tenantId, String domainToUpdate, UpdateDomainConfigParams updateDomainConfigParams) throws ApiException {
        okhttp3.Call localVarCall = putDomainConfigValidateBeforeCall(tenantId, domainToUpdate, updateDomainConfigParams, null);
        Type localVarReturnType = new TypeToken<GetDomainConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putDomainConfigAsync(String tenantId, String domainToUpdate, UpdateDomainConfigParams updateDomainConfigParams, final ApiCallback<GetDomainConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putDomainConfigValidateBeforeCall(tenantId, domainToUpdate, updateDomainConfigParams, _callback);
        Type localVarReturnType = new TypeToken<GetDomainConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIputDomainConfigRequest {
        private final String tenantId;
        private final String domainToUpdate;
        private final UpdateDomainConfigParams updateDomainConfigParams;

        private APIputDomainConfigRequest(String tenantId, String domainToUpdate, UpdateDomainConfigParams updateDomainConfigParams) {
            this.tenantId = tenantId;
            this.domainToUpdate = domainToUpdate;
            this.updateDomainConfigParams = updateDomainConfigParams;
        }

        /**
         * Build call for putDomainConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putDomainConfigCall(tenantId, domainToUpdate, updateDomainConfigParams, _callback);
        }

        /**
         * Execute putDomainConfig request
         * @return GetDomainConfig200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public GetDomainConfig200Response execute() throws ApiException {
            ApiResponse<GetDomainConfig200Response> localVarResp = putDomainConfigWithHttpInfo(tenantId, domainToUpdate, updateDomainConfigParams);
            return localVarResp.getData();
        }

        /**
         * Execute putDomainConfig request with HTTP info returned
         * @return ApiResponse&lt;GetDomainConfig200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetDomainConfig200Response> executeWithHttpInfo() throws ApiException {
            return putDomainConfigWithHttpInfo(tenantId, domainToUpdate, updateDomainConfigParams);
        }

        /**
         * Execute putDomainConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetDomainConfig200Response> _callback) throws ApiException {
            return putDomainConfigAsync(tenantId, domainToUpdate, updateDomainConfigParams, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainToUpdate  (required)
     * @param updateDomainConfigParams  (required)
     * @return APIputDomainConfigRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIputDomainConfigRequest putDomainConfig(String tenantId, String domainToUpdate, UpdateDomainConfigParams updateDomainConfigParams) {
        return new APIputDomainConfigRequest(tenantId, domainToUpdate, updateDomainConfigParams);
    }
    private okhttp3.Call putSSOUserCall(String tenantId, String id, UpdateAPISSOUserData updateAPISSOUserData, Boolean updateComments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAPISSOUserData;

        // create path and map variables
        String localVarPath = "/api/v1/sso-users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (updateComments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateComments", updateComments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSSOUserValidateBeforeCall(String tenantId, String id, UpdateAPISSOUserData updateAPISSOUserData, Boolean updateComments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling putSSOUser(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putSSOUser(Async)");
        }

        // verify the required parameter 'updateAPISSOUserData' is set
        if (updateAPISSOUserData == null) {
            throw new ApiException("Missing the required parameter 'updateAPISSOUserData' when calling putSSOUser(Async)");
        }

        return putSSOUserCall(tenantId, id, updateAPISSOUserData, updateComments, _callback);

    }


    private ApiResponse<PutSSOUserAPIResponse> putSSOUserWithHttpInfo(String tenantId, String id, UpdateAPISSOUserData updateAPISSOUserData, Boolean updateComments) throws ApiException {
        okhttp3.Call localVarCall = putSSOUserValidateBeforeCall(tenantId, id, updateAPISSOUserData, updateComments, null);
        Type localVarReturnType = new TypeToken<PutSSOUserAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putSSOUserAsync(String tenantId, String id, UpdateAPISSOUserData updateAPISSOUserData, Boolean updateComments, final ApiCallback<PutSSOUserAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSSOUserValidateBeforeCall(tenantId, id, updateAPISSOUserData, updateComments, _callback);
        Type localVarReturnType = new TypeToken<PutSSOUserAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIputSSOUserRequest {
        private final String tenantId;
        private final String id;
        private final UpdateAPISSOUserData updateAPISSOUserData;
        private Boolean updateComments;

        private APIputSSOUserRequest(String tenantId, String id, UpdateAPISSOUserData updateAPISSOUserData) {
            this.tenantId = tenantId;
            this.id = id;
            this.updateAPISSOUserData = updateAPISSOUserData;
        }

        /**
         * Set updateComments
         * @param updateComments  (optional)
         * @return APIputSSOUserRequest
         */
        public APIputSSOUserRequest updateComments(Boolean updateComments) {
            this.updateComments = updateComments;
            return this;
        }

        /**
         * Build call for putSSOUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putSSOUserCall(tenantId, id, updateAPISSOUserData, updateComments, _callback);
        }

        /**
         * Execute putSSOUser request
         * @return PutSSOUserAPIResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public PutSSOUserAPIResponse execute() throws ApiException {
            ApiResponse<PutSSOUserAPIResponse> localVarResp = putSSOUserWithHttpInfo(tenantId, id, updateAPISSOUserData, updateComments);
            return localVarResp.getData();
        }

        /**
         * Execute putSSOUser request with HTTP info returned
         * @return ApiResponse&lt;PutSSOUserAPIResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PutSSOUserAPIResponse> executeWithHttpInfo() throws ApiException {
            return putSSOUserWithHttpInfo(tenantId, id, updateAPISSOUserData, updateComments);
        }

        /**
         * Execute putSSOUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PutSSOUserAPIResponse> _callback) throws ApiException {
            return putSSOUserAsync(tenantId, id, updateAPISSOUserData, updateComments, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @param updateAPISSOUserData  (required)
     * @return APIputSSOUserRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIputSSOUserRequest putSSOUser(String tenantId, String id, UpdateAPISSOUserData updateAPISSOUserData) {
        return new APIputSSOUserRequest(tenantId, id, updateAPISSOUserData);
    }
    private okhttp3.Call saveCommentCall(String tenantId, CreateCommentParams createCommentParams, Boolean isLive, Boolean doSpamCheck, Boolean sendEmails, Boolean populateNotifications, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCommentParams;

        // create path and map variables
        String localVarPath = "/api/v1/comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (isLive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isLive", isLive));
        }

        if (doSpamCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doSpamCheck", doSpamCheck));
        }

        if (sendEmails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendEmails", sendEmails));
        }

        if (populateNotifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("populateNotifications", populateNotifications));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCommentValidateBeforeCall(String tenantId, CreateCommentParams createCommentParams, Boolean isLive, Boolean doSpamCheck, Boolean sendEmails, Boolean populateNotifications, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling saveComment(Async)");
        }

        // verify the required parameter 'createCommentParams' is set
        if (createCommentParams == null) {
            throw new ApiException("Missing the required parameter 'createCommentParams' when calling saveComment(Async)");
        }

        return saveCommentCall(tenantId, createCommentParams, isLive, doSpamCheck, sendEmails, populateNotifications, _callback);

    }


    private ApiResponse<SaveComment200Response> saveCommentWithHttpInfo(String tenantId, CreateCommentParams createCommentParams, Boolean isLive, Boolean doSpamCheck, Boolean sendEmails, Boolean populateNotifications) throws ApiException {
        okhttp3.Call localVarCall = saveCommentValidateBeforeCall(tenantId, createCommentParams, isLive, doSpamCheck, sendEmails, populateNotifications, null);
        Type localVarReturnType = new TypeToken<SaveComment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call saveCommentAsync(String tenantId, CreateCommentParams createCommentParams, Boolean isLive, Boolean doSpamCheck, Boolean sendEmails, Boolean populateNotifications, final ApiCallback<SaveComment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCommentValidateBeforeCall(tenantId, createCommentParams, isLive, doSpamCheck, sendEmails, populateNotifications, _callback);
        Type localVarReturnType = new TypeToken<SaveComment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsaveCommentRequest {
        private final String tenantId;
        private final CreateCommentParams createCommentParams;
        private Boolean isLive;
        private Boolean doSpamCheck;
        private Boolean sendEmails;
        private Boolean populateNotifications;

        private APIsaveCommentRequest(String tenantId, CreateCommentParams createCommentParams) {
            this.tenantId = tenantId;
            this.createCommentParams = createCommentParams;
        }

        /**
         * Set isLive
         * @param isLive  (optional)
         * @return APIsaveCommentRequest
         */
        public APIsaveCommentRequest isLive(Boolean isLive) {
            this.isLive = isLive;
            return this;
        }

        /**
         * Set doSpamCheck
         * @param doSpamCheck  (optional)
         * @return APIsaveCommentRequest
         */
        public APIsaveCommentRequest doSpamCheck(Boolean doSpamCheck) {
            this.doSpamCheck = doSpamCheck;
            return this;
        }

        /**
         * Set sendEmails
         * @param sendEmails  (optional)
         * @return APIsaveCommentRequest
         */
        public APIsaveCommentRequest sendEmails(Boolean sendEmails) {
            this.sendEmails = sendEmails;
            return this;
        }

        /**
         * Set populateNotifications
         * @param populateNotifications  (optional)
         * @return APIsaveCommentRequest
         */
        public APIsaveCommentRequest populateNotifications(Boolean populateNotifications) {
            this.populateNotifications = populateNotifications;
            return this;
        }

        /**
         * Build call for saveComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return saveCommentCall(tenantId, createCommentParams, isLive, doSpamCheck, sendEmails, populateNotifications, _callback);
        }

        /**
         * Execute saveComment request
         * @return SaveComment200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public SaveComment200Response execute() throws ApiException {
            ApiResponse<SaveComment200Response> localVarResp = saveCommentWithHttpInfo(tenantId, createCommentParams, isLive, doSpamCheck, sendEmails, populateNotifications);
            return localVarResp.getData();
        }

        /**
         * Execute saveComment request with HTTP info returned
         * @return ApiResponse&lt;SaveComment200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SaveComment200Response> executeWithHttpInfo() throws ApiException {
            return saveCommentWithHttpInfo(tenantId, createCommentParams, isLive, doSpamCheck, sendEmails, populateNotifications);
        }

        /**
         * Execute saveComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SaveComment200Response> _callback) throws ApiException {
            return saveCommentAsync(tenantId, createCommentParams, isLive, doSpamCheck, sendEmails, populateNotifications, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param createCommentParams  (required)
     * @return APIsaveCommentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIsaveCommentRequest saveComment(String tenantId, CreateCommentParams createCommentParams) {
        return new APIsaveCommentRequest(tenantId, createCommentParams);
    }
    private okhttp3.Call saveCommentsBulkCall(String tenantId, List<CreateCommentParams> createCommentParams, Boolean isLive, Boolean doSpamCheck, Boolean sendEmails, Boolean populateNotifications, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCommentParams;

        // create path and map variables
        String localVarPath = "/api/v1/comments/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (isLive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isLive", isLive));
        }

        if (doSpamCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doSpamCheck", doSpamCheck));
        }

        if (sendEmails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendEmails", sendEmails));
        }

        if (populateNotifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("populateNotifications", populateNotifications));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCommentsBulkValidateBeforeCall(String tenantId, List<CreateCommentParams> createCommentParams, Boolean isLive, Boolean doSpamCheck, Boolean sendEmails, Boolean populateNotifications, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling saveCommentsBulk(Async)");
        }

        // verify the required parameter 'createCommentParams' is set
        if (createCommentParams == null) {
            throw new ApiException("Missing the required parameter 'createCommentParams' when calling saveCommentsBulk(Async)");
        }

        return saveCommentsBulkCall(tenantId, createCommentParams, isLive, doSpamCheck, sendEmails, populateNotifications, _callback);

    }


    private ApiResponse<List<SaveComment200Response>> saveCommentsBulkWithHttpInfo(String tenantId, List<CreateCommentParams> createCommentParams, Boolean isLive, Boolean doSpamCheck, Boolean sendEmails, Boolean populateNotifications) throws ApiException {
        okhttp3.Call localVarCall = saveCommentsBulkValidateBeforeCall(tenantId, createCommentParams, isLive, doSpamCheck, sendEmails, populateNotifications, null);
        Type localVarReturnType = new TypeToken<List<SaveComment200Response>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call saveCommentsBulkAsync(String tenantId, List<CreateCommentParams> createCommentParams, Boolean isLive, Boolean doSpamCheck, Boolean sendEmails, Boolean populateNotifications, final ApiCallback<List<SaveComment200Response>> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCommentsBulkValidateBeforeCall(tenantId, createCommentParams, isLive, doSpamCheck, sendEmails, populateNotifications, _callback);
        Type localVarReturnType = new TypeToken<List<SaveComment200Response>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsaveCommentsBulkRequest {
        private final String tenantId;
        private final List<CreateCommentParams> createCommentParams;
        private Boolean isLive;
        private Boolean doSpamCheck;
        private Boolean sendEmails;
        private Boolean populateNotifications;

        private APIsaveCommentsBulkRequest(String tenantId, List<CreateCommentParams> createCommentParams) {
            this.tenantId = tenantId;
            this.createCommentParams = createCommentParams;
        }

        /**
         * Set isLive
         * @param isLive  (optional)
         * @return APIsaveCommentsBulkRequest
         */
        public APIsaveCommentsBulkRequest isLive(Boolean isLive) {
            this.isLive = isLive;
            return this;
        }

        /**
         * Set doSpamCheck
         * @param doSpamCheck  (optional)
         * @return APIsaveCommentsBulkRequest
         */
        public APIsaveCommentsBulkRequest doSpamCheck(Boolean doSpamCheck) {
            this.doSpamCheck = doSpamCheck;
            return this;
        }

        /**
         * Set sendEmails
         * @param sendEmails  (optional)
         * @return APIsaveCommentsBulkRequest
         */
        public APIsaveCommentsBulkRequest sendEmails(Boolean sendEmails) {
            this.sendEmails = sendEmails;
            return this;
        }

        /**
         * Set populateNotifications
         * @param populateNotifications  (optional)
         * @return APIsaveCommentsBulkRequest
         */
        public APIsaveCommentsBulkRequest populateNotifications(Boolean populateNotifications) {
            this.populateNotifications = populateNotifications;
            return this;
        }

        /**
         * Build call for saveCommentsBulk
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return saveCommentsBulkCall(tenantId, createCommentParams, isLive, doSpamCheck, sendEmails, populateNotifications, _callback);
        }

        /**
         * Execute saveCommentsBulk request
         * @return List&lt;SaveComment200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public List<SaveComment200Response> execute() throws ApiException {
            ApiResponse<List<SaveComment200Response>> localVarResp = saveCommentsBulkWithHttpInfo(tenantId, createCommentParams, isLive, doSpamCheck, sendEmails, populateNotifications);
            return localVarResp.getData();
        }

        /**
         * Execute saveCommentsBulk request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SaveComment200Response&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SaveComment200Response>> executeWithHttpInfo() throws ApiException {
            return saveCommentsBulkWithHttpInfo(tenantId, createCommentParams, isLive, doSpamCheck, sendEmails, populateNotifications);
        }

        /**
         * Execute saveCommentsBulk request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SaveComment200Response>> _callback) throws ApiException {
            return saveCommentsBulkAsync(tenantId, createCommentParams, isLive, doSpamCheck, sendEmails, populateNotifications, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param createCommentParams  (required)
     * @return APIsaveCommentsBulkRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIsaveCommentsBulkRequest saveCommentsBulk(String tenantId, List<CreateCommentParams> createCommentParams) {
        return new APIsaveCommentsBulkRequest(tenantId, createCommentParams);
    }
    private okhttp3.Call unBlockUserFromCommentCall(String tenantId, String id, UnBlockFromCommentParams unBlockFromCommentParams, String userId, String anonUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unBlockFromCommentParams;

        // create path and map variables
        String localVarPath = "/api/v1/comments/{id}/un-block"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (anonUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anonUserId", anonUserId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unBlockUserFromCommentValidateBeforeCall(String tenantId, String id, UnBlockFromCommentParams unBlockFromCommentParams, String userId, String anonUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling unBlockUserFromComment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unBlockUserFromComment(Async)");
        }

        // verify the required parameter 'unBlockFromCommentParams' is set
        if (unBlockFromCommentParams == null) {
            throw new ApiException("Missing the required parameter 'unBlockFromCommentParams' when calling unBlockUserFromComment(Async)");
        }

        return unBlockUserFromCommentCall(tenantId, id, unBlockFromCommentParams, userId, anonUserId, _callback);

    }


    private ApiResponse<UnBlockCommentPublic200Response> unBlockUserFromCommentWithHttpInfo(String tenantId, String id, UnBlockFromCommentParams unBlockFromCommentParams, String userId, String anonUserId) throws ApiException {
        okhttp3.Call localVarCall = unBlockUserFromCommentValidateBeforeCall(tenantId, id, unBlockFromCommentParams, userId, anonUserId, null);
        Type localVarReturnType = new TypeToken<UnBlockCommentPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unBlockUserFromCommentAsync(String tenantId, String id, UnBlockFromCommentParams unBlockFromCommentParams, String userId, String anonUserId, final ApiCallback<UnBlockCommentPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = unBlockUserFromCommentValidateBeforeCall(tenantId, id, unBlockFromCommentParams, userId, anonUserId, _callback);
        Type localVarReturnType = new TypeToken<UnBlockCommentPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIunBlockUserFromCommentRequest {
        private final String tenantId;
        private final String id;
        private final UnBlockFromCommentParams unBlockFromCommentParams;
        private String userId;
        private String anonUserId;

        private APIunBlockUserFromCommentRequest(String tenantId, String id, UnBlockFromCommentParams unBlockFromCommentParams) {
            this.tenantId = tenantId;
            this.id = id;
            this.unBlockFromCommentParams = unBlockFromCommentParams;
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return APIunBlockUserFromCommentRequest
         */
        public APIunBlockUserFromCommentRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set anonUserId
         * @param anonUserId  (optional)
         * @return APIunBlockUserFromCommentRequest
         */
        public APIunBlockUserFromCommentRequest anonUserId(String anonUserId) {
            this.anonUserId = anonUserId;
            return this;
        }

        /**
         * Build call for unBlockUserFromComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unBlockUserFromCommentCall(tenantId, id, unBlockFromCommentParams, userId, anonUserId, _callback);
        }

        /**
         * Execute unBlockUserFromComment request
         * @return UnBlockCommentPublic200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public UnBlockCommentPublic200Response execute() throws ApiException {
            ApiResponse<UnBlockCommentPublic200Response> localVarResp = unBlockUserFromCommentWithHttpInfo(tenantId, id, unBlockFromCommentParams, userId, anonUserId);
            return localVarResp.getData();
        }

        /**
         * Execute unBlockUserFromComment request with HTTP info returned
         * @return ApiResponse&lt;UnBlockCommentPublic200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UnBlockCommentPublic200Response> executeWithHttpInfo() throws ApiException {
            return unBlockUserFromCommentWithHttpInfo(tenantId, id, unBlockFromCommentParams, userId, anonUserId);
        }

        /**
         * Execute unBlockUserFromComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UnBlockCommentPublic200Response> _callback) throws ApiException {
            return unBlockUserFromCommentAsync(tenantId, id, unBlockFromCommentParams, userId, anonUserId, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @param unBlockFromCommentParams  (required)
     * @return APIunBlockUserFromCommentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIunBlockUserFromCommentRequest unBlockUserFromComment(String tenantId, String id, UnBlockFromCommentParams unBlockFromCommentParams) {
        return new APIunBlockUserFromCommentRequest(tenantId, id, unBlockFromCommentParams);
    }
    private okhttp3.Call unFlagCommentCall(String tenantId, String id, String userId, String anonUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/comments/{id}/un-flag"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (anonUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anonUserId", anonUserId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unFlagCommentValidateBeforeCall(String tenantId, String id, String userId, String anonUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling unFlagComment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unFlagComment(Async)");
        }

        return unFlagCommentCall(tenantId, id, userId, anonUserId, _callback);

    }


    private ApiResponse<FlagComment200Response> unFlagCommentWithHttpInfo(String tenantId, String id, String userId, String anonUserId) throws ApiException {
        okhttp3.Call localVarCall = unFlagCommentValidateBeforeCall(tenantId, id, userId, anonUserId, null);
        Type localVarReturnType = new TypeToken<FlagComment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unFlagCommentAsync(String tenantId, String id, String userId, String anonUserId, final ApiCallback<FlagComment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = unFlagCommentValidateBeforeCall(tenantId, id, userId, anonUserId, _callback);
        Type localVarReturnType = new TypeToken<FlagComment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIunFlagCommentRequest {
        private final String tenantId;
        private final String id;
        private String userId;
        private String anonUserId;

        private APIunFlagCommentRequest(String tenantId, String id) {
            this.tenantId = tenantId;
            this.id = id;
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return APIunFlagCommentRequest
         */
        public APIunFlagCommentRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Set anonUserId
         * @param anonUserId  (optional)
         * @return APIunFlagCommentRequest
         */
        public APIunFlagCommentRequest anonUserId(String anonUserId) {
            this.anonUserId = anonUserId;
            return this;
        }

        /**
         * Build call for unFlagComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unFlagCommentCall(tenantId, id, userId, anonUserId, _callback);
        }

        /**
         * Execute unFlagComment request
         * @return FlagComment200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public FlagComment200Response execute() throws ApiException {
            ApiResponse<FlagComment200Response> localVarResp = unFlagCommentWithHttpInfo(tenantId, id, userId, anonUserId);
            return localVarResp.getData();
        }

        /**
         * Execute unFlagComment request with HTTP info returned
         * @return ApiResponse&lt;FlagComment200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FlagComment200Response> executeWithHttpInfo() throws ApiException {
            return unFlagCommentWithHttpInfo(tenantId, id, userId, anonUserId);
        }

        /**
         * Execute unFlagComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FlagComment200Response> _callback) throws ApiException {
            return unFlagCommentAsync(tenantId, id, userId, anonUserId, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @return APIunFlagCommentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIunFlagCommentRequest unFlagComment(String tenantId, String id) {
        return new APIunFlagCommentRequest(tenantId, id);
    }
    private okhttp3.Call updateCommentCall(String tenantId, String id, PickAPICommentUpdatableCommentFields body, String contextUserId, Boolean doSpamCheck, Boolean isLive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/comments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (contextUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contextUserId", contextUserId));
        }

        if (doSpamCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doSpamCheck", doSpamCheck));
        }

        if (isLive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isLive", isLive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCommentValidateBeforeCall(String tenantId, String id, PickAPICommentUpdatableCommentFields body, String contextUserId, Boolean doSpamCheck, Boolean isLive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling updateComment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateComment(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateComment(Async)");
        }

        return updateCommentCall(tenantId, id, body, contextUserId, doSpamCheck, isLive, _callback);

    }


    private ApiResponse<FlagCommentPublic200Response> updateCommentWithHttpInfo(String tenantId, String id, PickAPICommentUpdatableCommentFields body, String contextUserId, Boolean doSpamCheck, Boolean isLive) throws ApiException {
        okhttp3.Call localVarCall = updateCommentValidateBeforeCall(tenantId, id, body, contextUserId, doSpamCheck, isLive, null);
        Type localVarReturnType = new TypeToken<FlagCommentPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCommentAsync(String tenantId, String id, PickAPICommentUpdatableCommentFields body, String contextUserId, Boolean doSpamCheck, Boolean isLive, final ApiCallback<FlagCommentPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCommentValidateBeforeCall(tenantId, id, body, contextUserId, doSpamCheck, isLive, _callback);
        Type localVarReturnType = new TypeToken<FlagCommentPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateCommentRequest {
        private final String tenantId;
        private final String id;
        private final PickAPICommentUpdatableCommentFields body;
        private String contextUserId;
        private Boolean doSpamCheck;
        private Boolean isLive;

        private APIupdateCommentRequest(String tenantId, String id, PickAPICommentUpdatableCommentFields body) {
            this.tenantId = tenantId;
            this.id = id;
            this.body = body;
        }

        /**
         * Set contextUserId
         * @param contextUserId  (optional)
         * @return APIupdateCommentRequest
         */
        public APIupdateCommentRequest contextUserId(String contextUserId) {
            this.contextUserId = contextUserId;
            return this;
        }

        /**
         * Set doSpamCheck
         * @param doSpamCheck  (optional)
         * @return APIupdateCommentRequest
         */
        public APIupdateCommentRequest doSpamCheck(Boolean doSpamCheck) {
            this.doSpamCheck = doSpamCheck;
            return this;
        }

        /**
         * Set isLive
         * @param isLive  (optional)
         * @return APIupdateCommentRequest
         */
        public APIupdateCommentRequest isLive(Boolean isLive) {
            this.isLive = isLive;
            return this;
        }

        /**
         * Build call for updateComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateCommentCall(tenantId, id, body, contextUserId, doSpamCheck, isLive, _callback);
        }

        /**
         * Execute updateComment request
         * @return FlagCommentPublic200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public FlagCommentPublic200Response execute() throws ApiException {
            ApiResponse<FlagCommentPublic200Response> localVarResp = updateCommentWithHttpInfo(tenantId, id, body, contextUserId, doSpamCheck, isLive);
            return localVarResp.getData();
        }

        /**
         * Execute updateComment request with HTTP info returned
         * @return ApiResponse&lt;FlagCommentPublic200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FlagCommentPublic200Response> executeWithHttpInfo() throws ApiException {
            return updateCommentWithHttpInfo(tenantId, id, body, contextUserId, doSpamCheck, isLive);
        }

        /**
         * Execute updateComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FlagCommentPublic200Response> _callback) throws ApiException {
            return updateCommentAsync(tenantId, id, body, contextUserId, doSpamCheck, isLive, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @param body  (required)
     * @return APIupdateCommentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateCommentRequest updateComment(String tenantId, String id, PickAPICommentUpdatableCommentFields body) {
        return new APIupdateCommentRequest(tenantId, id, body);
    }
    private okhttp3.Call updateFeedPostCall(String tenantId, String id, FeedPost feedPost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = feedPost;

        // create path and map variables
        String localVarPath = "/api/v1/feed-posts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFeedPostValidateBeforeCall(String tenantId, String id, FeedPost feedPost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling updateFeedPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateFeedPost(Async)");
        }

        // verify the required parameter 'feedPost' is set
        if (feedPost == null) {
            throw new ApiException("Missing the required parameter 'feedPost' when calling updateFeedPost(Async)");
        }

        return updateFeedPostCall(tenantId, id, feedPost, _callback);

    }


    private ApiResponse<FlagCommentPublic200Response> updateFeedPostWithHttpInfo(String tenantId, String id, FeedPost feedPost) throws ApiException {
        okhttp3.Call localVarCall = updateFeedPostValidateBeforeCall(tenantId, id, feedPost, null);
        Type localVarReturnType = new TypeToken<FlagCommentPublic200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFeedPostAsync(String tenantId, String id, FeedPost feedPost, final ApiCallback<FlagCommentPublic200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFeedPostValidateBeforeCall(tenantId, id, feedPost, _callback);
        Type localVarReturnType = new TypeToken<FlagCommentPublic200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateFeedPostRequest {
        private final String tenantId;
        private final String id;
        private final FeedPost feedPost;

        private APIupdateFeedPostRequest(String tenantId, String id, FeedPost feedPost) {
            this.tenantId = tenantId;
            this.id = id;
            this.feedPost = feedPost;
        }

        /**
         * Build call for updateFeedPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateFeedPostCall(tenantId, id, feedPost, _callback);
        }

        /**
         * Execute updateFeedPost request
         * @return FlagCommentPublic200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public FlagCommentPublic200Response execute() throws ApiException {
            ApiResponse<FlagCommentPublic200Response> localVarResp = updateFeedPostWithHttpInfo(tenantId, id, feedPost);
            return localVarResp.getData();
        }

        /**
         * Execute updateFeedPost request with HTTP info returned
         * @return ApiResponse&lt;FlagCommentPublic200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FlagCommentPublic200Response> executeWithHttpInfo() throws ApiException {
            return updateFeedPostWithHttpInfo(tenantId, id, feedPost);
        }

        /**
         * Execute updateFeedPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FlagCommentPublic200Response> _callback) throws ApiException {
            return updateFeedPostAsync(tenantId, id, feedPost, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @param feedPost  (required)
     * @return APIupdateFeedPostRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateFeedPostRequest updateFeedPost(String tenantId, String id, FeedPost feedPost) {
        return new APIupdateFeedPostRequest(tenantId, id, feedPost);
    }
    private okhttp3.Call updateUserBadgeCall(String tenantId, String id, UpdateUserBadgeParams updateUserBadgeParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserBadgeParams;

        // create path and map variables
        String localVarPath = "/api/v1/user-badges/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserBadgeValidateBeforeCall(String tenantId, String id, UpdateUserBadgeParams updateUserBadgeParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling updateUserBadge(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateUserBadge(Async)");
        }

        // verify the required parameter 'updateUserBadgeParams' is set
        if (updateUserBadgeParams == null) {
            throw new ApiException("Missing the required parameter 'updateUserBadgeParams' when calling updateUserBadge(Async)");
        }

        return updateUserBadgeCall(tenantId, id, updateUserBadgeParams, _callback);

    }


    private ApiResponse<UpdateUserBadge200Response> updateUserBadgeWithHttpInfo(String tenantId, String id, UpdateUserBadgeParams updateUserBadgeParams) throws ApiException {
        okhttp3.Call localVarCall = updateUserBadgeValidateBeforeCall(tenantId, id, updateUserBadgeParams, null);
        Type localVarReturnType = new TypeToken<UpdateUserBadge200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserBadgeAsync(String tenantId, String id, UpdateUserBadgeParams updateUserBadgeParams, final ApiCallback<UpdateUserBadge200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserBadgeValidateBeforeCall(tenantId, id, updateUserBadgeParams, _callback);
        Type localVarReturnType = new TypeToken<UpdateUserBadge200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateUserBadgeRequest {
        private final String tenantId;
        private final String id;
        private final UpdateUserBadgeParams updateUserBadgeParams;

        private APIupdateUserBadgeRequest(String tenantId, String id, UpdateUserBadgeParams updateUserBadgeParams) {
            this.tenantId = tenantId;
            this.id = id;
            this.updateUserBadgeParams = updateUserBadgeParams;
        }

        /**
         * Build call for updateUserBadge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateUserBadgeCall(tenantId, id, updateUserBadgeParams, _callback);
        }

        /**
         * Execute updateUserBadge request
         * @return UpdateUserBadge200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public UpdateUserBadge200Response execute() throws ApiException {
            ApiResponse<UpdateUserBadge200Response> localVarResp = updateUserBadgeWithHttpInfo(tenantId, id, updateUserBadgeParams);
            return localVarResp.getData();
        }

        /**
         * Execute updateUserBadge request with HTTP info returned
         * @return ApiResponse&lt;UpdateUserBadge200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateUserBadge200Response> executeWithHttpInfo() throws ApiException {
            return updateUserBadgeWithHttpInfo(tenantId, id, updateUserBadgeParams);
        }

        /**
         * Execute updateUserBadge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateUserBadge200Response> _callback) throws ApiException {
            return updateUserBadgeAsync(tenantId, id, updateUserBadgeParams, _callback);
        }
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param id  (required)
     * @param updateUserBadgeParams  (required)
     * @return APIupdateUserBadgeRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateUserBadgeRequest updateUserBadge(String tenantId, String id, UpdateUserBadgeParams updateUserBadgeParams) {
        return new APIupdateUserBadgeRequest(tenantId, id, updateUserBadgeParams);
    }
}
