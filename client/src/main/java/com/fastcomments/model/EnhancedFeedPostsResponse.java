/*
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fastcomments.model;

import java.util.Objects;
import com.fastcomments.model.APIStatus;
import com.fastcomments.model.FeedPost;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.fastcomments.invoker.JSON;

/**
 * EnhancedFeedPostsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class EnhancedFeedPostsResponse {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private APIStatus status;

  public static final String SERIALIZED_NAME_FEED_POSTS = "feedPosts";
  @SerializedName(SERIALIZED_NAME_FEED_POSTS)
  @javax.annotation.Nonnull
  private List<FeedPost> feedPosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_MY_REACTS = "myReacts";
  @SerializedName(SERIALIZED_NAME_MY_REACTS)
  @javax.annotation.Nullable
  private Map<String, Map<String, Boolean>> myReacts = new HashMap<>();

  public EnhancedFeedPostsResponse() {
  }

  public EnhancedFeedPostsResponse status(@javax.annotation.Nonnull APIStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public APIStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull APIStatus status) {
    this.status = status;
  }


  public EnhancedFeedPostsResponse feedPosts(@javax.annotation.Nonnull List<FeedPost> feedPosts) {
    this.feedPosts = feedPosts;
    return this;
  }

  public EnhancedFeedPostsResponse addFeedPostsItem(FeedPost feedPostsItem) {
    if (this.feedPosts == null) {
      this.feedPosts = new ArrayList<>();
    }
    this.feedPosts.add(feedPostsItem);
    return this;
  }

  /**
   * Get feedPosts
   * @return feedPosts
   */
  @javax.annotation.Nonnull
  public List<FeedPost> getFeedPosts() {
    return feedPosts;
  }

  public void setFeedPosts(@javax.annotation.Nonnull List<FeedPost> feedPosts) {
    this.feedPosts = feedPosts;
  }


  public EnhancedFeedPostsResponse myReacts(@javax.annotation.Nullable Map<String, Map<String, Boolean>> myReacts) {
    this.myReacts = myReacts;
    return this;
  }

  public EnhancedFeedPostsResponse putMyReactsItem(String key, Map<String, Boolean> myReactsItem) {
    if (this.myReacts == null) {
      this.myReacts = new HashMap<>();
    }
    this.myReacts.put(key, myReactsItem);
    return this;
  }

  /**
   * Get myReacts
   * @return myReacts
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, Boolean>> getMyReacts() {
    return myReacts;
  }

  public void setMyReacts(@javax.annotation.Nullable Map<String, Map<String, Boolean>> myReacts) {
    this.myReacts = myReacts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnhancedFeedPostsResponse enhancedFeedPostsResponse = (EnhancedFeedPostsResponse) o;
    return Objects.equals(this.status, enhancedFeedPostsResponse.status) &&
        Objects.equals(this.feedPosts, enhancedFeedPostsResponse.feedPosts) &&
        Objects.equals(this.myReacts, enhancedFeedPostsResponse.myReacts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, feedPosts, myReacts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnhancedFeedPostsResponse {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    feedPosts: ").append(toIndentedString(feedPosts)).append("\n");
    sb.append("    myReacts: ").append(toIndentedString(myReacts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("feedPosts");
    openapiFields.add("myReacts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("feedPosts");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnhancedFeedPostsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnhancedFeedPostsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnhancedFeedPostsResponse is not found in the empty JSON string", EnhancedFeedPostsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnhancedFeedPostsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnhancedFeedPostsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnhancedFeedPostsResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `status`
      APIStatus.validateJsonElement(jsonObj.get("status"));
      // ensure the json data is an array
      if (!jsonObj.get("feedPosts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedPosts` to be an array in the JSON string but got `%s`", jsonObj.get("feedPosts").toString()));
      }

      JsonArray jsonArrayfeedPosts = jsonObj.getAsJsonArray("feedPosts");
      // validate the required field `feedPosts` (array)
      for (int i = 0; i < jsonArrayfeedPosts.size(); i++) {
        FeedPost.validateJsonElement(jsonArrayfeedPosts.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnhancedFeedPostsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnhancedFeedPostsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnhancedFeedPostsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnhancedFeedPostsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EnhancedFeedPostsResponse>() {
           @Override
           public void write(JsonWriter out, EnhancedFeedPostsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnhancedFeedPostsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnhancedFeedPostsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnhancedFeedPostsResponse
   * @throws IOException if the JSON string is invalid with respect to EnhancedFeedPostsResponse
   */
  public static EnhancedFeedPostsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnhancedFeedPostsResponse.class);
  }

  /**
   * Convert an instance of EnhancedFeedPostsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

