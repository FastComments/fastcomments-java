/*
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fastcomments.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.fastcomments.invoker.JSON;

/**
 * From T, pick a set of properties whose keys are in the union K
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-24T23:58:52.285256603-07:00[America/Los_Angeles]", comments = "Generator version: 7.11.0")
public class PickTenantAuditLogTenantAuditLogKeys {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nullable
  private String url;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private String userId;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  @javax.annotation.Nonnull
  private String resourceName;

  /**
   * Gets or Sets crudType
   */
  @JsonAdapter(CrudTypeEnum.Adapter.class)
  public enum CrudTypeEnum {
    C("c"),
    
    R("r"),
    
    U("u"),
    
    D("d"),
    
    LOGIN("login");

    private String value;

    CrudTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CrudTypeEnum fromValue(String value) {
      for (CrudTypeEnum b : CrudTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CrudTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CrudTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CrudTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CrudTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CrudTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CRUD_TYPE = "crudType";
  @SerializedName(SERIALIZED_NAME_CRUD_TYPE)
  @javax.annotation.Nonnull
  private CrudTypeEnum crudType;

  /**
   * Gets or Sets from
   */
  @JsonAdapter(FromEnum.Adapter.class)
  public enum FromEnum {
    UI("ui"),
    
    API("api"),
    
    CRON("cron");

    private String value;

    FromEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FromEnum fromValue(String value) {
      for (FromEnum b : FromEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FromEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FromEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FromEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FromEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FromEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nullable
  private FromEnum from;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  @javax.annotation.Nullable
  private String ip;

  public static final String SERIALIZED_NAME_WHEN = "when";
  @SerializedName(SERIALIZED_NAME_WHEN)
  @javax.annotation.Nullable
  private OffsetDateTime when;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_SERVER_START_DATE = "serverStartDate";
  @SerializedName(SERIALIZED_NAME_SERVER_START_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime serverStartDate;

  public static final String SERIALIZED_NAME_OBJECT_DETAILS = "objectDetails";
  @SerializedName(SERIALIZED_NAME_OBJECT_DETAILS)
  @javax.annotation.Nullable
  private Map<String, Object> objectDetails = new HashMap<>();

  public PickTenantAuditLogTenantAuditLogKeys() {
  }

  public PickTenantAuditLogTenantAuditLogKeys id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public PickTenantAuditLogTenantAuditLogKeys url(@javax.annotation.Nullable String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }


  public PickTenantAuditLogTenantAuditLogKeys userId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }


  public PickTenantAuditLogTenantAuditLogKeys username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }


  public PickTenantAuditLogTenantAuditLogKeys resourceName(@javax.annotation.Nonnull String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * Get resourceName
   * @return resourceName
   */
  @javax.annotation.Nonnull
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(@javax.annotation.Nonnull String resourceName) {
    this.resourceName = resourceName;
  }


  public PickTenantAuditLogTenantAuditLogKeys crudType(@javax.annotation.Nonnull CrudTypeEnum crudType) {
    this.crudType = crudType;
    return this;
  }

  /**
   * Get crudType
   * @return crudType
   */
  @javax.annotation.Nonnull
  public CrudTypeEnum getCrudType() {
    return crudType;
  }

  public void setCrudType(@javax.annotation.Nonnull CrudTypeEnum crudType) {
    this.crudType = crudType;
  }


  public PickTenantAuditLogTenantAuditLogKeys from(@javax.annotation.Nullable FromEnum from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public FromEnum getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nullable FromEnum from) {
    this.from = from;
  }


  public PickTenantAuditLogTenantAuditLogKeys ip(@javax.annotation.Nullable String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Get ip
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(@javax.annotation.Nullable String ip) {
    this.ip = ip;
  }


  public PickTenantAuditLogTenantAuditLogKeys when(@javax.annotation.Nullable OffsetDateTime when) {
    this.when = when;
    return this;
  }

  /**
   * Get when
   * @return when
   */
  @javax.annotation.Nullable
  public OffsetDateTime getWhen() {
    return when;
  }

  public void setWhen(@javax.annotation.Nullable OffsetDateTime when) {
    this.when = when;
  }


  public PickTenantAuditLogTenantAuditLogKeys description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public PickTenantAuditLogTenantAuditLogKeys serverStartDate(@javax.annotation.Nullable OffsetDateTime serverStartDate) {
    this.serverStartDate = serverStartDate;
    return this;
  }

  /**
   * Get serverStartDate
   * @return serverStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getServerStartDate() {
    return serverStartDate;
  }

  public void setServerStartDate(@javax.annotation.Nullable OffsetDateTime serverStartDate) {
    this.serverStartDate = serverStartDate;
  }


  public PickTenantAuditLogTenantAuditLogKeys objectDetails(@javax.annotation.Nullable Map<String, Object> objectDetails) {
    this.objectDetails = objectDetails;
    return this;
  }

  public PickTenantAuditLogTenantAuditLogKeys putObjectDetailsItem(String key, Object objectDetailsItem) {
    if (this.objectDetails == null) {
      this.objectDetails = new HashMap<>();
    }
    this.objectDetails.put(key, objectDetailsItem);
    return this;
  }

  /**
   * Construct a type with a set of properties K of type T
   * @return objectDetails
   */
  @javax.annotation.Nullable
  public Map<String, Object> getObjectDetails() {
    return objectDetails;
  }

  public void setObjectDetails(@javax.annotation.Nullable Map<String, Object> objectDetails) {
    this.objectDetails = objectDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PickTenantAuditLogTenantAuditLogKeys pickTenantAuditLogTenantAuditLogKeys = (PickTenantAuditLogTenantAuditLogKeys) o;
    return Objects.equals(this.id, pickTenantAuditLogTenantAuditLogKeys.id) &&
        Objects.equals(this.url, pickTenantAuditLogTenantAuditLogKeys.url) &&
        Objects.equals(this.userId, pickTenantAuditLogTenantAuditLogKeys.userId) &&
        Objects.equals(this.username, pickTenantAuditLogTenantAuditLogKeys.username) &&
        Objects.equals(this.resourceName, pickTenantAuditLogTenantAuditLogKeys.resourceName) &&
        Objects.equals(this.crudType, pickTenantAuditLogTenantAuditLogKeys.crudType) &&
        Objects.equals(this.from, pickTenantAuditLogTenantAuditLogKeys.from) &&
        Objects.equals(this.ip, pickTenantAuditLogTenantAuditLogKeys.ip) &&
        Objects.equals(this.when, pickTenantAuditLogTenantAuditLogKeys.when) &&
        Objects.equals(this.description, pickTenantAuditLogTenantAuditLogKeys.description) &&
        Objects.equals(this.serverStartDate, pickTenantAuditLogTenantAuditLogKeys.serverStartDate) &&
        Objects.equals(this.objectDetails, pickTenantAuditLogTenantAuditLogKeys.objectDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, url, userId, username, resourceName, crudType, from, ip, when, description, serverStartDate, objectDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PickTenantAuditLogTenantAuditLogKeys {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    crudType: ").append(toIndentedString(crudType)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    when: ").append(toIndentedString(when)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    serverStartDate: ").append(toIndentedString(serverStartDate)).append("\n");
    sb.append("    objectDetails: ").append(toIndentedString(objectDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("url");
    openapiFields.add("userId");
    openapiFields.add("username");
    openapiFields.add("resourceName");
    openapiFields.add("crudType");
    openapiFields.add("from");
    openapiFields.add("ip");
    openapiFields.add("when");
    openapiFields.add("description");
    openapiFields.add("serverStartDate");
    openapiFields.add("objectDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_id");
    openapiRequiredFields.add("resourceName");
    openapiRequiredFields.add("crudType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PickTenantAuditLogTenantAuditLogKeys
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PickTenantAuditLogTenantAuditLogKeys.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PickTenantAuditLogTenantAuditLogKeys is not found in the empty JSON string", PickTenantAuditLogTenantAuditLogKeys.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PickTenantAuditLogTenantAuditLogKeys.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PickTenantAuditLogTenantAuditLogKeys` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PickTenantAuditLogTenantAuditLogKeys.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if (!jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
      if (!jsonObj.get("crudType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crudType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crudType").toString()));
      }
      // validate the required field `crudType`
      CrudTypeEnum.validateJsonElement(jsonObj.get("crudType"));
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      // validate the optional field `from`
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
        FromEnum.validateJsonElement(jsonObj.get("from"));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PickTenantAuditLogTenantAuditLogKeys.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PickTenantAuditLogTenantAuditLogKeys' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PickTenantAuditLogTenantAuditLogKeys> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PickTenantAuditLogTenantAuditLogKeys.class));

       return (TypeAdapter<T>) new TypeAdapter<PickTenantAuditLogTenantAuditLogKeys>() {
           @Override
           public void write(JsonWriter out, PickTenantAuditLogTenantAuditLogKeys value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PickTenantAuditLogTenantAuditLogKeys read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PickTenantAuditLogTenantAuditLogKeys given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PickTenantAuditLogTenantAuditLogKeys
   * @throws IOException if the JSON string is invalid with respect to PickTenantAuditLogTenantAuditLogKeys
   */
  public static PickTenantAuditLogTenantAuditLogKeys fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PickTenantAuditLogTenantAuditLogKeys.class);
  }

  /**
   * Convert an instance of PickTenantAuditLogTenantAuditLogKeys to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

