/*
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fastcomments.model;

import java.util.Objects;
import com.fastcomments.model.MetaItem;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.fastcomments.invoker.JSON;

/**
 * QuestionResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class QuestionResult {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  @javax.annotation.Nonnull
  private String tenantId;

  public static final String SERIALIZED_NAME_URL_ID = "urlId";
  @SerializedName(SERIALIZED_NAME_URL_ID)
  @javax.annotation.Nonnull
  private String urlId;

  public static final String SERIALIZED_NAME_ANON_USER_ID = "anonUserId";
  @SerializedName(SERIALIZED_NAME_ANON_USER_ID)
  @javax.annotation.Nonnull
  private String anonUserId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private String userId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nonnull
  private Integer value;

  public static final String SERIALIZED_NAME_COMMENT_ID = "commentId";
  @SerializedName(SERIALIZED_NAME_COMMENT_ID)
  @javax.annotation.Nullable
  private String commentId;

  public static final String SERIALIZED_NAME_QUESTION_ID = "questionId";
  @SerializedName(SERIALIZED_NAME_QUESTION_ID)
  @javax.annotation.Nonnull
  private String questionId;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  @javax.annotation.Nullable
  private List<MetaItem> meta;

  public static final String SERIALIZED_NAME_IP_HASH = "ipHash";
  @SerializedName(SERIALIZED_NAME_IP_HASH)
  @javax.annotation.Nonnull
  private String ipHash;

  public QuestionResult() {
  }

  public QuestionResult id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public QuestionResult tenantId(@javax.annotation.Nonnull String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nonnull
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(@javax.annotation.Nonnull String tenantId) {
    this.tenantId = tenantId;
  }


  public QuestionResult urlId(@javax.annotation.Nonnull String urlId) {
    this.urlId = urlId;
    return this;
  }

  /**
   * Get urlId
   * @return urlId
   */
  @javax.annotation.Nonnull
  public String getUrlId() {
    return urlId;
  }

  public void setUrlId(@javax.annotation.Nonnull String urlId) {
    this.urlId = urlId;
  }


  public QuestionResult anonUserId(@javax.annotation.Nonnull String anonUserId) {
    this.anonUserId = anonUserId;
    return this;
  }

  /**
   * Get anonUserId
   * @return anonUserId
   */
  @javax.annotation.Nonnull
  public String getAnonUserId() {
    return anonUserId;
  }

  public void setAnonUserId(@javax.annotation.Nonnull String anonUserId) {
    this.anonUserId = anonUserId;
  }


  public QuestionResult userId(@javax.annotation.Nonnull String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull String userId) {
    this.userId = userId;
  }


  public QuestionResult createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public QuestionResult value(@javax.annotation.Nonnull Integer value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nonnull
  public Integer getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nonnull Integer value) {
    this.value = value;
  }


  public QuestionResult commentId(@javax.annotation.Nullable String commentId) {
    this.commentId = commentId;
    return this;
  }

  /**
   * Get commentId
   * @return commentId
   */
  @javax.annotation.Nullable
  public String getCommentId() {
    return commentId;
  }

  public void setCommentId(@javax.annotation.Nullable String commentId) {
    this.commentId = commentId;
  }


  public QuestionResult questionId(@javax.annotation.Nonnull String questionId) {
    this.questionId = questionId;
    return this;
  }

  /**
   * Get questionId
   * @return questionId
   */
  @javax.annotation.Nonnull
  public String getQuestionId() {
    return questionId;
  }

  public void setQuestionId(@javax.annotation.Nonnull String questionId) {
    this.questionId = questionId;
  }


  public QuestionResult meta(@javax.annotation.Nullable List<MetaItem> meta) {
    this.meta = meta;
    return this;
  }

  public QuestionResult addMetaItem(MetaItem metaItem) {
    if (this.meta == null) {
      this.meta = new ArrayList<>();
    }
    this.meta.add(metaItem);
    return this;
  }

  /**
   * Get meta
   * @return meta
   */
  @javax.annotation.Nullable
  public List<MetaItem> getMeta() {
    return meta;
  }

  public void setMeta(@javax.annotation.Nullable List<MetaItem> meta) {
    this.meta = meta;
  }


  public QuestionResult ipHash(@javax.annotation.Nonnull String ipHash) {
    this.ipHash = ipHash;
    return this;
  }

  /**
   * Get ipHash
   * @return ipHash
   */
  @javax.annotation.Nonnull
  public String getIpHash() {
    return ipHash;
  }

  public void setIpHash(@javax.annotation.Nonnull String ipHash) {
    this.ipHash = ipHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuestionResult questionResult = (QuestionResult) o;
    return Objects.equals(this.id, questionResult.id) &&
        Objects.equals(this.tenantId, questionResult.tenantId) &&
        Objects.equals(this.urlId, questionResult.urlId) &&
        Objects.equals(this.anonUserId, questionResult.anonUserId) &&
        Objects.equals(this.userId, questionResult.userId) &&
        Objects.equals(this.createdAt, questionResult.createdAt) &&
        Objects.equals(this.value, questionResult.value) &&
        Objects.equals(this.commentId, questionResult.commentId) &&
        Objects.equals(this.questionId, questionResult.questionId) &&
        Objects.equals(this.meta, questionResult.meta) &&
        Objects.equals(this.ipHash, questionResult.ipHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, tenantId, urlId, anonUserId, userId, createdAt, value, commentId, questionId, meta, ipHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuestionResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    urlId: ").append(toIndentedString(urlId)).append("\n");
    sb.append("    anonUserId: ").append(toIndentedString(anonUserId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    commentId: ").append(toIndentedString(commentId)).append("\n");
    sb.append("    questionId: ").append(toIndentedString(questionId)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    ipHash: ").append(toIndentedString(ipHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("tenantId");
    openapiFields.add("urlId");
    openapiFields.add("anonUserId");
    openapiFields.add("userId");
    openapiFields.add("createdAt");
    openapiFields.add("value");
    openapiFields.add("commentId");
    openapiFields.add("questionId");
    openapiFields.add("meta");
    openapiFields.add("ipHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_id");
    openapiRequiredFields.add("tenantId");
    openapiRequiredFields.add("urlId");
    openapiRequiredFields.add("anonUserId");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("value");
    openapiRequiredFields.add("questionId");
    openapiRequiredFields.add("ipHash");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuestionResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuestionResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuestionResult is not found in the empty JSON string", QuestionResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuestionResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuestionResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QuestionResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if (!jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if (!jsonObj.get("urlId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlId").toString()));
      }
      if (!jsonObj.get("anonUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anonUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anonUserId").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("commentId") != null && !jsonObj.get("commentId").isJsonNull()) && !jsonObj.get("commentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commentId").toString()));
      }
      if (!jsonObj.get("questionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `questionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("questionId").toString()));
      }
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        JsonArray jsonArraymeta = jsonObj.getAsJsonArray("meta");
        if (jsonArraymeta != null) {
          // ensure the json data is an array
          if (!jsonObj.get("meta").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `meta` to be an array in the JSON string but got `%s`", jsonObj.get("meta").toString()));
          }

          // validate the optional field `meta` (array)
          for (int i = 0; i < jsonArraymeta.size(); i++) {
            MetaItem.validateJsonElement(jsonArraymeta.get(i));
          };
        }
      }
      if (!jsonObj.get("ipHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipHash").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuestionResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuestionResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuestionResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuestionResult.class));

       return (TypeAdapter<T>) new TypeAdapter<QuestionResult>() {
           @Override
           public void write(JsonWriter out, QuestionResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuestionResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuestionResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuestionResult
   * @throws IOException if the JSON string is invalid with respect to QuestionResult
   */
  public static QuestionResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuestionResult.class);
  }

  /**
   * Convert an instance of QuestionResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

