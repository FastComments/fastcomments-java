/*
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fastcomments.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.fastcomments.invoker.JSON;

/**
 * APICommentPublicComment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-13T15:35:31.564388153-08:00[America/Los_Angeles]", comments = "Generator version: 7.11.0")
public class APICommentPublicComment {
  public static final String SERIALIZED_NAME_IS_UNREAD = "isUnread";
  @SerializedName(SERIALIZED_NAME_IS_UNREAD)
  @javax.annotation.Nullable
  private Boolean isUnread;

  public static final String SERIALIZED_NAME_MY_VOTE_ID = "myVoteId";
  @SerializedName(SERIALIZED_NAME_MY_VOTE_ID)
  @javax.annotation.Nullable
  private String myVoteId;

  public static final String SERIALIZED_NAME_IS_VOTED_DOWN = "isVotedDown";
  @SerializedName(SERIALIZED_NAME_IS_VOTED_DOWN)
  @javax.annotation.Nullable
  private Boolean isVotedDown;

  public static final String SERIALIZED_NAME_IS_VOTED_UP = "isVotedUp";
  @SerializedName(SERIALIZED_NAME_IS_VOTED_UP)
  @javax.annotation.Nullable
  private Boolean isVotedUp;

  public static final String SERIALIZED_NAME_HAS_CHILDREN = "hasChildren";
  @SerializedName(SERIALIZED_NAME_HAS_CHILDREN)
  @javax.annotation.Nullable
  private Boolean hasChildren;

  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  @javax.annotation.Nullable
  private List<Object> children = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_FLAGGED = "isFlagged";
  @SerializedName(SERIALIZED_NAME_IS_FLAGGED)
  @javax.annotation.Nullable
  private Boolean isFlagged;

  public static final String SERIALIZED_NAME_IS_BLOCKED = "isBlocked";
  @SerializedName(SERIALIZED_NAME_IS_BLOCKED)
  @javax.annotation.Nullable
  private Boolean isBlocked;

  public APICommentPublicComment() {
  }

  public APICommentPublicComment isUnread(@javax.annotation.Nullable Boolean isUnread) {
    this.isUnread = isUnread;
    return this;
  }

  /**
   * Get isUnread
   * @return isUnread
   */
  @javax.annotation.Nullable
  public Boolean getIsUnread() {
    return isUnread;
  }

  public void setIsUnread(@javax.annotation.Nullable Boolean isUnread) {
    this.isUnread = isUnread;
  }


  public APICommentPublicComment myVoteId(@javax.annotation.Nullable String myVoteId) {
    this.myVoteId = myVoteId;
    return this;
  }

  /**
   * Get myVoteId
   * @return myVoteId
   */
  @javax.annotation.Nullable
  public String getMyVoteId() {
    return myVoteId;
  }

  public void setMyVoteId(@javax.annotation.Nullable String myVoteId) {
    this.myVoteId = myVoteId;
  }


  public APICommentPublicComment isVotedDown(@javax.annotation.Nullable Boolean isVotedDown) {
    this.isVotedDown = isVotedDown;
    return this;
  }

  /**
   * Get isVotedDown
   * @return isVotedDown
   */
  @javax.annotation.Nullable
  public Boolean getIsVotedDown() {
    return isVotedDown;
  }

  public void setIsVotedDown(@javax.annotation.Nullable Boolean isVotedDown) {
    this.isVotedDown = isVotedDown;
  }


  public APICommentPublicComment isVotedUp(@javax.annotation.Nullable Boolean isVotedUp) {
    this.isVotedUp = isVotedUp;
    return this;
  }

  /**
   * Get isVotedUp
   * @return isVotedUp
   */
  @javax.annotation.Nullable
  public Boolean getIsVotedUp() {
    return isVotedUp;
  }

  public void setIsVotedUp(@javax.annotation.Nullable Boolean isVotedUp) {
    this.isVotedUp = isVotedUp;
  }


  public APICommentPublicComment hasChildren(@javax.annotation.Nullable Boolean hasChildren) {
    this.hasChildren = hasChildren;
    return this;
  }

  /**
   * Get hasChildren
   * @return hasChildren
   */
  @javax.annotation.Nullable
  public Boolean getHasChildren() {
    return hasChildren;
  }

  public void setHasChildren(@javax.annotation.Nullable Boolean hasChildren) {
    this.hasChildren = hasChildren;
  }


  public APICommentPublicComment children(@javax.annotation.Nullable List<Object> children) {
    this.children = children;
    return this;
  }

  public APICommentPublicComment addChildrenItem(Object childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

  /**
   * Get children
   * @return children
   */
  @javax.annotation.Nullable
  public List<Object> getChildren() {
    return children;
  }

  public void setChildren(@javax.annotation.Nullable List<Object> children) {
    this.children = children;
  }


  public APICommentPublicComment isFlagged(@javax.annotation.Nullable Boolean isFlagged) {
    this.isFlagged = isFlagged;
    return this;
  }

  /**
   * Get isFlagged
   * @return isFlagged
   */
  @javax.annotation.Nullable
  public Boolean getIsFlagged() {
    return isFlagged;
  }

  public void setIsFlagged(@javax.annotation.Nullable Boolean isFlagged) {
    this.isFlagged = isFlagged;
  }


  public APICommentPublicComment isBlocked(@javax.annotation.Nullable Boolean isBlocked) {
    this.isBlocked = isBlocked;
    return this;
  }

  /**
   * Get isBlocked
   * @return isBlocked
   */
  @javax.annotation.Nullable
  public Boolean getIsBlocked() {
    return isBlocked;
  }

  public void setIsBlocked(@javax.annotation.Nullable Boolean isBlocked) {
    this.isBlocked = isBlocked;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APICommentPublicComment apICommentPublicComment = (APICommentPublicComment) o;
    return Objects.equals(this.isUnread, apICommentPublicComment.isUnread) &&
        Objects.equals(this.myVoteId, apICommentPublicComment.myVoteId) &&
        Objects.equals(this.isVotedDown, apICommentPublicComment.isVotedDown) &&
        Objects.equals(this.isVotedUp, apICommentPublicComment.isVotedUp) &&
        Objects.equals(this.hasChildren, apICommentPublicComment.hasChildren) &&
        Objects.equals(this.children, apICommentPublicComment.children) &&
        Objects.equals(this.isFlagged, apICommentPublicComment.isFlagged) &&
        Objects.equals(this.isBlocked, apICommentPublicComment.isBlocked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isUnread, myVoteId, isVotedDown, isVotedUp, hasChildren, children, isFlagged, isBlocked);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APICommentPublicComment {\n");
    sb.append("    isUnread: ").append(toIndentedString(isUnread)).append("\n");
    sb.append("    myVoteId: ").append(toIndentedString(myVoteId)).append("\n");
    sb.append("    isVotedDown: ").append(toIndentedString(isVotedDown)).append("\n");
    sb.append("    isVotedUp: ").append(toIndentedString(isVotedUp)).append("\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    isFlagged: ").append(toIndentedString(isFlagged)).append("\n");
    sb.append("    isBlocked: ").append(toIndentedString(isBlocked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isUnread");
    openapiFields.add("myVoteId");
    openapiFields.add("isVotedDown");
    openapiFields.add("isVotedUp");
    openapiFields.add("hasChildren");
    openapiFields.add("children");
    openapiFields.add("isFlagged");
    openapiFields.add("isBlocked");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APICommentPublicComment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APICommentPublicComment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APICommentPublicComment is not found in the empty JSON string", APICommentPublicComment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APICommentPublicComment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APICommentPublicComment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("myVoteId") != null && !jsonObj.get("myVoteId").isJsonNull()) && !jsonObj.get("myVoteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `myVoteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("myVoteId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull() && !jsonObj.get("children").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `children` to be an array in the JSON string but got `%s`", jsonObj.get("children").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APICommentPublicComment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APICommentPublicComment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APICommentPublicComment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APICommentPublicComment.class));

       return (TypeAdapter<T>) new TypeAdapter<APICommentPublicComment>() {
           @Override
           public void write(JsonWriter out, APICommentPublicComment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APICommentPublicComment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APICommentPublicComment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APICommentPublicComment
   * @throws IOException if the JSON string is invalid with respect to APICommentPublicComment
   */
  public static APICommentPublicComment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APICommentPublicComment.class);
  }

  /**
   * Convert an instance of APICommentPublicComment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

