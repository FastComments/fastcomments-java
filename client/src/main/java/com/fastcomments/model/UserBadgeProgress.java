/*
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fastcomments.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.fastcomments.invoker.JSON;

/**
 * UserBadgeProgress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class UserBadgeProgress {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  @javax.annotation.Nonnull
  private String tenantId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private String userId;

  public static final String SERIALIZED_NAME_FIRST_COMMENT_ID = "firstCommentId";
  @SerializedName(SERIALIZED_NAME_FIRST_COMMENT_ID)
  @javax.annotation.Nonnull
  private String firstCommentId;

  public static final String SERIALIZED_NAME_FIRST_COMMENT_DATE = "firstCommentDate";
  @SerializedName(SERIALIZED_NAME_FIRST_COMMENT_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime firstCommentDate;

  public static final String SERIALIZED_NAME_AUTO_TRUST_FACTOR = "autoTrustFactor";
  @SerializedName(SERIALIZED_NAME_AUTO_TRUST_FACTOR)
  @javax.annotation.Nullable
  private Double autoTrustFactor;

  public static final String SERIALIZED_NAME_MANUAL_TRUST_FACTOR = "manualTrustFactor";
  @SerializedName(SERIALIZED_NAME_MANUAL_TRUST_FACTOR)
  @javax.annotation.Nullable
  private Double manualTrustFactor;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  @javax.annotation.Nonnull
  private Map<String, Double> progress = new HashMap<>();

  public UserBadgeProgress() {
  }

  public UserBadgeProgress id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public UserBadgeProgress tenantId(@javax.annotation.Nonnull String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nonnull
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(@javax.annotation.Nonnull String tenantId) {
    this.tenantId = tenantId;
  }


  public UserBadgeProgress userId(@javax.annotation.Nonnull String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull String userId) {
    this.userId = userId;
  }


  public UserBadgeProgress firstCommentId(@javax.annotation.Nonnull String firstCommentId) {
    this.firstCommentId = firstCommentId;
    return this;
  }

  /**
   * Get firstCommentId
   * @return firstCommentId
   */
  @javax.annotation.Nonnull
  public String getFirstCommentId() {
    return firstCommentId;
  }

  public void setFirstCommentId(@javax.annotation.Nonnull String firstCommentId) {
    this.firstCommentId = firstCommentId;
  }


  public UserBadgeProgress firstCommentDate(@javax.annotation.Nonnull OffsetDateTime firstCommentDate) {
    this.firstCommentDate = firstCommentDate;
    return this;
  }

  /**
   * Get firstCommentDate
   * @return firstCommentDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getFirstCommentDate() {
    return firstCommentDate;
  }

  public void setFirstCommentDate(@javax.annotation.Nonnull OffsetDateTime firstCommentDate) {
    this.firstCommentDate = firstCommentDate;
  }


  public UserBadgeProgress autoTrustFactor(@javax.annotation.Nullable Double autoTrustFactor) {
    this.autoTrustFactor = autoTrustFactor;
    return this;
  }

  /**
   * Get autoTrustFactor
   * @return autoTrustFactor
   */
  @javax.annotation.Nullable
  public Double getAutoTrustFactor() {
    return autoTrustFactor;
  }

  public void setAutoTrustFactor(@javax.annotation.Nullable Double autoTrustFactor) {
    this.autoTrustFactor = autoTrustFactor;
  }


  public UserBadgeProgress manualTrustFactor(@javax.annotation.Nullable Double manualTrustFactor) {
    this.manualTrustFactor = manualTrustFactor;
    return this;
  }

  /**
   * Get manualTrustFactor
   * @return manualTrustFactor
   */
  @javax.annotation.Nullable
  public Double getManualTrustFactor() {
    return manualTrustFactor;
  }

  public void setManualTrustFactor(@javax.annotation.Nullable Double manualTrustFactor) {
    this.manualTrustFactor = manualTrustFactor;
  }


  public UserBadgeProgress progress(@javax.annotation.Nonnull Map<String, Double> progress) {
    this.progress = progress;
    return this;
  }

  public UserBadgeProgress putProgressItem(String key, Double progressItem) {
    if (this.progress == null) {
      this.progress = new HashMap<>();
    }
    this.progress.put(key, progressItem);
    return this;
  }

  /**
   * Construct a type with a set of properties K of type T
   * @return progress
   */
  @javax.annotation.Nonnull
  public Map<String, Double> getProgress() {
    return progress;
  }

  public void setProgress(@javax.annotation.Nonnull Map<String, Double> progress) {
    this.progress = progress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserBadgeProgress userBadgeProgress = (UserBadgeProgress) o;
    return Objects.equals(this.id, userBadgeProgress.id) &&
        Objects.equals(this.tenantId, userBadgeProgress.tenantId) &&
        Objects.equals(this.userId, userBadgeProgress.userId) &&
        Objects.equals(this.firstCommentId, userBadgeProgress.firstCommentId) &&
        Objects.equals(this.firstCommentDate, userBadgeProgress.firstCommentDate) &&
        Objects.equals(this.autoTrustFactor, userBadgeProgress.autoTrustFactor) &&
        Objects.equals(this.manualTrustFactor, userBadgeProgress.manualTrustFactor) &&
        Objects.equals(this.progress, userBadgeProgress.progress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, tenantId, userId, firstCommentId, firstCommentDate, autoTrustFactor, manualTrustFactor, progress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserBadgeProgress {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    firstCommentId: ").append(toIndentedString(firstCommentId)).append("\n");
    sb.append("    firstCommentDate: ").append(toIndentedString(firstCommentDate)).append("\n");
    sb.append("    autoTrustFactor: ").append(toIndentedString(autoTrustFactor)).append("\n");
    sb.append("    manualTrustFactor: ").append(toIndentedString(manualTrustFactor)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("tenantId");
    openapiFields.add("userId");
    openapiFields.add("firstCommentId");
    openapiFields.add("firstCommentDate");
    openapiFields.add("autoTrustFactor");
    openapiFields.add("manualTrustFactor");
    openapiFields.add("progress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_id");
    openapiRequiredFields.add("tenantId");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("firstCommentId");
    openapiRequiredFields.add("firstCommentDate");
    openapiRequiredFields.add("progress");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserBadgeProgress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserBadgeProgress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserBadgeProgress is not found in the empty JSON string", UserBadgeProgress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserBadgeProgress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserBadgeProgress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserBadgeProgress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if (!jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("firstCommentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstCommentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstCommentId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserBadgeProgress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserBadgeProgress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserBadgeProgress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserBadgeProgress.class));

       return (TypeAdapter<T>) new TypeAdapter<UserBadgeProgress>() {
           @Override
           public void write(JsonWriter out, UserBadgeProgress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserBadgeProgress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserBadgeProgress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserBadgeProgress
   * @throws IOException if the JSON string is invalid with respect to UserBadgeProgress
   */
  public static UserBadgeProgress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserBadgeProgress.class);
  }

  /**
   * Convert an instance of UserBadgeProgress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

