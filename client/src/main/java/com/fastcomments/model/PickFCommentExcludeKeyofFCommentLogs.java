/*
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fastcomments.model;

import java.util.Objects;
import com.fastcomments.model.CommentUserBadgeInfo;
import com.fastcomments.model.CommentUserHashTagInfo;
import com.fastcomments.model.CommentUserMentionInfo;
import com.fastcomments.model.PickFCommentExcludeKeyofFCommentLogsOrTenantIdOrCommentOrHasLinksOrUrlIdMeta;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.fastcomments.invoker.JSON;

/**
 * From T, pick a set of properties whose keys are in the union K
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-13T12:29:11.559332196-08:00[America/Los_Angeles]")
public class PickFCommentExcludeKeyofFCommentLogs {
  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_HAS_LINKS = "hasLinks";
  @SerializedName(SERIALIZED_NAME_HAS_LINKS)
  private Boolean hasLinks;

  public static final String SERIALIZED_NAME_URL_ID = "urlId";
  @SerializedName(SERIALIZED_NAME_URL_ID)
  private String urlId;

  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_URL_ID_RAW = "urlIdRaw";
  @SerializedName(SERIALIZED_NAME_URL_ID_RAW)
  private String urlIdRaw;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_PAGE_TITLE = "pageTitle";
  @SerializedName(SERIALIZED_NAME_PAGE_TITLE)
  private String pageTitle;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_ANON_USER_ID = "anonUserId";
  @SerializedName(SERIALIZED_NAME_ANON_USER_ID)
  private String anonUserId;

  public static final String SERIALIZED_NAME_COMMENTER_EMAIL = "commenterEmail";
  @SerializedName(SERIALIZED_NAME_COMMENTER_EMAIL)
  private String commenterEmail;

  public static final String SERIALIZED_NAME_COMMENTER_NAME = "commenterName";
  @SerializedName(SERIALIZED_NAME_COMMENTER_NAME)
  private String commenterName;

  public static final String SERIALIZED_NAME_COMMENTER_LINK = "commenterLink";
  @SerializedName(SERIALIZED_NAME_COMMENTER_LINK)
  private String commenterLink;

  public static final String SERIALIZED_NAME_COMMENT_H_T_M_L = "commentHTML";
  @SerializedName(SERIALIZED_NAME_COMMENT_H_T_M_L)
  private String commentHTML;

  public static final String SERIALIZED_NAME_PARENT_ID = "parentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_LOCAL_DATE_STRING = "localDateString";
  @SerializedName(SERIALIZED_NAME_LOCAL_DATE_STRING)
  private String localDateString;

  public static final String SERIALIZED_NAME_LOCAL_DATE_HOURS = "localDateHours";
  @SerializedName(SERIALIZED_NAME_LOCAL_DATE_HOURS)
  private Double localDateHours;

  public static final String SERIALIZED_NAME_VOTES = "votes";
  @SerializedName(SERIALIZED_NAME_VOTES)
  private Double votes;

  public static final String SERIALIZED_NAME_VOTES_UP = "votesUp";
  @SerializedName(SERIALIZED_NAME_VOTES_UP)
  private Double votesUp;

  public static final String SERIALIZED_NAME_VOTES_DOWN = "votesDown";
  @SerializedName(SERIALIZED_NAME_VOTES_DOWN)
  private Double votesDown;

  public static final String SERIALIZED_NAME_EXPIRE_AT = "expireAt";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AT)
  private OffsetDateTime expireAt;

  public static final String SERIALIZED_NAME_VERIFIED = "verified";
  @SerializedName(SERIALIZED_NAME_VERIFIED)
  private Boolean verified;

  public static final String SERIALIZED_NAME_VERIFIED_DATE = "verifiedDate";
  @SerializedName(SERIALIZED_NAME_VERIFIED_DATE)
  private OffsetDateTime verifiedDate;

  public static final String SERIALIZED_NAME_VERIFICATION_ID = "verificationId";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_ID)
  private String verificationId;

  public static final String SERIALIZED_NAME_NOTIFICATION_SENT_FOR_PARENT = "notificationSentForParent";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_SENT_FOR_PARENT)
  private Boolean notificationSentForParent;

  public static final String SERIALIZED_NAME_NOTIFICATION_SENT_FOR_PARENT_TENANT = "notificationSentForParentTenant";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_SENT_FOR_PARENT_TENANT)
  private Boolean notificationSentForParentTenant;

  public static final String SERIALIZED_NAME_REVIEWED = "reviewed";
  @SerializedName(SERIALIZED_NAME_REVIEWED)
  private Boolean reviewed;

  public static final String SERIALIZED_NAME_IMPORTED = "imported";
  @SerializedName(SERIALIZED_NAME_IMPORTED)
  private Boolean imported;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_EXTERNAL_PARENT_ID = "externalParentId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PARENT_ID)
  private String externalParentId;

  public static final String SERIALIZED_NAME_AVATAR_SRC = "avatarSrc";
  @SerializedName(SERIALIZED_NAME_AVATAR_SRC)
  private String avatarSrc;

  public static final String SERIALIZED_NAME_IS_SPAM = "isSpam";
  @SerializedName(SERIALIZED_NAME_IS_SPAM)
  private Boolean isSpam;

  public static final String SERIALIZED_NAME_AI_DETERMINED_SPAM = "aiDeterminedSpam";
  @SerializedName(SERIALIZED_NAME_AI_DETERMINED_SPAM)
  private Boolean aiDeterminedSpam;

  public static final String SERIALIZED_NAME_HAS_IMAGES = "hasImages";
  @SerializedName(SERIALIZED_NAME_HAS_IMAGES)
  private Boolean hasImages;

  public static final String SERIALIZED_NAME_PAGE_NUMBER = "pageNumber";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER)
  private Double pageNumber;

  public static final String SERIALIZED_NAME_PAGE_NUMBER_O_F = "pageNumberOF";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER_O_F)
  private Double pageNumberOF;

  public static final String SERIALIZED_NAME_PAGE_NUMBER_N_F = "pageNumberNF";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER_N_F)
  private Double pageNumberNF;

  public static final String SERIALIZED_NAME_HAS_CODE = "hasCode";
  @SerializedName(SERIALIZED_NAME_HAS_CODE)
  private Boolean hasCode;

  public static final String SERIALIZED_NAME_APPROVED = "approved";
  @SerializedName(SERIALIZED_NAME_APPROVED)
  private Boolean approved;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_IS_DELETED_USER = "isDeletedUser";
  @SerializedName(SERIALIZED_NAME_IS_DELETED_USER)
  private Boolean isDeletedUser;

  public static final String SERIALIZED_NAME_IS_BANNED_USER = "isBannedUser";
  @SerializedName(SERIALIZED_NAME_IS_BANNED_USER)
  private Boolean isBannedUser;

  public static final String SERIALIZED_NAME_IS_BY_ADMIN = "isByAdmin";
  @SerializedName(SERIALIZED_NAME_IS_BY_ADMIN)
  private Boolean isByAdmin;

  public static final String SERIALIZED_NAME_IS_BY_MODERATOR = "isByModerator";
  @SerializedName(SERIALIZED_NAME_IS_BY_MODERATOR)
  private Boolean isByModerator;

  public static final String SERIALIZED_NAME_IS_PINNED = "isPinned";
  @SerializedName(SERIALIZED_NAME_IS_PINNED)
  private Boolean isPinned;

  public static final String SERIALIZED_NAME_IS_LOCKED = "isLocked";
  @SerializedName(SERIALIZED_NAME_IS_LOCKED)
  private Boolean isLocked;

  public static final String SERIALIZED_NAME_FLAG_COUNT = "flagCount";
  @SerializedName(SERIALIZED_NAME_FLAG_COUNT)
  private Double flagCount;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private Double rating;

  public static final String SERIALIZED_NAME_DISPLAY_LABEL = "displayLabel";
  @SerializedName(SERIALIZED_NAME_DISPLAY_LABEL)
  private String displayLabel;

  public static final String SERIALIZED_NAME_FROM_PRODUCT_ID = "fromProductId";
  @SerializedName(SERIALIZED_NAME_FROM_PRODUCT_ID)
  private Double fromProductId;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private PickFCommentExcludeKeyofFCommentLogsOrTenantIdOrCommentOrHasLinksOrUrlIdMeta meta;

  public static final String SERIALIZED_NAME_IP_HASH = "ipHash";
  @SerializedName(SERIALIZED_NAME_IP_HASH)
  private String ipHash;

  public static final String SERIALIZED_NAME_MENTIONS = "mentions";
  @SerializedName(SERIALIZED_NAME_MENTIONS)
  private List<CommentUserMentionInfo> mentions;

  public static final String SERIALIZED_NAME_HASH_TAGS = "hashTags";
  @SerializedName(SERIALIZED_NAME_HASH_TAGS)
  private List<CommentUserHashTagInfo> hashTags;

  public static final String SERIALIZED_NAME_BADGES = "badges";
  @SerializedName(SERIALIZED_NAME_BADGES)
  private List<CommentUserBadgeInfo> badges;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_VETERAN_BADGE_PROCESSED = "veteranBadgeProcessed";
  @SerializedName(SERIALIZED_NAME_VETERAN_BADGE_PROCESSED)
  private String veteranBadgeProcessed;

  public static final String SERIALIZED_NAME_MODERATION_GROUP_IDS = "moderationGroupIds";
  @SerializedName(SERIALIZED_NAME_MODERATION_GROUP_IDS)
  private List<String> moderationGroupIds;

  public static final String SERIALIZED_NAME_DID_PROCESS_BADGES = "didProcessBadges";
  @SerializedName(SERIALIZED_NAME_DID_PROCESS_BADGES)
  private Boolean didProcessBadges;

  public static final String SERIALIZED_NAME_FROM_OFFLINE_RESTORE = "fromOfflineRestore";
  @SerializedName(SERIALIZED_NAME_FROM_OFFLINE_RESTORE)
  private Boolean fromOfflineRestore;

  public static final String SERIALIZED_NAME_AUTOPLAY_JOB_ID = "autoplayJobId";
  @SerializedName(SERIALIZED_NAME_AUTOPLAY_JOB_ID)
  private String autoplayJobId;

  public static final String SERIALIZED_NAME_AUTOPLAY_DELAY_M_S = "autoplayDelayMS";
  @SerializedName(SERIALIZED_NAME_AUTOPLAY_DELAY_M_S)
  private Double autoplayDelayMS;

  public static final String SERIALIZED_NAME_FEEDBACK_IDS = "feedbackIds";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_IDS)
  private List<String> feedbackIds;

  public static final String SERIALIZED_NAME_GROUP_IDS = "groupIds";
  @SerializedName(SERIALIZED_NAME_GROUP_IDS)
  private List<String> groupIds;

  public static final String SERIALIZED_NAME_VIEW_COUNT = "viewCount";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private Double viewCount;

  public PickFCommentExcludeKeyofFCommentLogs() {
  }

  public PickFCommentExcludeKeyofFCommentLogs tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

   /**
   * Get tenantId
   * @return tenantId
  **/
  @javax.annotation.Nonnull
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public PickFCommentExcludeKeyofFCommentLogs comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nonnull
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public PickFCommentExcludeKeyofFCommentLogs hasLinks(Boolean hasLinks) {
    this.hasLinks = hasLinks;
    return this;
  }

   /**
   * Get hasLinks
   * @return hasLinks
  **/
  @javax.annotation.Nullable
  public Boolean getHasLinks() {
    return hasLinks;
  }

  public void setHasLinks(Boolean hasLinks) {
    this.hasLinks = hasLinks;
  }


  public PickFCommentExcludeKeyofFCommentLogs urlId(String urlId) {
    this.urlId = urlId;
    return this;
  }

   /**
   * Get urlId
   * @return urlId
  **/
  @javax.annotation.Nonnull
  public String getUrlId() {
    return urlId;
  }

  public void setUrlId(String urlId) {
    this.urlId = urlId;
  }


  public PickFCommentExcludeKeyofFCommentLogs id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PickFCommentExcludeKeyofFCommentLogs urlIdRaw(String urlIdRaw) {
    this.urlIdRaw = urlIdRaw;
    return this;
  }

   /**
   * Get urlIdRaw
   * @return urlIdRaw
  **/
  @javax.annotation.Nullable
  public String getUrlIdRaw() {
    return urlIdRaw;
  }

  public void setUrlIdRaw(String urlIdRaw) {
    this.urlIdRaw = urlIdRaw;
  }


  public PickFCommentExcludeKeyofFCommentLogs url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public PickFCommentExcludeKeyofFCommentLogs pageTitle(String pageTitle) {
    this.pageTitle = pageTitle;
    return this;
  }

   /**
   * Get pageTitle
   * @return pageTitle
  **/
  @javax.annotation.Nullable
  public String getPageTitle() {
    return pageTitle;
  }

  public void setPageTitle(String pageTitle) {
    this.pageTitle = pageTitle;
  }


  public PickFCommentExcludeKeyofFCommentLogs userId(String userId) {
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public PickFCommentExcludeKeyofFCommentLogs anonUserId(String anonUserId) {
    this.anonUserId = anonUserId;
    return this;
  }

   /**
   * Get anonUserId
   * @return anonUserId
  **/
  @javax.annotation.Nullable
  public String getAnonUserId() {
    return anonUserId;
  }

  public void setAnonUserId(String anonUserId) {
    this.anonUserId = anonUserId;
  }


  public PickFCommentExcludeKeyofFCommentLogs commenterEmail(String commenterEmail) {
    this.commenterEmail = commenterEmail;
    return this;
  }

   /**
   * Get commenterEmail
   * @return commenterEmail
  **/
  @javax.annotation.Nullable
  public String getCommenterEmail() {
    return commenterEmail;
  }

  public void setCommenterEmail(String commenterEmail) {
    this.commenterEmail = commenterEmail;
  }


  public PickFCommentExcludeKeyofFCommentLogs commenterName(String commenterName) {
    this.commenterName = commenterName;
    return this;
  }

   /**
   * Get commenterName
   * @return commenterName
  **/
  @javax.annotation.Nonnull
  public String getCommenterName() {
    return commenterName;
  }

  public void setCommenterName(String commenterName) {
    this.commenterName = commenterName;
  }


  public PickFCommentExcludeKeyofFCommentLogs commenterLink(String commenterLink) {
    this.commenterLink = commenterLink;
    return this;
  }

   /**
   * Get commenterLink
   * @return commenterLink
  **/
  @javax.annotation.Nullable
  public String getCommenterLink() {
    return commenterLink;
  }

  public void setCommenterLink(String commenterLink) {
    this.commenterLink = commenterLink;
  }


  public PickFCommentExcludeKeyofFCommentLogs commentHTML(String commentHTML) {
    this.commentHTML = commentHTML;
    return this;
  }

   /**
   * Get commentHTML
   * @return commentHTML
  **/
  @javax.annotation.Nonnull
  public String getCommentHTML() {
    return commentHTML;
  }

  public void setCommentHTML(String commentHTML) {
    this.commentHTML = commentHTML;
  }


  public PickFCommentExcludeKeyofFCommentLogs parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

   /**
   * Get parentId
   * @return parentId
  **/
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public PickFCommentExcludeKeyofFCommentLogs date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public PickFCommentExcludeKeyofFCommentLogs localDateString(String localDateString) {
    this.localDateString = localDateString;
    return this;
  }

   /**
   * Get localDateString
   * @return localDateString
  **/
  @javax.annotation.Nullable
  public String getLocalDateString() {
    return localDateString;
  }

  public void setLocalDateString(String localDateString) {
    this.localDateString = localDateString;
  }


  public PickFCommentExcludeKeyofFCommentLogs localDateHours(Double localDateHours) {
    this.localDateHours = localDateHours;
    return this;
  }

   /**
   * Get localDateHours
   * @return localDateHours
  **/
  @javax.annotation.Nullable
  public Double getLocalDateHours() {
    return localDateHours;
  }

  public void setLocalDateHours(Double localDateHours) {
    this.localDateHours = localDateHours;
  }


  public PickFCommentExcludeKeyofFCommentLogs votes(Double votes) {
    this.votes = votes;
    return this;
  }

   /**
   * Get votes
   * @return votes
  **/
  @javax.annotation.Nonnull
  public Double getVotes() {
    return votes;
  }

  public void setVotes(Double votes) {
    this.votes = votes;
  }


  public PickFCommentExcludeKeyofFCommentLogs votesUp(Double votesUp) {
    this.votesUp = votesUp;
    return this;
  }

   /**
   * Get votesUp
   * @return votesUp
  **/
  @javax.annotation.Nonnull
  public Double getVotesUp() {
    return votesUp;
  }

  public void setVotesUp(Double votesUp) {
    this.votesUp = votesUp;
  }


  public PickFCommentExcludeKeyofFCommentLogs votesDown(Double votesDown) {
    this.votesDown = votesDown;
    return this;
  }

   /**
   * Get votesDown
   * @return votesDown
  **/
  @javax.annotation.Nonnull
  public Double getVotesDown() {
    return votesDown;
  }

  public void setVotesDown(Double votesDown) {
    this.votesDown = votesDown;
  }


  public PickFCommentExcludeKeyofFCommentLogs expireAt(OffsetDateTime expireAt) {
    this.expireAt = expireAt;
    return this;
  }

   /**
   * Get expireAt
   * @return expireAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpireAt() {
    return expireAt;
  }

  public void setExpireAt(OffsetDateTime expireAt) {
    this.expireAt = expireAt;
  }


  public PickFCommentExcludeKeyofFCommentLogs verified(Boolean verified) {
    this.verified = verified;
    return this;
  }

   /**
   * Get verified
   * @return verified
  **/
  @javax.annotation.Nonnull
  public Boolean getVerified() {
    return verified;
  }

  public void setVerified(Boolean verified) {
    this.verified = verified;
  }


  public PickFCommentExcludeKeyofFCommentLogs verifiedDate(OffsetDateTime verifiedDate) {
    this.verifiedDate = verifiedDate;
    return this;
  }

   /**
   * Get verifiedDate
   * @return verifiedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getVerifiedDate() {
    return verifiedDate;
  }

  public void setVerifiedDate(OffsetDateTime verifiedDate) {
    this.verifiedDate = verifiedDate;
  }


  public PickFCommentExcludeKeyofFCommentLogs verificationId(String verificationId) {
    this.verificationId = verificationId;
    return this;
  }

   /**
   * Get verificationId
   * @return verificationId
  **/
  @javax.annotation.Nullable
  public String getVerificationId() {
    return verificationId;
  }

  public void setVerificationId(String verificationId) {
    this.verificationId = verificationId;
  }


  public PickFCommentExcludeKeyofFCommentLogs notificationSentForParent(Boolean notificationSentForParent) {
    this.notificationSentForParent = notificationSentForParent;
    return this;
  }

   /**
   * Get notificationSentForParent
   * @return notificationSentForParent
  **/
  @javax.annotation.Nullable
  public Boolean getNotificationSentForParent() {
    return notificationSentForParent;
  }

  public void setNotificationSentForParent(Boolean notificationSentForParent) {
    this.notificationSentForParent = notificationSentForParent;
  }


  public PickFCommentExcludeKeyofFCommentLogs notificationSentForParentTenant(Boolean notificationSentForParentTenant) {
    this.notificationSentForParentTenant = notificationSentForParentTenant;
    return this;
  }

   /**
   * Get notificationSentForParentTenant
   * @return notificationSentForParentTenant
  **/
  @javax.annotation.Nullable
  public Boolean getNotificationSentForParentTenant() {
    return notificationSentForParentTenant;
  }

  public void setNotificationSentForParentTenant(Boolean notificationSentForParentTenant) {
    this.notificationSentForParentTenant = notificationSentForParentTenant;
  }


  public PickFCommentExcludeKeyofFCommentLogs reviewed(Boolean reviewed) {
    this.reviewed = reviewed;
    return this;
  }

   /**
   * Get reviewed
   * @return reviewed
  **/
  @javax.annotation.Nullable
  public Boolean getReviewed() {
    return reviewed;
  }

  public void setReviewed(Boolean reviewed) {
    this.reviewed = reviewed;
  }


  public PickFCommentExcludeKeyofFCommentLogs imported(Boolean imported) {
    this.imported = imported;
    return this;
  }

   /**
   * Get imported
   * @return imported
  **/
  @javax.annotation.Nullable
  public Boolean getImported() {
    return imported;
  }

  public void setImported(Boolean imported) {
    this.imported = imported;
  }


  public PickFCommentExcludeKeyofFCommentLogs externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public PickFCommentExcludeKeyofFCommentLogs externalParentId(String externalParentId) {
    this.externalParentId = externalParentId;
    return this;
  }

   /**
   * Get externalParentId
   * @return externalParentId
  **/
  @javax.annotation.Nullable
  public String getExternalParentId() {
    return externalParentId;
  }

  public void setExternalParentId(String externalParentId) {
    this.externalParentId = externalParentId;
  }


  public PickFCommentExcludeKeyofFCommentLogs avatarSrc(String avatarSrc) {
    this.avatarSrc = avatarSrc;
    return this;
  }

   /**
   * Get avatarSrc
   * @return avatarSrc
  **/
  @javax.annotation.Nullable
  public String getAvatarSrc() {
    return avatarSrc;
  }

  public void setAvatarSrc(String avatarSrc) {
    this.avatarSrc = avatarSrc;
  }


  public PickFCommentExcludeKeyofFCommentLogs isSpam(Boolean isSpam) {
    this.isSpam = isSpam;
    return this;
  }

   /**
   * Get isSpam
   * @return isSpam
  **/
  @javax.annotation.Nullable
  public Boolean getIsSpam() {
    return isSpam;
  }

  public void setIsSpam(Boolean isSpam) {
    this.isSpam = isSpam;
  }


  public PickFCommentExcludeKeyofFCommentLogs aiDeterminedSpam(Boolean aiDeterminedSpam) {
    this.aiDeterminedSpam = aiDeterminedSpam;
    return this;
  }

   /**
   * Get aiDeterminedSpam
   * @return aiDeterminedSpam
  **/
  @javax.annotation.Nullable
  public Boolean getAiDeterminedSpam() {
    return aiDeterminedSpam;
  }

  public void setAiDeterminedSpam(Boolean aiDeterminedSpam) {
    this.aiDeterminedSpam = aiDeterminedSpam;
  }


  public PickFCommentExcludeKeyofFCommentLogs hasImages(Boolean hasImages) {
    this.hasImages = hasImages;
    return this;
  }

   /**
   * Get hasImages
   * @return hasImages
  **/
  @javax.annotation.Nullable
  public Boolean getHasImages() {
    return hasImages;
  }

  public void setHasImages(Boolean hasImages) {
    this.hasImages = hasImages;
  }


  public PickFCommentExcludeKeyofFCommentLogs pageNumber(Double pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @javax.annotation.Nullable
  public Double getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Double pageNumber) {
    this.pageNumber = pageNumber;
  }


  public PickFCommentExcludeKeyofFCommentLogs pageNumberOF(Double pageNumberOF) {
    this.pageNumberOF = pageNumberOF;
    return this;
  }

   /**
   * Get pageNumberOF
   * @return pageNumberOF
  **/
  @javax.annotation.Nullable
  public Double getPageNumberOF() {
    return pageNumberOF;
  }

  public void setPageNumberOF(Double pageNumberOF) {
    this.pageNumberOF = pageNumberOF;
  }


  public PickFCommentExcludeKeyofFCommentLogs pageNumberNF(Double pageNumberNF) {
    this.pageNumberNF = pageNumberNF;
    return this;
  }

   /**
   * Get pageNumberNF
   * @return pageNumberNF
  **/
  @javax.annotation.Nullable
  public Double getPageNumberNF() {
    return pageNumberNF;
  }

  public void setPageNumberNF(Double pageNumberNF) {
    this.pageNumberNF = pageNumberNF;
  }


  public PickFCommentExcludeKeyofFCommentLogs hasCode(Boolean hasCode) {
    this.hasCode = hasCode;
    return this;
  }

   /**
   * Get hasCode
   * @return hasCode
  **/
  @javax.annotation.Nullable
  public Boolean getHasCode() {
    return hasCode;
  }

  public void setHasCode(Boolean hasCode) {
    this.hasCode = hasCode;
  }


  public PickFCommentExcludeKeyofFCommentLogs approved(Boolean approved) {
    this.approved = approved;
    return this;
  }

   /**
   * Get approved
   * @return approved
  **/
  @javax.annotation.Nonnull
  public Boolean getApproved() {
    return approved;
  }

  public void setApproved(Boolean approved) {
    this.approved = approved;
  }


  public PickFCommentExcludeKeyofFCommentLogs locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * Get locale
   * @return locale
  **/
  @javax.annotation.Nonnull
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public PickFCommentExcludeKeyofFCommentLogs isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * Get isDeleted
   * @return isDeleted
  **/
  @javax.annotation.Nullable
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public PickFCommentExcludeKeyofFCommentLogs isDeletedUser(Boolean isDeletedUser) {
    this.isDeletedUser = isDeletedUser;
    return this;
  }

   /**
   * Get isDeletedUser
   * @return isDeletedUser
  **/
  @javax.annotation.Nullable
  public Boolean getIsDeletedUser() {
    return isDeletedUser;
  }

  public void setIsDeletedUser(Boolean isDeletedUser) {
    this.isDeletedUser = isDeletedUser;
  }


  public PickFCommentExcludeKeyofFCommentLogs isBannedUser(Boolean isBannedUser) {
    this.isBannedUser = isBannedUser;
    return this;
  }

   /**
   * Get isBannedUser
   * @return isBannedUser
  **/
  @javax.annotation.Nullable
  public Boolean getIsBannedUser() {
    return isBannedUser;
  }

  public void setIsBannedUser(Boolean isBannedUser) {
    this.isBannedUser = isBannedUser;
  }


  public PickFCommentExcludeKeyofFCommentLogs isByAdmin(Boolean isByAdmin) {
    this.isByAdmin = isByAdmin;
    return this;
  }

   /**
   * Get isByAdmin
   * @return isByAdmin
  **/
  @javax.annotation.Nullable
  public Boolean getIsByAdmin() {
    return isByAdmin;
  }

  public void setIsByAdmin(Boolean isByAdmin) {
    this.isByAdmin = isByAdmin;
  }


  public PickFCommentExcludeKeyofFCommentLogs isByModerator(Boolean isByModerator) {
    this.isByModerator = isByModerator;
    return this;
  }

   /**
   * Get isByModerator
   * @return isByModerator
  **/
  @javax.annotation.Nullable
  public Boolean getIsByModerator() {
    return isByModerator;
  }

  public void setIsByModerator(Boolean isByModerator) {
    this.isByModerator = isByModerator;
  }


  public PickFCommentExcludeKeyofFCommentLogs isPinned(Boolean isPinned) {
    this.isPinned = isPinned;
    return this;
  }

   /**
   * Get isPinned
   * @return isPinned
  **/
  @javax.annotation.Nullable
  public Boolean getIsPinned() {
    return isPinned;
  }

  public void setIsPinned(Boolean isPinned) {
    this.isPinned = isPinned;
  }


  public PickFCommentExcludeKeyofFCommentLogs isLocked(Boolean isLocked) {
    this.isLocked = isLocked;
    return this;
  }

   /**
   * Get isLocked
   * @return isLocked
  **/
  @javax.annotation.Nullable
  public Boolean getIsLocked() {
    return isLocked;
  }

  public void setIsLocked(Boolean isLocked) {
    this.isLocked = isLocked;
  }


  public PickFCommentExcludeKeyofFCommentLogs flagCount(Double flagCount) {
    this.flagCount = flagCount;
    return this;
  }

   /**
   * Get flagCount
   * @return flagCount
  **/
  @javax.annotation.Nullable
  public Double getFlagCount() {
    return flagCount;
  }

  public void setFlagCount(Double flagCount) {
    this.flagCount = flagCount;
  }


  public PickFCommentExcludeKeyofFCommentLogs rating(Double rating) {
    this.rating = rating;
    return this;
  }

   /**
   * Get rating
   * @return rating
  **/
  @javax.annotation.Nullable
  public Double getRating() {
    return rating;
  }

  public void setRating(Double rating) {
    this.rating = rating;
  }


  public PickFCommentExcludeKeyofFCommentLogs displayLabel(String displayLabel) {
    this.displayLabel = displayLabel;
    return this;
  }

   /**
   * Get displayLabel
   * @return displayLabel
  **/
  @javax.annotation.Nullable
  public String getDisplayLabel() {
    return displayLabel;
  }

  public void setDisplayLabel(String displayLabel) {
    this.displayLabel = displayLabel;
  }


  public PickFCommentExcludeKeyofFCommentLogs fromProductId(Double fromProductId) {
    this.fromProductId = fromProductId;
    return this;
  }

   /**
   * Get fromProductId
   * @return fromProductId
  **/
  @javax.annotation.Nullable
  public Double getFromProductId() {
    return fromProductId;
  }

  public void setFromProductId(Double fromProductId) {
    this.fromProductId = fromProductId;
  }


  public PickFCommentExcludeKeyofFCommentLogs meta(PickFCommentExcludeKeyofFCommentLogsOrTenantIdOrCommentOrHasLinksOrUrlIdMeta meta) {
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  public PickFCommentExcludeKeyofFCommentLogsOrTenantIdOrCommentOrHasLinksOrUrlIdMeta getMeta() {
    return meta;
  }

  public void setMeta(PickFCommentExcludeKeyofFCommentLogsOrTenantIdOrCommentOrHasLinksOrUrlIdMeta meta) {
    this.meta = meta;
  }


  public PickFCommentExcludeKeyofFCommentLogs ipHash(String ipHash) {
    this.ipHash = ipHash;
    return this;
  }

   /**
   * Get ipHash
   * @return ipHash
  **/
  @javax.annotation.Nullable
  public String getIpHash() {
    return ipHash;
  }

  public void setIpHash(String ipHash) {
    this.ipHash = ipHash;
  }


  public PickFCommentExcludeKeyofFCommentLogs mentions(List<CommentUserMentionInfo> mentions) {
    this.mentions = mentions;
    return this;
  }

  public PickFCommentExcludeKeyofFCommentLogs addMentionsItem(CommentUserMentionInfo mentionsItem) {
    if (this.mentions == null) {
      this.mentions = new ArrayList<>();
    }
    this.mentions.add(mentionsItem);
    return this;
  }

   /**
   * Get mentions
   * @return mentions
  **/
  @javax.annotation.Nullable
  public List<CommentUserMentionInfo> getMentions() {
    return mentions;
  }

  public void setMentions(List<CommentUserMentionInfo> mentions) {
    this.mentions = mentions;
  }


  public PickFCommentExcludeKeyofFCommentLogs hashTags(List<CommentUserHashTagInfo> hashTags) {
    this.hashTags = hashTags;
    return this;
  }

  public PickFCommentExcludeKeyofFCommentLogs addHashTagsItem(CommentUserHashTagInfo hashTagsItem) {
    if (this.hashTags == null) {
      this.hashTags = new ArrayList<>();
    }
    this.hashTags.add(hashTagsItem);
    return this;
  }

   /**
   * Get hashTags
   * @return hashTags
  **/
  @javax.annotation.Nullable
  public List<CommentUserHashTagInfo> getHashTags() {
    return hashTags;
  }

  public void setHashTags(List<CommentUserHashTagInfo> hashTags) {
    this.hashTags = hashTags;
  }


  public PickFCommentExcludeKeyofFCommentLogs badges(List<CommentUserBadgeInfo> badges) {
    this.badges = badges;
    return this;
  }

  public PickFCommentExcludeKeyofFCommentLogs addBadgesItem(CommentUserBadgeInfo badgesItem) {
    if (this.badges == null) {
      this.badges = new ArrayList<>();
    }
    this.badges.add(badgesItem);
    return this;
  }

   /**
   * Get badges
   * @return badges
  **/
  @javax.annotation.Nullable
  public List<CommentUserBadgeInfo> getBadges() {
    return badges;
  }

  public void setBadges(List<CommentUserBadgeInfo> badges) {
    this.badges = badges;
  }


  public PickFCommentExcludeKeyofFCommentLogs domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public PickFCommentExcludeKeyofFCommentLogs veteranBadgeProcessed(String veteranBadgeProcessed) {
    this.veteranBadgeProcessed = veteranBadgeProcessed;
    return this;
  }

   /**
   * Get veteranBadgeProcessed
   * @return veteranBadgeProcessed
  **/
  @javax.annotation.Nullable
  public String getVeteranBadgeProcessed() {
    return veteranBadgeProcessed;
  }

  public void setVeteranBadgeProcessed(String veteranBadgeProcessed) {
    this.veteranBadgeProcessed = veteranBadgeProcessed;
  }


  public PickFCommentExcludeKeyofFCommentLogs moderationGroupIds(List<String> moderationGroupIds) {
    this.moderationGroupIds = moderationGroupIds;
    return this;
  }

  public PickFCommentExcludeKeyofFCommentLogs addModerationGroupIdsItem(String moderationGroupIdsItem) {
    if (this.moderationGroupIds == null) {
      this.moderationGroupIds = new ArrayList<>();
    }
    this.moderationGroupIds.add(moderationGroupIdsItem);
    return this;
  }

   /**
   * Get moderationGroupIds
   * @return moderationGroupIds
  **/
  @javax.annotation.Nullable
  public List<String> getModerationGroupIds() {
    return moderationGroupIds;
  }

  public void setModerationGroupIds(List<String> moderationGroupIds) {
    this.moderationGroupIds = moderationGroupIds;
  }


  public PickFCommentExcludeKeyofFCommentLogs didProcessBadges(Boolean didProcessBadges) {
    this.didProcessBadges = didProcessBadges;
    return this;
  }

   /**
   * Get didProcessBadges
   * @return didProcessBadges
  **/
  @javax.annotation.Nullable
  public Boolean getDidProcessBadges() {
    return didProcessBadges;
  }

  public void setDidProcessBadges(Boolean didProcessBadges) {
    this.didProcessBadges = didProcessBadges;
  }


  public PickFCommentExcludeKeyofFCommentLogs fromOfflineRestore(Boolean fromOfflineRestore) {
    this.fromOfflineRestore = fromOfflineRestore;
    return this;
  }

   /**
   * Get fromOfflineRestore
   * @return fromOfflineRestore
  **/
  @javax.annotation.Nullable
  public Boolean getFromOfflineRestore() {
    return fromOfflineRestore;
  }

  public void setFromOfflineRestore(Boolean fromOfflineRestore) {
    this.fromOfflineRestore = fromOfflineRestore;
  }


  public PickFCommentExcludeKeyofFCommentLogs autoplayJobId(String autoplayJobId) {
    this.autoplayJobId = autoplayJobId;
    return this;
  }

   /**
   * Get autoplayJobId
   * @return autoplayJobId
  **/
  @javax.annotation.Nullable
  public String getAutoplayJobId() {
    return autoplayJobId;
  }

  public void setAutoplayJobId(String autoplayJobId) {
    this.autoplayJobId = autoplayJobId;
  }


  public PickFCommentExcludeKeyofFCommentLogs autoplayDelayMS(Double autoplayDelayMS) {
    this.autoplayDelayMS = autoplayDelayMS;
    return this;
  }

   /**
   * Get autoplayDelayMS
   * @return autoplayDelayMS
  **/
  @javax.annotation.Nullable
  public Double getAutoplayDelayMS() {
    return autoplayDelayMS;
  }

  public void setAutoplayDelayMS(Double autoplayDelayMS) {
    this.autoplayDelayMS = autoplayDelayMS;
  }


  public PickFCommentExcludeKeyofFCommentLogs feedbackIds(List<String> feedbackIds) {
    this.feedbackIds = feedbackIds;
    return this;
  }

  public PickFCommentExcludeKeyofFCommentLogs addFeedbackIdsItem(String feedbackIdsItem) {
    if (this.feedbackIds == null) {
      this.feedbackIds = new ArrayList<>();
    }
    this.feedbackIds.add(feedbackIdsItem);
    return this;
  }

   /**
   * Get feedbackIds
   * @return feedbackIds
  **/
  @javax.annotation.Nullable
  public List<String> getFeedbackIds() {
    return feedbackIds;
  }

  public void setFeedbackIds(List<String> feedbackIds) {
    this.feedbackIds = feedbackIds;
  }


  public PickFCommentExcludeKeyofFCommentLogs groupIds(List<String> groupIds) {
    this.groupIds = groupIds;
    return this;
  }

  public PickFCommentExcludeKeyofFCommentLogs addGroupIdsItem(String groupIdsItem) {
    if (this.groupIds == null) {
      this.groupIds = new ArrayList<>();
    }
    this.groupIds.add(groupIdsItem);
    return this;
  }

   /**
   * Get groupIds
   * @return groupIds
  **/
  @javax.annotation.Nullable
  public List<String> getGroupIds() {
    return groupIds;
  }

  public void setGroupIds(List<String> groupIds) {
    this.groupIds = groupIds;
  }


  public PickFCommentExcludeKeyofFCommentLogs viewCount(Double viewCount) {
    this.viewCount = viewCount;
    return this;
  }

   /**
   * Get viewCount
   * @return viewCount
  **/
  @javax.annotation.Nullable
  public Double getViewCount() {
    return viewCount;
  }

  public void setViewCount(Double viewCount) {
    this.viewCount = viewCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PickFCommentExcludeKeyofFCommentLogs pickFCommentExcludeKeyofFCommentLogs = (PickFCommentExcludeKeyofFCommentLogs) o;
    return Objects.equals(this.tenantId, pickFCommentExcludeKeyofFCommentLogs.tenantId) &&
        Objects.equals(this.comment, pickFCommentExcludeKeyofFCommentLogs.comment) &&
        Objects.equals(this.hasLinks, pickFCommentExcludeKeyofFCommentLogs.hasLinks) &&
        Objects.equals(this.urlId, pickFCommentExcludeKeyofFCommentLogs.urlId) &&
        Objects.equals(this.id, pickFCommentExcludeKeyofFCommentLogs.id) &&
        Objects.equals(this.urlIdRaw, pickFCommentExcludeKeyofFCommentLogs.urlIdRaw) &&
        Objects.equals(this.url, pickFCommentExcludeKeyofFCommentLogs.url) &&
        Objects.equals(this.pageTitle, pickFCommentExcludeKeyofFCommentLogs.pageTitle) &&
        Objects.equals(this.userId, pickFCommentExcludeKeyofFCommentLogs.userId) &&
        Objects.equals(this.anonUserId, pickFCommentExcludeKeyofFCommentLogs.anonUserId) &&
        Objects.equals(this.commenterEmail, pickFCommentExcludeKeyofFCommentLogs.commenterEmail) &&
        Objects.equals(this.commenterName, pickFCommentExcludeKeyofFCommentLogs.commenterName) &&
        Objects.equals(this.commenterLink, pickFCommentExcludeKeyofFCommentLogs.commenterLink) &&
        Objects.equals(this.commentHTML, pickFCommentExcludeKeyofFCommentLogs.commentHTML) &&
        Objects.equals(this.parentId, pickFCommentExcludeKeyofFCommentLogs.parentId) &&
        Objects.equals(this.date, pickFCommentExcludeKeyofFCommentLogs.date) &&
        Objects.equals(this.localDateString, pickFCommentExcludeKeyofFCommentLogs.localDateString) &&
        Objects.equals(this.localDateHours, pickFCommentExcludeKeyofFCommentLogs.localDateHours) &&
        Objects.equals(this.votes, pickFCommentExcludeKeyofFCommentLogs.votes) &&
        Objects.equals(this.votesUp, pickFCommentExcludeKeyofFCommentLogs.votesUp) &&
        Objects.equals(this.votesDown, pickFCommentExcludeKeyofFCommentLogs.votesDown) &&
        Objects.equals(this.expireAt, pickFCommentExcludeKeyofFCommentLogs.expireAt) &&
        Objects.equals(this.verified, pickFCommentExcludeKeyofFCommentLogs.verified) &&
        Objects.equals(this.verifiedDate, pickFCommentExcludeKeyofFCommentLogs.verifiedDate) &&
        Objects.equals(this.verificationId, pickFCommentExcludeKeyofFCommentLogs.verificationId) &&
        Objects.equals(this.notificationSentForParent, pickFCommentExcludeKeyofFCommentLogs.notificationSentForParent) &&
        Objects.equals(this.notificationSentForParentTenant, pickFCommentExcludeKeyofFCommentLogs.notificationSentForParentTenant) &&
        Objects.equals(this.reviewed, pickFCommentExcludeKeyofFCommentLogs.reviewed) &&
        Objects.equals(this.imported, pickFCommentExcludeKeyofFCommentLogs.imported) &&
        Objects.equals(this.externalId, pickFCommentExcludeKeyofFCommentLogs.externalId) &&
        Objects.equals(this.externalParentId, pickFCommentExcludeKeyofFCommentLogs.externalParentId) &&
        Objects.equals(this.avatarSrc, pickFCommentExcludeKeyofFCommentLogs.avatarSrc) &&
        Objects.equals(this.isSpam, pickFCommentExcludeKeyofFCommentLogs.isSpam) &&
        Objects.equals(this.aiDeterminedSpam, pickFCommentExcludeKeyofFCommentLogs.aiDeterminedSpam) &&
        Objects.equals(this.hasImages, pickFCommentExcludeKeyofFCommentLogs.hasImages) &&
        Objects.equals(this.pageNumber, pickFCommentExcludeKeyofFCommentLogs.pageNumber) &&
        Objects.equals(this.pageNumberOF, pickFCommentExcludeKeyofFCommentLogs.pageNumberOF) &&
        Objects.equals(this.pageNumberNF, pickFCommentExcludeKeyofFCommentLogs.pageNumberNF) &&
        Objects.equals(this.hasCode, pickFCommentExcludeKeyofFCommentLogs.hasCode) &&
        Objects.equals(this.approved, pickFCommentExcludeKeyofFCommentLogs.approved) &&
        Objects.equals(this.locale, pickFCommentExcludeKeyofFCommentLogs.locale) &&
        Objects.equals(this.isDeleted, pickFCommentExcludeKeyofFCommentLogs.isDeleted) &&
        Objects.equals(this.isDeletedUser, pickFCommentExcludeKeyofFCommentLogs.isDeletedUser) &&
        Objects.equals(this.isBannedUser, pickFCommentExcludeKeyofFCommentLogs.isBannedUser) &&
        Objects.equals(this.isByAdmin, pickFCommentExcludeKeyofFCommentLogs.isByAdmin) &&
        Objects.equals(this.isByModerator, pickFCommentExcludeKeyofFCommentLogs.isByModerator) &&
        Objects.equals(this.isPinned, pickFCommentExcludeKeyofFCommentLogs.isPinned) &&
        Objects.equals(this.isLocked, pickFCommentExcludeKeyofFCommentLogs.isLocked) &&
        Objects.equals(this.flagCount, pickFCommentExcludeKeyofFCommentLogs.flagCount) &&
        Objects.equals(this.rating, pickFCommentExcludeKeyofFCommentLogs.rating) &&
        Objects.equals(this.displayLabel, pickFCommentExcludeKeyofFCommentLogs.displayLabel) &&
        Objects.equals(this.fromProductId, pickFCommentExcludeKeyofFCommentLogs.fromProductId) &&
        Objects.equals(this.meta, pickFCommentExcludeKeyofFCommentLogs.meta) &&
        Objects.equals(this.ipHash, pickFCommentExcludeKeyofFCommentLogs.ipHash) &&
        Objects.equals(this.mentions, pickFCommentExcludeKeyofFCommentLogs.mentions) &&
        Objects.equals(this.hashTags, pickFCommentExcludeKeyofFCommentLogs.hashTags) &&
        Objects.equals(this.badges, pickFCommentExcludeKeyofFCommentLogs.badges) &&
        Objects.equals(this.domain, pickFCommentExcludeKeyofFCommentLogs.domain) &&
        Objects.equals(this.veteranBadgeProcessed, pickFCommentExcludeKeyofFCommentLogs.veteranBadgeProcessed) &&
        Objects.equals(this.moderationGroupIds, pickFCommentExcludeKeyofFCommentLogs.moderationGroupIds) &&
        Objects.equals(this.didProcessBadges, pickFCommentExcludeKeyofFCommentLogs.didProcessBadges) &&
        Objects.equals(this.fromOfflineRestore, pickFCommentExcludeKeyofFCommentLogs.fromOfflineRestore) &&
        Objects.equals(this.autoplayJobId, pickFCommentExcludeKeyofFCommentLogs.autoplayJobId) &&
        Objects.equals(this.autoplayDelayMS, pickFCommentExcludeKeyofFCommentLogs.autoplayDelayMS) &&
        Objects.equals(this.feedbackIds, pickFCommentExcludeKeyofFCommentLogs.feedbackIds) &&
        Objects.equals(this.groupIds, pickFCommentExcludeKeyofFCommentLogs.groupIds) &&
        Objects.equals(this.viewCount, pickFCommentExcludeKeyofFCommentLogs.viewCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenantId, comment, hasLinks, urlId, id, urlIdRaw, url, pageTitle, userId, anonUserId, commenterEmail, commenterName, commenterLink, commentHTML, parentId, date, localDateString, localDateHours, votes, votesUp, votesDown, expireAt, verified, verifiedDate, verificationId, notificationSentForParent, notificationSentForParentTenant, reviewed, imported, externalId, externalParentId, avatarSrc, isSpam, aiDeterminedSpam, hasImages, pageNumber, pageNumberOF, pageNumberNF, hasCode, approved, locale, isDeleted, isDeletedUser, isBannedUser, isByAdmin, isByModerator, isPinned, isLocked, flagCount, rating, displayLabel, fromProductId, meta, ipHash, mentions, hashTags, badges, domain, veteranBadgeProcessed, moderationGroupIds, didProcessBadges, fromOfflineRestore, autoplayJobId, autoplayDelayMS, feedbackIds, groupIds, viewCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PickFCommentExcludeKeyofFCommentLogs {\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    hasLinks: ").append(toIndentedString(hasLinks)).append("\n");
    sb.append("    urlId: ").append(toIndentedString(urlId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    urlIdRaw: ").append(toIndentedString(urlIdRaw)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    pageTitle: ").append(toIndentedString(pageTitle)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    anonUserId: ").append(toIndentedString(anonUserId)).append("\n");
    sb.append("    commenterEmail: ").append(toIndentedString(commenterEmail)).append("\n");
    sb.append("    commenterName: ").append(toIndentedString(commenterName)).append("\n");
    sb.append("    commenterLink: ").append(toIndentedString(commenterLink)).append("\n");
    sb.append("    commentHTML: ").append(toIndentedString(commentHTML)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    localDateString: ").append(toIndentedString(localDateString)).append("\n");
    sb.append("    localDateHours: ").append(toIndentedString(localDateHours)).append("\n");
    sb.append("    votes: ").append(toIndentedString(votes)).append("\n");
    sb.append("    votesUp: ").append(toIndentedString(votesUp)).append("\n");
    sb.append("    votesDown: ").append(toIndentedString(votesDown)).append("\n");
    sb.append("    expireAt: ").append(toIndentedString(expireAt)).append("\n");
    sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
    sb.append("    verifiedDate: ").append(toIndentedString(verifiedDate)).append("\n");
    sb.append("    verificationId: ").append(toIndentedString(verificationId)).append("\n");
    sb.append("    notificationSentForParent: ").append(toIndentedString(notificationSentForParent)).append("\n");
    sb.append("    notificationSentForParentTenant: ").append(toIndentedString(notificationSentForParentTenant)).append("\n");
    sb.append("    reviewed: ").append(toIndentedString(reviewed)).append("\n");
    sb.append("    imported: ").append(toIndentedString(imported)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    externalParentId: ").append(toIndentedString(externalParentId)).append("\n");
    sb.append("    avatarSrc: ").append(toIndentedString(avatarSrc)).append("\n");
    sb.append("    isSpam: ").append(toIndentedString(isSpam)).append("\n");
    sb.append("    aiDeterminedSpam: ").append(toIndentedString(aiDeterminedSpam)).append("\n");
    sb.append("    hasImages: ").append(toIndentedString(hasImages)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageNumberOF: ").append(toIndentedString(pageNumberOF)).append("\n");
    sb.append("    pageNumberNF: ").append(toIndentedString(pageNumberNF)).append("\n");
    sb.append("    hasCode: ").append(toIndentedString(hasCode)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    isDeletedUser: ").append(toIndentedString(isDeletedUser)).append("\n");
    sb.append("    isBannedUser: ").append(toIndentedString(isBannedUser)).append("\n");
    sb.append("    isByAdmin: ").append(toIndentedString(isByAdmin)).append("\n");
    sb.append("    isByModerator: ").append(toIndentedString(isByModerator)).append("\n");
    sb.append("    isPinned: ").append(toIndentedString(isPinned)).append("\n");
    sb.append("    isLocked: ").append(toIndentedString(isLocked)).append("\n");
    sb.append("    flagCount: ").append(toIndentedString(flagCount)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    displayLabel: ").append(toIndentedString(displayLabel)).append("\n");
    sb.append("    fromProductId: ").append(toIndentedString(fromProductId)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    ipHash: ").append(toIndentedString(ipHash)).append("\n");
    sb.append("    mentions: ").append(toIndentedString(mentions)).append("\n");
    sb.append("    hashTags: ").append(toIndentedString(hashTags)).append("\n");
    sb.append("    badges: ").append(toIndentedString(badges)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    veteranBadgeProcessed: ").append(toIndentedString(veteranBadgeProcessed)).append("\n");
    sb.append("    moderationGroupIds: ").append(toIndentedString(moderationGroupIds)).append("\n");
    sb.append("    didProcessBadges: ").append(toIndentedString(didProcessBadges)).append("\n");
    sb.append("    fromOfflineRestore: ").append(toIndentedString(fromOfflineRestore)).append("\n");
    sb.append("    autoplayJobId: ").append(toIndentedString(autoplayJobId)).append("\n");
    sb.append("    autoplayDelayMS: ").append(toIndentedString(autoplayDelayMS)).append("\n");
    sb.append("    feedbackIds: ").append(toIndentedString(feedbackIds)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tenantId");
    openapiFields.add("comment");
    openapiFields.add("hasLinks");
    openapiFields.add("urlId");
    openapiFields.add("_id");
    openapiFields.add("urlIdRaw");
    openapiFields.add("url");
    openapiFields.add("pageTitle");
    openapiFields.add("userId");
    openapiFields.add("anonUserId");
    openapiFields.add("commenterEmail");
    openapiFields.add("commenterName");
    openapiFields.add("commenterLink");
    openapiFields.add("commentHTML");
    openapiFields.add("parentId");
    openapiFields.add("date");
    openapiFields.add("localDateString");
    openapiFields.add("localDateHours");
    openapiFields.add("votes");
    openapiFields.add("votesUp");
    openapiFields.add("votesDown");
    openapiFields.add("expireAt");
    openapiFields.add("verified");
    openapiFields.add("verifiedDate");
    openapiFields.add("verificationId");
    openapiFields.add("notificationSentForParent");
    openapiFields.add("notificationSentForParentTenant");
    openapiFields.add("reviewed");
    openapiFields.add("imported");
    openapiFields.add("externalId");
    openapiFields.add("externalParentId");
    openapiFields.add("avatarSrc");
    openapiFields.add("isSpam");
    openapiFields.add("aiDeterminedSpam");
    openapiFields.add("hasImages");
    openapiFields.add("pageNumber");
    openapiFields.add("pageNumberOF");
    openapiFields.add("pageNumberNF");
    openapiFields.add("hasCode");
    openapiFields.add("approved");
    openapiFields.add("locale");
    openapiFields.add("isDeleted");
    openapiFields.add("isDeletedUser");
    openapiFields.add("isBannedUser");
    openapiFields.add("isByAdmin");
    openapiFields.add("isByModerator");
    openapiFields.add("isPinned");
    openapiFields.add("isLocked");
    openapiFields.add("flagCount");
    openapiFields.add("rating");
    openapiFields.add("displayLabel");
    openapiFields.add("fromProductId");
    openapiFields.add("meta");
    openapiFields.add("ipHash");
    openapiFields.add("mentions");
    openapiFields.add("hashTags");
    openapiFields.add("badges");
    openapiFields.add("domain");
    openapiFields.add("veteranBadgeProcessed");
    openapiFields.add("moderationGroupIds");
    openapiFields.add("didProcessBadges");
    openapiFields.add("fromOfflineRestore");
    openapiFields.add("autoplayJobId");
    openapiFields.add("autoplayDelayMS");
    openapiFields.add("feedbackIds");
    openapiFields.add("groupIds");
    openapiFields.add("viewCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tenantId");
    openapiRequiredFields.add("comment");
    openapiRequiredFields.add("urlId");
    openapiRequiredFields.add("_id");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("commenterName");
    openapiRequiredFields.add("commentHTML");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("votes");
    openapiRequiredFields.add("votesUp");
    openapiRequiredFields.add("votesDown");
    openapiRequiredFields.add("verified");
    openapiRequiredFields.add("approved");
    openapiRequiredFields.add("locale");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PickFCommentExcludeKeyofFCommentLogs
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PickFCommentExcludeKeyofFCommentLogs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PickFCommentExcludeKeyofFCommentLogs is not found in the empty JSON string", PickFCommentExcludeKeyofFCommentLogs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PickFCommentExcludeKeyofFCommentLogs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PickFCommentExcludeKeyofFCommentLogs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PickFCommentExcludeKeyofFCommentLogs.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if (!jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (!jsonObj.get("urlId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlId").toString()));
      }
      if (!jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("urlIdRaw") != null && !jsonObj.get("urlIdRaw").isJsonNull()) && !jsonObj.get("urlIdRaw").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlIdRaw` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlIdRaw").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("pageTitle") != null && !jsonObj.get("pageTitle").isJsonNull()) && !jsonObj.get("pageTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageTitle").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("anonUserId") != null && !jsonObj.get("anonUserId").isJsonNull()) && !jsonObj.get("anonUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anonUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anonUserId").toString()));
      }
      if ((jsonObj.get("commenterEmail") != null && !jsonObj.get("commenterEmail").isJsonNull()) && !jsonObj.get("commenterEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commenterEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commenterEmail").toString()));
      }
      if (!jsonObj.get("commenterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commenterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commenterName").toString()));
      }
      if ((jsonObj.get("commenterLink") != null && !jsonObj.get("commenterLink").isJsonNull()) && !jsonObj.get("commenterLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commenterLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commenterLink").toString()));
      }
      if (!jsonObj.get("commentHTML").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commentHTML` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commentHTML").toString()));
      }
      if ((jsonObj.get("parentId") != null && !jsonObj.get("parentId").isJsonNull()) && !jsonObj.get("parentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentId").toString()));
      }
      if ((jsonObj.get("localDateString") != null && !jsonObj.get("localDateString").isJsonNull()) && !jsonObj.get("localDateString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localDateString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localDateString").toString()));
      }
      if ((jsonObj.get("verificationId") != null && !jsonObj.get("verificationId").isJsonNull()) && !jsonObj.get("verificationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationId").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("externalParentId") != null && !jsonObj.get("externalParentId").isJsonNull()) && !jsonObj.get("externalParentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalParentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalParentId").toString()));
      }
      if ((jsonObj.get("avatarSrc") != null && !jsonObj.get("avatarSrc").isJsonNull()) && !jsonObj.get("avatarSrc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatarSrc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatarSrc").toString()));
      }
      if (!jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("displayLabel") != null && !jsonObj.get("displayLabel").isJsonNull()) && !jsonObj.get("displayLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayLabel").toString()));
      }
      if ((jsonObj.get("ipHash") != null && !jsonObj.get("ipHash").isJsonNull()) && !jsonObj.get("ipHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipHash").toString()));
      }
      if (jsonObj.get("mentions") != null && !jsonObj.get("mentions").isJsonNull()) {
        JsonArray jsonArraymentions = jsonObj.getAsJsonArray("mentions");
        if (jsonArraymentions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mentions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mentions` to be an array in the JSON string but got `%s`", jsonObj.get("mentions").toString()));
          }

          // validate the optional field `mentions` (array)
          for (int i = 0; i < jsonArraymentions.size(); i++) {
            CommentUserMentionInfo.validateJsonElement(jsonArraymentions.get(i));
          };
        }
      }
      if (jsonObj.get("hashTags") != null && !jsonObj.get("hashTags").isJsonNull()) {
        JsonArray jsonArrayhashTags = jsonObj.getAsJsonArray("hashTags");
        if (jsonArrayhashTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hashTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hashTags` to be an array in the JSON string but got `%s`", jsonObj.get("hashTags").toString()));
          }

          // validate the optional field `hashTags` (array)
          for (int i = 0; i < jsonArrayhashTags.size(); i++) {
            CommentUserHashTagInfo.validateJsonElement(jsonArrayhashTags.get(i));
          };
        }
      }
      if (jsonObj.get("badges") != null && !jsonObj.get("badges").isJsonNull()) {
        JsonArray jsonArraybadges = jsonObj.getAsJsonArray("badges");
        if (jsonArraybadges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("badges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `badges` to be an array in the JSON string but got `%s`", jsonObj.get("badges").toString()));
          }

          // validate the optional field `badges` (array)
          for (int i = 0; i < jsonArraybadges.size(); i++) {
            CommentUserBadgeInfo.validateJsonElement(jsonArraybadges.get(i));
          };
        }
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("veteranBadgeProcessed") != null && !jsonObj.get("veteranBadgeProcessed").isJsonNull()) && !jsonObj.get("veteranBadgeProcessed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `veteranBadgeProcessed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("veteranBadgeProcessed").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("moderationGroupIds") != null && !jsonObj.get("moderationGroupIds").isJsonNull() && !jsonObj.get("moderationGroupIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `moderationGroupIds` to be an array in the JSON string but got `%s`", jsonObj.get("moderationGroupIds").toString()));
      }
      if ((jsonObj.get("autoplayJobId") != null && !jsonObj.get("autoplayJobId").isJsonNull()) && !jsonObj.get("autoplayJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoplayJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoplayJobId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("feedbackIds") != null && !jsonObj.get("feedbackIds").isJsonNull() && !jsonObj.get("feedbackIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedbackIds` to be an array in the JSON string but got `%s`", jsonObj.get("feedbackIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groupIds") != null && !jsonObj.get("groupIds").isJsonNull() && !jsonObj.get("groupIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupIds` to be an array in the JSON string but got `%s`", jsonObj.get("groupIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PickFCommentExcludeKeyofFCommentLogs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PickFCommentExcludeKeyofFCommentLogs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PickFCommentExcludeKeyofFCommentLogs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PickFCommentExcludeKeyofFCommentLogs.class));

       return (TypeAdapter<T>) new TypeAdapter<PickFCommentExcludeKeyofFCommentLogs>() {
           @Override
           public void write(JsonWriter out, PickFCommentExcludeKeyofFCommentLogs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PickFCommentExcludeKeyofFCommentLogs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PickFCommentExcludeKeyofFCommentLogs given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PickFCommentExcludeKeyofFCommentLogs
  * @throws IOException if the JSON string is invalid with respect to PickFCommentExcludeKeyofFCommentLogs
  */
  public static PickFCommentExcludeKeyofFCommentLogs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PickFCommentExcludeKeyofFCommentLogs.class);
  }

 /**
  * Convert an instance of PickFCommentExcludeKeyofFCommentLogs to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

