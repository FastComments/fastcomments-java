/*
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fastcomments.model;

import java.util.Objects;
import com.fastcomments.model.AggregateTimeBucket;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.fastcomments.invoker.JSON;

/**
 * BulkAggregateQuestionItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class BulkAggregateQuestionItem {
  public static final String SERIALIZED_NAME_AGG_ID = "aggId";
  @SerializedName(SERIALIZED_NAME_AGG_ID)
  @javax.annotation.Nonnull
  private String aggId;

  public static final String SERIALIZED_NAME_QUESTION_ID = "questionId";
  @SerializedName(SERIALIZED_NAME_QUESTION_ID)
  @javax.annotation.Nullable
  private String questionId;

  public static final String SERIALIZED_NAME_QUESTION_IDS = "questionIds";
  @SerializedName(SERIALIZED_NAME_QUESTION_IDS)
  @javax.annotation.Nullable
  private List<String> questionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL_ID = "urlId";
  @SerializedName(SERIALIZED_NAME_URL_ID)
  @javax.annotation.Nullable
  private String urlId;

  public static final String SERIALIZED_NAME_TIME_BUCKET = "timeBucket";
  @SerializedName(SERIALIZED_NAME_TIME_BUCKET)
  @javax.annotation.Nullable
  private AggregateTimeBucket timeBucket;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime startDate;

  public BulkAggregateQuestionItem() {
  }

  public BulkAggregateQuestionItem aggId(@javax.annotation.Nonnull String aggId) {
    this.aggId = aggId;
    return this;
  }

  /**
   * Get aggId
   * @return aggId
   */
  @javax.annotation.Nonnull
  public String getAggId() {
    return aggId;
  }

  public void setAggId(@javax.annotation.Nonnull String aggId) {
    this.aggId = aggId;
  }


  public BulkAggregateQuestionItem questionId(@javax.annotation.Nullable String questionId) {
    this.questionId = questionId;
    return this;
  }

  /**
   * Get questionId
   * @return questionId
   */
  @javax.annotation.Nullable
  public String getQuestionId() {
    return questionId;
  }

  public void setQuestionId(@javax.annotation.Nullable String questionId) {
    this.questionId = questionId;
  }


  public BulkAggregateQuestionItem questionIds(@javax.annotation.Nullable List<String> questionIds) {
    this.questionIds = questionIds;
    return this;
  }

  public BulkAggregateQuestionItem addQuestionIdsItem(String questionIdsItem) {
    if (this.questionIds == null) {
      this.questionIds = new ArrayList<>();
    }
    this.questionIds.add(questionIdsItem);
    return this;
  }

  /**
   * Get questionIds
   * @return questionIds
   */
  @javax.annotation.Nullable
  public List<String> getQuestionIds() {
    return questionIds;
  }

  public void setQuestionIds(@javax.annotation.Nullable List<String> questionIds) {
    this.questionIds = questionIds;
  }


  public BulkAggregateQuestionItem urlId(@javax.annotation.Nullable String urlId) {
    this.urlId = urlId;
    return this;
  }

  /**
   * Get urlId
   * @return urlId
   */
  @javax.annotation.Nullable
  public String getUrlId() {
    return urlId;
  }

  public void setUrlId(@javax.annotation.Nullable String urlId) {
    this.urlId = urlId;
  }


  public BulkAggregateQuestionItem timeBucket(@javax.annotation.Nullable AggregateTimeBucket timeBucket) {
    this.timeBucket = timeBucket;
    return this;
  }

  /**
   * Get timeBucket
   * @return timeBucket
   */
  @javax.annotation.Nullable
  public AggregateTimeBucket getTimeBucket() {
    return timeBucket;
  }

  public void setTimeBucket(@javax.annotation.Nullable AggregateTimeBucket timeBucket) {
    this.timeBucket = timeBucket;
  }


  public BulkAggregateQuestionItem startDate(@javax.annotation.Nullable OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(@javax.annotation.Nullable OffsetDateTime startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkAggregateQuestionItem bulkAggregateQuestionItem = (BulkAggregateQuestionItem) o;
    return Objects.equals(this.aggId, bulkAggregateQuestionItem.aggId) &&
        Objects.equals(this.questionId, bulkAggregateQuestionItem.questionId) &&
        Objects.equals(this.questionIds, bulkAggregateQuestionItem.questionIds) &&
        Objects.equals(this.urlId, bulkAggregateQuestionItem.urlId) &&
        Objects.equals(this.timeBucket, bulkAggregateQuestionItem.timeBucket) &&
        Objects.equals(this.startDate, bulkAggregateQuestionItem.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggId, questionId, questionIds, urlId, timeBucket, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkAggregateQuestionItem {\n");
    sb.append("    aggId: ").append(toIndentedString(aggId)).append("\n");
    sb.append("    questionId: ").append(toIndentedString(questionId)).append("\n");
    sb.append("    questionIds: ").append(toIndentedString(questionIds)).append("\n");
    sb.append("    urlId: ").append(toIndentedString(urlId)).append("\n");
    sb.append("    timeBucket: ").append(toIndentedString(timeBucket)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggId");
    openapiFields.add("questionId");
    openapiFields.add("questionIds");
    openapiFields.add("urlId");
    openapiFields.add("timeBucket");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aggId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BulkAggregateQuestionItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkAggregateQuestionItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkAggregateQuestionItem is not found in the empty JSON string", BulkAggregateQuestionItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkAggregateQuestionItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkAggregateQuestionItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BulkAggregateQuestionItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("aggId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggId").toString()));
      }
      if ((jsonObj.get("questionId") != null && !jsonObj.get("questionId").isJsonNull()) && !jsonObj.get("questionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `questionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("questionId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("questionIds") != null && !jsonObj.get("questionIds").isJsonNull() && !jsonObj.get("questionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `questionIds` to be an array in the JSON string but got `%s`", jsonObj.get("questionIds").toString()));
      }
      if ((jsonObj.get("urlId") != null && !jsonObj.get("urlId").isJsonNull()) && !jsonObj.get("urlId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlId").toString()));
      }
      // validate the optional field `timeBucket`
      if (jsonObj.get("timeBucket") != null && !jsonObj.get("timeBucket").isJsonNull()) {
        AggregateTimeBucket.validateJsonElement(jsonObj.get("timeBucket"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkAggregateQuestionItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkAggregateQuestionItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkAggregateQuestionItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkAggregateQuestionItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkAggregateQuestionItem>() {
           @Override
           public void write(JsonWriter out, BulkAggregateQuestionItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkAggregateQuestionItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BulkAggregateQuestionItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BulkAggregateQuestionItem
   * @throws IOException if the JSON string is invalid with respect to BulkAggregateQuestionItem
   */
  public static BulkAggregateQuestionItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkAggregateQuestionItem.class);
  }

  /**
   * Convert an instance of BulkAggregateQuestionItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

