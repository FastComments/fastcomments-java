/*
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fastcomments.model;

import java.util.Objects;
import com.fastcomments.model.QuestionDatum;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.fastcomments.invoker.JSON;

/**
 * QuestionResultAggregationOverall
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class QuestionResultAggregationOverall {
  public static final String SERIALIZED_NAME_DATA_BY_DATE_BUCKET = "dataByDateBucket";
  @SerializedName(SERIALIZED_NAME_DATA_BY_DATE_BUCKET)
  @javax.annotation.Nullable
  private Map<String, QuestionDatum> dataByDateBucket = new HashMap<>();

  public static final String SERIALIZED_NAME_DATA_BY_URL_ID = "dataByUrlId";
  @SerializedName(SERIALIZED_NAME_DATA_BY_URL_ID)
  @javax.annotation.Nullable
  private Map<String, QuestionDatum> dataByUrlId = new HashMap<>();

  public static final String SERIALIZED_NAME_COUNTS_BY_VALUE = "countsByValue";
  @SerializedName(SERIALIZED_NAME_COUNTS_BY_VALUE)
  @javax.annotation.Nullable
  private Map<String, Integer> countsByValue = new HashMap<>();

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  @javax.annotation.Nonnull
  private Double total;

  public static final String SERIALIZED_NAME_AVERAGE = "average";
  @SerializedName(SERIALIZED_NAME_AVERAGE)
  @javax.annotation.Nullable
  private Double average;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public QuestionResultAggregationOverall() {
  }

  public QuestionResultAggregationOverall dataByDateBucket(@javax.annotation.Nullable Map<String, QuestionDatum> dataByDateBucket) {
    this.dataByDateBucket = dataByDateBucket;
    return this;
  }

  public QuestionResultAggregationOverall putDataByDateBucketItem(String key, QuestionDatum dataByDateBucketItem) {
    if (this.dataByDateBucket == null) {
      this.dataByDateBucket = new HashMap<>();
    }
    this.dataByDateBucket.put(key, dataByDateBucketItem);
    return this;
  }

  /**
   * Construct a type with a set of properties K of type T
   * @return dataByDateBucket
   */
  @javax.annotation.Nullable
  public Map<String, QuestionDatum> getDataByDateBucket() {
    return dataByDateBucket;
  }

  public void setDataByDateBucket(@javax.annotation.Nullable Map<String, QuestionDatum> dataByDateBucket) {
    this.dataByDateBucket = dataByDateBucket;
  }


  public QuestionResultAggregationOverall dataByUrlId(@javax.annotation.Nullable Map<String, QuestionDatum> dataByUrlId) {
    this.dataByUrlId = dataByUrlId;
    return this;
  }

  public QuestionResultAggregationOverall putDataByUrlIdItem(String key, QuestionDatum dataByUrlIdItem) {
    if (this.dataByUrlId == null) {
      this.dataByUrlId = new HashMap<>();
    }
    this.dataByUrlId.put(key, dataByUrlIdItem);
    return this;
  }

  /**
   * Construct a type with a set of properties K of type T
   * @return dataByUrlId
   */
  @javax.annotation.Nullable
  public Map<String, QuestionDatum> getDataByUrlId() {
    return dataByUrlId;
  }

  public void setDataByUrlId(@javax.annotation.Nullable Map<String, QuestionDatum> dataByUrlId) {
    this.dataByUrlId = dataByUrlId;
  }


  public QuestionResultAggregationOverall countsByValue(@javax.annotation.Nullable Map<String, Integer> countsByValue) {
    this.countsByValue = countsByValue;
    return this;
  }

  public QuestionResultAggregationOverall putCountsByValueItem(String key, Integer countsByValueItem) {
    if (this.countsByValue == null) {
      this.countsByValue = new HashMap<>();
    }
    this.countsByValue.put(key, countsByValueItem);
    return this;
  }

  /**
   * Get countsByValue
   * @return countsByValue
   */
  @javax.annotation.Nullable
  public Map<String, Integer> getCountsByValue() {
    return countsByValue;
  }

  public void setCountsByValue(@javax.annotation.Nullable Map<String, Integer> countsByValue) {
    this.countsByValue = countsByValue;
  }


  public QuestionResultAggregationOverall total(@javax.annotation.Nonnull Double total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nonnull
  public Double getTotal() {
    return total;
  }

  public void setTotal(@javax.annotation.Nonnull Double total) {
    this.total = total;
  }


  public QuestionResultAggregationOverall average(@javax.annotation.Nullable Double average) {
    this.average = average;
    return this;
  }

  /**
   * Get average
   * @return average
   */
  @javax.annotation.Nullable
  public Double getAverage() {
    return average;
  }

  public void setAverage(@javax.annotation.Nullable Double average) {
    this.average = average;
  }


  public QuestionResultAggregationOverall createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuestionResultAggregationOverall questionResultAggregationOverall = (QuestionResultAggregationOverall) o;
    return Objects.equals(this.dataByDateBucket, questionResultAggregationOverall.dataByDateBucket) &&
        Objects.equals(this.dataByUrlId, questionResultAggregationOverall.dataByUrlId) &&
        Objects.equals(this.countsByValue, questionResultAggregationOverall.countsByValue) &&
        Objects.equals(this.total, questionResultAggregationOverall.total) &&
        Objects.equals(this.average, questionResultAggregationOverall.average) &&
        Objects.equals(this.createdAt, questionResultAggregationOverall.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataByDateBucket, dataByUrlId, countsByValue, total, average, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuestionResultAggregationOverall {\n");
    sb.append("    dataByDateBucket: ").append(toIndentedString(dataByDateBucket)).append("\n");
    sb.append("    dataByUrlId: ").append(toIndentedString(dataByUrlId)).append("\n");
    sb.append("    countsByValue: ").append(toIndentedString(countsByValue)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    average: ").append(toIndentedString(average)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataByDateBucket");
    openapiFields.add("dataByUrlId");
    openapiFields.add("countsByValue");
    openapiFields.add("total");
    openapiFields.add("average");
    openapiFields.add("createdAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("total");
    openapiRequiredFields.add("createdAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuestionResultAggregationOverall
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuestionResultAggregationOverall.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuestionResultAggregationOverall is not found in the empty JSON string", QuestionResultAggregationOverall.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuestionResultAggregationOverall.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuestionResultAggregationOverall` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QuestionResultAggregationOverall.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuestionResultAggregationOverall.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuestionResultAggregationOverall' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuestionResultAggregationOverall> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuestionResultAggregationOverall.class));

       return (TypeAdapter<T>) new TypeAdapter<QuestionResultAggregationOverall>() {
           @Override
           public void write(JsonWriter out, QuestionResultAggregationOverall value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuestionResultAggregationOverall read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuestionResultAggregationOverall given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuestionResultAggregationOverall
   * @throws IOException if the JSON string is invalid with respect to QuestionResultAggregationOverall
   */
  public static QuestionResultAggregationOverall fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuestionResultAggregationOverall.class);
  }

  /**
   * Convert an instance of QuestionResultAggregationOverall to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

