openapi: 3.0.0
info:
  contact: {}
  title: fastcomments
  version: 0.0.0
servers:
- url: /
paths:
  /user-presence-status:
    get:
      operationId: GetUserPresenceStatuses
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: urlIdWS
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: userIds
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserPresenceStatuses_200_response'
          description: Ok
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Validation Failed
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /user-notifications:
    get:
      operationId: GetUserNotifications
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - description: Defaults to 20.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: afterId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: includeContext
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: afterCreatedAt
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: unreadOnly
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: dmOnly
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: noDm
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: includeTranslations
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserNotifications_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /user-notifications/reset:
    post:
      operationId: ResetUserNotifications
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: afterId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: afterCreatedAt
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: unreadOnly
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: dmOnly
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: noDm
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetUserNotifications_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /user-notifications/get-count:
    get:
      operationId: GetUserNotificationCount
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserNotificationCount_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /user-notifications/reset-count:
    post:
      operationId: ResetUserNotificationCount
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetUserNotifications_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /user-notifications/{notificationId}/mark/{newStatus}:
    post:
      operationId: UpdateUserNotificationStatus
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: notificationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: newStatus
        required: true
        schema:
          enum:
          - read
          - unread
          type: string
        style: simple
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserNotificationStatus_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /user-notifications/{notificationId}/mark-opted/{optedInOrOut}:
    post:
      description: Enable or disable notifications for a specific comment.
      operationId: UpdateUserNotificationCommentSubscriptionStatus
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: notificationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: optedInOrOut
        required: true
        schema:
          enum:
          - in
          - out
          type: string
        style: simple
      - explode: true
        in: query
        name: commentId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserNotificationStatus_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /user-notifications/set-subscription-state/{subscribedOrUnsubscribed}:
    post:
      description: |-
        Enable or disable notifications for a page. When users are subscribed to a page, notifications are created
        for new root comments, and also
      operationId: UpdateUserNotificationPageSubscriptionStatus
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: urlId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: url
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: pageTitle
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: subscribedOrUnsubscribed
        required: true
        schema:
          enum:
          - subscribe
          - unsubscribe
          type: string
        style: simple
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserNotificationStatus_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /flag-comment/{commentId}:
    post:
      operationId: FlagCommentPublic
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: isFlagged
        required: true
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlagCommentPublic_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /event-log/{tenantId}:
    get:
      description: |2-

        req
        tenantId
        urlId
        userIdWS
      operationId: GetEventLog
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: urlId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: userIdWS
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: startTime
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: endTime
        required: true
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventLog_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /event-log/global/{tenantId}:
    get:
      description: |2-

        req
        tenantId
        urlId
        userIdWS
      operationId: GetGlobalEventLog
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: urlId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: userIdWS
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: startTime
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: endTime
        required: true
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventLog_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /comments/{tenantId}/{commentId}/text:
    get:
      operationId: GetCommentText
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: editKey
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentText_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /comments/{tenantId}/{commentId}/update-text:
    post:
      operationId: SetCommentText
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: broadcastId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: editKey
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentTextUpdateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetCommentText_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-content-type: application/json
      x-accepts:
      - application/json
  /comments/{tenantId}:
    get:
      description: |2-

        req
        tenantId
        urlId
      operationId: GetCommentsPublic
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: urlId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: direction
        required: false
        schema:
          $ref: '#/components/schemas/SortDirections'
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: skipChildren
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: limitChildren
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: countChildren
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: lastGenDate
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: fetchPageForCommentId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: includeConfig
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: countAll
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: includei10n
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: locale
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: modules
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: isCrawler
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: includeNotificationCount
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: asTree
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: maxTreeDepth
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: useFullTranslationIds
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: parentId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: searchText
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: hashTags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: customConfigStr
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentsPublic_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
    post:
      operationId: CreateCommentPublic
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: urlId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: broadcastId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sessionId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentData'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCommentPublic_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-content-type: application/json
      x-accepts:
      - application/json
  /comments/{tenantId}/{commentId}:
    delete:
      operationId: DeleteCommentPublic
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: broadcastId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: editKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCommentPublic_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /check-blocked-comments:
    get:
      operationId: CheckedCommentsForBlocked
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - description: A comma separated list of comment ids.
        explode: true
        in: query
        name: commentIds
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckedCommentsForBlocked_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /comments/{tenantId}/{commentId}/vote:
    post:
      operationId: VoteComment
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: urlId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: broadcastId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sessionId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteBodyParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteComment_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-content-type: application/json
      x-accepts:
      - application/json
  /comments/{tenantId}/{commentId}/vote/{voteId}:
    delete:
      operationId: DeleteCommentVote
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: voteId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: urlId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: broadcastId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: editKey
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCommentVote_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /comments/{tenantId}/{commentId}/votes:
    get:
      operationId: GetCommentVoteUserNames
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: "Pass 1 for getting the names of users that up voted, and -1\
          \ for the usernames for users that down voted."
        explode: true
        in: query
        name: direction
        required: true
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentVoteUserNames_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /comments/{tenantId}/{commentId}/pin:
    post:
      operationId: PinComment
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: broadcastId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinComment_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /comments/{tenantId}/{commentId}/unpin:
    post:
      operationId: UnPinComment
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: broadcastId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinComment_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /comments/{tenantId}/{commentId}/lock:
    post:
      operationId: LockComment
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: broadcastId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockComment_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /comments/{tenantId}/{commentId}/unlock:
    post:
      operationId: UnLockComment
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: broadcastId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockComment_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-accepts:
      - application/json
  /block-from-comment/{commentId}:
    delete:
      operationId: UnBlockComment
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicBlockFromCommentParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnBlockComment_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-content-type: application/json
      x-accepts:
      - application/json
    post:
      operationId: BlockFromComment
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: sso
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicBlockFromCommentParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockFromComment_200_response'
          description: Ok
      security: []
      tags:
      - Public
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/feed-posts:
    get:
      operationId: GetFeedPosts
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: afterId
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFeedPosts_200_response'
          description: Ok
      security: []
      x-accepts:
      - application/json
    post:
      operationId: CreateFeedPost
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedPost'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFeedPost_200_response'
          description: Ok
      security: []
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/feed-posts/{id}:
    patch:
      operationId: UpdateFeedPost
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedPost'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlagCommentPublic_200_response'
          description: Ok
      security: []
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/domain-configs:
    get:
      operationId: GetDomainConfigs
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDomainConfigs_200_response'
          description: Ok
      security: []
      x-accepts:
      - application/json
    post:
      operationId: AddDomainConfig
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDomainConfigParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDomainConfig_200_response'
          description: Ok
      security: []
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/domain-configs/{domain}:
    delete:
      operationId: DeleteDomainConfig
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: domain
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDomainConfig_200_response'
          description: Ok
      security: []
      x-accepts:
      - application/json
    get:
      operationId: GetDomainConfig
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: domain
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDomainConfig_200_response'
          description: Ok
      security: []
      x-accepts:
      - application/json
  /api/v1/domain-configs/{domainToUpdate}:
    patch:
      operationId: PatchDomainConfig
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: domainToUpdate
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDomainConfigParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDomainConfig_200_response'
          description: Ok
      security: []
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      operationId: PutDomainConfig
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: domainToUpdate
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDomainConfigParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDomainConfig_200_response'
          description: Ok
      security: []
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/comments/{id}:
    delete:
      operationId: DeleteComment
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: contextUserId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: isLive
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteComment_200_response'
          description: Ok
      security: []
      x-accepts:
      - application/json
    get:
      operationId: GetComment
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetComment_200_response'
          description: Ok
      security: []
      x-accepts:
      - application/json
    patch:
      operationId: UpdateComment
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: contextUserId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: doSpamCheck
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: isLive
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatableCommentParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlagCommentPublic_200_response'
          description: Ok
      security: []
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/comments:
    get:
      operationId: GetComments
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: asTree
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: skipChildren
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: limitChildren
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: maxTreeDepth
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: urlId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: anonUserId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: contextUserId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: hashTag
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: parentId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: direction
        required: false
        schema:
          $ref: '#/components/schemas/SortDirections'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetComments_200_response'
          description: Ok
      security: []
      x-accepts:
      - application/json
    post:
      operationId: SaveComment
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: isLive
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: doSpamCheck
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sendEmails
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: populateNotifications
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveComment_200_response'
          description: Ok
      security: []
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/comments/{id}/flag:
    post:
      operationId: FlagComment
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: anonUserId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlagComment_200_response'
          description: Ok
      security: []
      x-accepts:
      - application/json
  /api/v1/comments/{id}/un-flag:
    post:
      operationId: UnFlagComment
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: anonUserId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlagComment_200_response'
          description: Ok
      security: []
      x-accepts:
      - application/json
  /api/v1/comments/{id}/block:
    post:
      operationId: BlockUserFromComment
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: anonUserId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockFromCommentParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockFromComment_200_response'
          description: Ok
      security: []
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/comments/{id}/un-block:
    post:
      operationId: UnBlockUserFromComment
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: anonUserId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnBlockFromCommentParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnBlockComment_200_response'
          description: Ok
      security: []
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/audit-logs:
    get:
      operationId: GetAuditLogs
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/SORT_DIR'
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: before
        required: false
        schema:
          format: double
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuditLogs_200_response'
          description: Ok
      security: []
      x-accepts:
      - application/json
  /api/v1/aggregate:
    post:
      description: |-
        Aggregates documents by grouping them (if groupBy is provided) and applying multiple operations.
        Different operations (e.g. sum, countDistinct, avg, etc.) are supported.
      operationId: Aggregate
      parameters:
      - explode: true
        in: query
        name: tenantId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: parentTenantId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: includeStats
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AggregationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregationResponse'
          description: Ok
      security: []
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  examples: {}
  headers: {}
  parameters: {}
  requestBodies: {}
  responses: {}
  schemas:
    Record_string.boolean_:
      additionalProperties:
        type: boolean
      description: Construct a type with a set of properties K of type T
      properties: {}
      type: object
    ImportedAPIStatus.SUCCESS:
      enum:
      - success
      type: string
    GetUserPresenceStatusesResponse:
      example:
        userIdsOnline:
          key: true
        status: success
      properties:
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
        userIdsOnline:
          additionalProperties:
            type: boolean
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      required:
      - status
      - userIdsOnline
      type: object
    APIStatus.FAILED:
      enum:
      - failed
      type: string
    CommentHTMLRenderingMode:
      enum:
      - 0
      - 1
      type: number
    CommentThreadDeletionMode:
      enum:
      - 0
      - 1
      - 2
      - 3
      type: number
    CommenterNameFormats:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      type: number
    SortDirections:
      enum:
      - OF
      - NF
      - MR
      type: string
    GifRating:
      enum:
      - g
      - pg
      - pg-13
      - r
      type: string
    SSOSecurityLevel:
      enum:
      - 0
      - 1
      type: number
    SpamRule:
      additionalProperties: false
      example:
        commentContains: commentContains
        actions:
        - spam
        - spam
      properties:
        actions:
          items:
            enum:
            - spam
            - not-spam
            - ignore-repeat
            type: string
          type: array
        commentContains:
          type: string
      required:
      - actions
      type: object
    Record_string.string_:
      additionalProperties:
        type: string
      description: Construct a type with a set of properties K of type T
      properties: {}
      type: object
    VoteStyle:
      enum:
      - 0
      - 1
      type: number
    CommentQuestionResultsRenderingType:
      enum:
      - 0
      - 1
      - 2
      type: number
    QuestionRenderingType:
      enum:
      - 0
      - 1
      type: number
    QuestionWhenSave:
      enum:
      - 0
      - 1
      type: number
    CommentQuestionsRequired:
      enum:
      - 0
      - 1
      type: number
    QuestionSubQuestionVisibility:
      enum:
      - 0
      - 1
      type: number
    CustomConfigParameters:
      additionalProperties: false
      example:
        disableAutoHashTagCreation: true
        disableCommenterCommentDelete: true
        enableVoteList: true
        pageSize: 7.061401241503109
        collapseReplies: true
        disableProfiles: true
        disableSuccessMessage: true
        allowAnon: true
        countAboveToggle: 5.962133916683182
        readonly: true
        useShowCommentsToggle: true
        noImageUploads: true
        spamRules:
        - commentContains: commentContains
          actions:
          - spam
          - spam
        - commentContains: commentContains
          actions:
          - spam
          - spam
        translations: ""
        widgetQuestionId: widgetQuestionId
        disableLiveCommenting: true
        ssoSecLvl: 9.301444243932576
        defaultSortDirection: ""
        disableVoting: true
        noCustomConfig: true
        gifRating: g
        enableSearch: true
        requireSSO: true
        disableToolbar: true
        hideCommentsUnderCountTextFormat: hideCommentsUnderCountTextFormat
        maxCommentCreatedCountPUPM: 2.3021358869347655
        disableBlocking: true
        disableEmailInputs: true
        widgetQuestionWhenToSave: 7.386281948385884
        allowAnonFlag: true
        widgetSubQuestionVisibility: 1.0246457001441578
        widgetQuestionStyle: 4.145608029883936
        restrictedLinkDomains:
        - restrictedLinkDomains
        - restrictedLinkDomains
        showQuestion: true
        inputAfterComments: true
        allowAnonVotes: true
        commentThreadDeleteMode: ""
        commentCountFormat: commentCountFormat
        disableNotificationBell: true
        voteStyle: 3.616076749251911
        disableAutoAdminMigration: true
        absoluteAndRelativeDates: true
        commenterNameFormat: ""
        enableThirdPartyCookieBypass: true
        locale: locale
        showCommentSaveSuccess: true
        disableCommenterCommentEdit: true
        enableCommenterLinks: true
        enableSpoilers: true
        disableUnverifiedLabel: true
        noStyles: true
        absoluteDates: true
        limitCommentsByGroups: true
        enableWYSIWYG: true
        customCSS: customCSS
        enableViewCounts: true
        headerHTML: headerHTML
        hideAvatars: true
        defaultAvatarSrc: defaultAvatarSrc
        commentHTMLRenderingMode: 1.4658129805029452
        maxCommentCharacterLength: 5.637376656633329
        useSingleLineCommentInput: true
        allowedLanguages:
        - allowedLanguages
        - allowedLanguages
        defaultUsername: defaultUsername
        widgetQuestionResultsStyle: 2.027123023002322
        showLiveRightAway: true
        widgetQuestionsRequired: 1.2315135367772556
        hasDarkBackground: true
        wrap: true
      properties:
        absoluteAndRelativeDates:
          type: boolean
        absoluteDates:
          type: boolean
        allowAnon:
          type: boolean
        allowAnonFlag:
          type: boolean
        allowAnonVotes:
          type: boolean
        allowedLanguages:
          items:
            type: string
          nullable: true
          type: array
        collapseReplies:
          type: boolean
        commentCountFormat:
          nullable: true
          type: string
        commentHTMLRenderingMode:
          $ref: '#/components/schemas/CommentHTMLRenderingMode'
        commentThreadDeleteMode:
          allOf:
          - $ref: '#/components/schemas/CommentThreadDeletionMode'
          nullable: true
        commenterNameFormat:
          allOf:
          - $ref: '#/components/schemas/CommenterNameFormats'
          nullable: true
        countAboveToggle:
          format: double
          type: number
        customCSS:
          nullable: true
          type: string
        defaultAvatarSrc:
          nullable: true
          type: string
        defaultSortDirection:
          allOf:
          - $ref: '#/components/schemas/SortDirections'
          nullable: true
        defaultUsername:
          nullable: true
          type: string
        disableAutoAdminMigration:
          type: boolean
        disableAutoHashTagCreation:
          type: boolean
        disableBlocking:
          type: boolean
        disableCommenterCommentDelete:
          type: boolean
        disableCommenterCommentEdit:
          type: boolean
        disableEmailInputs:
          type: boolean
        disableLiveCommenting:
          type: boolean
        disableNotificationBell:
          type: boolean
        disableProfiles:
          type: boolean
        disableSuccessMessage:
          type: boolean
        disableToolbar:
          type: boolean
        disableUnverifiedLabel:
          type: boolean
        disableVoting:
          type: boolean
        enableCommenterLinks:
          type: boolean
        enableSearch:
          type: boolean
        enableSpoilers:
          type: boolean
        enableThirdPartyCookieBypass:
          type: boolean
        enableViewCounts:
          type: boolean
        enableVoteList:
          type: boolean
        enableWYSIWYG:
          type: boolean
        gifRating:
          $ref: '#/components/schemas/GifRating'
        hasDarkBackground:
          type: boolean
        headerHTML:
          nullable: true
          type: string
        hideAvatars:
          type: boolean
        hideCommentsUnderCountTextFormat:
          nullable: true
          type: string
        inputAfterComments:
          type: boolean
        limitCommentsByGroups:
          type: boolean
        locale:
          nullable: true
          type: string
        maxCommentCharacterLength:
          format: double
          nullable: true
          type: number
        maxCommentCreatedCountPUPM:
          format: double
          nullable: true
          type: number
        noCustomConfig:
          type: boolean
        noImageUploads:
          type: boolean
        noStyles:
          type: boolean
        pageSize:
          format: double
          nullable: true
          type: number
        readonly:
          type: boolean
        requireSSO:
          type: boolean
        ssoSecLvl:
          $ref: '#/components/schemas/SSOSecurityLevel'
        restrictedLinkDomains:
          items:
            type: string
          nullable: true
          type: array
        showCommentSaveSuccess:
          type: boolean
        showLiveRightAway:
          type: boolean
        showQuestion:
          type: boolean
        spamRules:
          items:
            $ref: '#/components/schemas/SpamRule'
          type: array
        translations:
          allOf:
          - $ref: '#/components/schemas/Record_string.string_'
          nullable: true
        useShowCommentsToggle:
          type: boolean
        useSingleLineCommentInput:
          type: boolean
        voteStyle:
          $ref: '#/components/schemas/VoteStyle'
        widgetQuestionId:
          type: string
        widgetQuestionResultsStyle:
          $ref: '#/components/schemas/CommentQuestionResultsRenderingType'
        widgetQuestionStyle:
          $ref: '#/components/schemas/QuestionRenderingType'
        widgetQuestionWhenToSave:
          $ref: '#/components/schemas/QuestionWhenSave'
        widgetQuestionsRequired:
          $ref: '#/components/schemas/CommentQuestionsRequired'
        widgetSubQuestionVisibility:
          $ref: '#/components/schemas/QuestionSubQuestionVisibility'
        wrap:
          type: boolean
      type: object
    Pick_APIErrorInternal.Exclude_keyofAPIErrorInternal.statusCode__:
      description: "From T, pick a set of properties whose keys are in the union K"
      example:
        reason: reason
        code: code
        bannedUntil: 0.8008281904610115
        customConfig:
          disableAutoHashTagCreation: true
          disableCommenterCommentDelete: true
          enableVoteList: true
          pageSize: 7.061401241503109
          collapseReplies: true
          disableProfiles: true
          disableSuccessMessage: true
          allowAnon: true
          countAboveToggle: 5.962133916683182
          readonly: true
          useShowCommentsToggle: true
          noImageUploads: true
          spamRules:
          - commentContains: commentContains
            actions:
            - spam
            - spam
          - commentContains: commentContains
            actions:
            - spam
            - spam
          translations: ""
          widgetQuestionId: widgetQuestionId
          disableLiveCommenting: true
          ssoSecLvl: 9.301444243932576
          defaultSortDirection: ""
          disableVoting: true
          noCustomConfig: true
          gifRating: g
          enableSearch: true
          requireSSO: true
          disableToolbar: true
          hideCommentsUnderCountTextFormat: hideCommentsUnderCountTextFormat
          maxCommentCreatedCountPUPM: 2.3021358869347655
          disableBlocking: true
          disableEmailInputs: true
          widgetQuestionWhenToSave: 7.386281948385884
          allowAnonFlag: true
          widgetSubQuestionVisibility: 1.0246457001441578
          widgetQuestionStyle: 4.145608029883936
          restrictedLinkDomains:
          - restrictedLinkDomains
          - restrictedLinkDomains
          showQuestion: true
          inputAfterComments: true
          allowAnonVotes: true
          commentThreadDeleteMode: ""
          commentCountFormat: commentCountFormat
          disableNotificationBell: true
          voteStyle: 3.616076749251911
          disableAutoAdminMigration: true
          absoluteAndRelativeDates: true
          commenterNameFormat: ""
          enableThirdPartyCookieBypass: true
          locale: locale
          showCommentSaveSuccess: true
          disableCommenterCommentEdit: true
          enableCommenterLinks: true
          enableSpoilers: true
          disableUnverifiedLabel: true
          noStyles: true
          absoluteDates: true
          limitCommentsByGroups: true
          enableWYSIWYG: true
          customCSS: customCSS
          enableViewCounts: true
          headerHTML: headerHTML
          hideAvatars: true
          defaultAvatarSrc: defaultAvatarSrc
          commentHTMLRenderingMode: 1.4658129805029452
          maxCommentCharacterLength: 5.637376656633329
          useSingleLineCommentInput: true
          allowedLanguages:
          - allowedLanguages
          - allowedLanguages
          defaultUsername: defaultUsername
          widgetQuestionResultsStyle: 2.027123023002322
          showLiveRightAway: true
          widgetQuestionsRequired: 1.2315135367772556
          hasDarkBackground: true
          wrap: true
        translatedError: translatedError
        secondaryCode: secondaryCode
        maxCharacterLength: 6.027456183070403
        status: failed
      properties:
        status:
          $ref: '#/components/schemas/APIStatus.FAILED'
        reason:
          type: string
        code:
          type: string
        secondaryCode:
          type: string
        bannedUntil:
          format: double
          type: number
        maxCharacterLength:
          format: double
          type: number
        translatedError:
          type: string
        customConfig:
          $ref: '#/components/schemas/CustomConfigParameters'
      required:
      - code
      - reason
      - status
      type: object
    Omit_APIErrorInternal.statusCode_:
      $ref: '#/components/schemas/Pick_APIErrorInternal.Exclude_keyofAPIErrorInternal.statusCode__'
    APIError:
      $ref: '#/components/schemas/Omit_APIErrorInternal.statusCode_'
    NotificationType:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      type: number
    ? Pick_UserNotification._id-or-urlId-or-url-or-pageTitle-or-relatedObjectType-or-relatedObjectId-or-viewed-or-sent-or-createdAt-or-type-or-fromCommentId-or-fromUserName-or-fromUserId-or-fromUserAvatarSrc-or-optedOut_
    : description: "From T, pick a set of properties whose keys are in the union K"
      properties:
        _id:
          type: string
        urlId:
          type: string
        url:
          type: string
        pageTitle:
          type: string
        relatedObjectType:
          format: double
          type: number
        relatedObjectId:
          type: string
        viewed:
          type: boolean
        sent:
          type: boolean
        createdAt:
          format: date-time
          type: string
        type:
          $ref: '#/components/schemas/NotificationType'
        fromCommentId:
          type: string
        fromUserName:
          type: string
        fromUserId:
          type: string
        fromUserAvatarSrc:
          type: string
        optedOut:
          type: boolean
      required:
      - _id
      - createdAt
      - fromUserId
      - fromUserName
      - optedOut
      - relatedObjectId
      - relatedObjectType
      - sent
      - type
      - url
      - urlId
      - viewed
      type: object
    RenderableUserNotification:
      allOf:
      - $ref: '#/components/schemas/Pick_UserNotification._id-or-urlId-or-url-or-pageTitle-or-relatedObjectType-or-relatedObjectId-or-viewed-or-sent-or-createdAt-or-type-or-fromCommentId-or-fromUserName-or-fromUserId-or-fromUserAvatarSrc-or-optedOut_'
      - properties:
          conversationId:
            type: string
          contextHTML:
            type: string
        type: object
      example:
        fromUserAvatarSrc: fromUserAvatarSrc
        contextHTML: contextHTML
        relatedObjectId: relatedObjectId
        fromCommentId: fromCommentId
        pageTitle: pageTitle
        fromUserId: fromUserId
        conversationId: conversationId
        urlId: urlId
        type: 6.027456183070403
        sent: true
        url: url
        fromUserName: fromUserName
        optedOut: true
        createdAt: 2000-01-23T04:56:07.000+00:00
        viewed: true
        _id: _id
        relatedObjectType: 0.8008281904610115
    GetMyNotificationsResponse:
      example:
        isSubscribed: true
        translations:
          key: translations
        hasMore: true
        notifications:
        - fromUserAvatarSrc: fromUserAvatarSrc
          contextHTML: contextHTML
          relatedObjectId: relatedObjectId
          fromCommentId: fromCommentId
          pageTitle: pageTitle
          fromUserId: fromUserId
          conversationId: conversationId
          urlId: urlId
          type: 6.027456183070403
          sent: true
          url: url
          fromUserName: fromUserName
          optedOut: true
          createdAt: 2000-01-23T04:56:07.000+00:00
          viewed: true
          _id: _id
          relatedObjectType: 0.8008281904610115
        - fromUserAvatarSrc: fromUserAvatarSrc
          contextHTML: contextHTML
          relatedObjectId: relatedObjectId
          fromCommentId: fromCommentId
          pageTitle: pageTitle
          fromUserId: fromUserId
          conversationId: conversationId
          urlId: urlId
          type: 6.027456183070403
          sent: true
          url: url
          fromUserName: fromUserName
          optedOut: true
          createdAt: 2000-01-23T04:56:07.000+00:00
          viewed: true
          _id: _id
          relatedObjectType: 0.8008281904610115
        status: success
      properties:
        translations:
          additionalProperties:
            type: string
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
        isSubscribed:
          type: boolean
        hasMore:
          type: boolean
        notifications:
          items:
            $ref: '#/components/schemas/RenderableUserNotification'
          type: array
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
      required:
      - hasMore
      - isSubscribed
      - notifications
      - status
      type: object
    ResetUserNotificationsResponse:
      additionalProperties: false
      example:
        code: ignored-since-impersonated
        status: success
      properties:
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
        code:
          enum:
          - ignored-since-impersonated
          nullable: false
          type: string
      required:
      - status
      type: object
    GetUserNotificationCountResponse:
      additionalProperties: false
      example:
        count: 0.8008281904610115
        status: success
      properties:
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
        count:
          format: double
          type: number
      required:
      - count
      - status
      type: object
    EnumAsObject_typeofNotificationType_:
      properties: {}
      type: object
    NotificationAndCount:
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/NotificationType'
        count:
          format: double
          type: number
      required:
      - count
      - type
      type: object
    HeaderState:
      additionalProperties: false
      properties:
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
        NotificationType:
          properties: {}
          type: object
        userId:
          type: string
        userIdWS:
          type: string
        notificationCounts:
          items:
            $ref: '#/components/schemas/NotificationAndCount'
          type: array
      required:
      - NotificationType
      - notificationCounts
      - status
      - userId
      - userIdWS
      type: object
    UserNotificationWriteResponse:
      additionalProperties: false
      example:
        modifiedCount: 6.027456183070403
        matchedCount: 0.8008281904610115
        status: success
      properties:
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
        matchedCount:
          format: double
          type: number
        modifiedCount:
          format: double
          type: number
      required:
      - matchedCount
      - modifiedCount
      - status
      type: object
    IgnoredResponse:
      additionalProperties: false
      properties:
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
        note:
          enum:
          - ignored-since-impersonated
          - demo-noop
          type: string
      required:
      - note
      - status
      type: object
    ImportedAPIStatus.FAILED:
      enum:
      - failed
      type: string
    APIErrorInternal:
      additionalProperties: false
      properties:
        statusCode:
          format: double
          type: number
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.FAILED'
        reason:
          type: string
        code:
          type: string
        secondaryCode:
          type: string
        bannedUntil:
          format: double
          type: number
        maxCharacterLength:
          format: double
          type: number
        translatedError:
          type: string
        customConfig:
          $ref: '#/components/schemas/CustomConfigParameters'
      required:
      - code
      - reason
      - status
      type: object
    APIEmptyResponse:
      anyOf:
      - $ref: '#/components/schemas/APIEmptyResponse_anyOf'
      - $ref: '#/components/schemas/APIErrorInternal'
    EventLogEntry:
      additionalProperties: false
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        data: data
        broadcastId: broadcastId
        tenantId: tenantId
        _id: _id
        urlId: urlId
      properties:
        _id:
          type: string
        createdAt:
          format: date-time
          type: string
        tenantId:
          type: string
        urlId:
          type: string
        broadcastId:
          type: string
        data:
          type: string
      required:
      - _id
      - broadcastId
      - createdAt
      - data
      - tenantId
      - urlId
      type: object
    GetEventLogResponse:
      example:
        events:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          data: data
          broadcastId: broadcastId
          tenantId: tenantId
          _id: _id
          urlId: urlId
        - createdAt: 2000-01-23T04:56:07.000+00:00
          data: data
          broadcastId: broadcastId
          tenantId: tenantId
          _id: _id
          urlId: urlId
        status: success
      properties:
        events:
          items:
            $ref: '#/components/schemas/EventLogEntry'
          type: array
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
      required:
      - events
      - status
      type: object
    LiveEventType:
      enum:
      - update-badges
      - notification
      - p-u
      - new-vote
      - deleted-vote
      - new-comment
      - updated-comment
      - deleted-comment
      - cvc
      - new-config
      - thread-state-change
      type: string
    CommentUserBadgeInfo:
      additionalProperties: false
      example:
        displayLabel: displayLabel
        backgroundColor: backgroundColor
        borderColor: borderColor
        cssClass: cssClass
        description: description
        id: id
        type: 9.301444243932576
        textColor: textColor
        displaySrc: displaySrc
      properties:
        id:
          type: string
        type:
          format: double
          type: number
        description:
          type: string
        displayLabel:
          nullable: true
          type: string
        displaySrc:
          nullable: true
          type: string
        backgroundColor:
          nullable: true
          type: string
        borderColor:
          nullable: true
          type: string
        textColor:
          nullable: true
          type: string
        cssClass:
          nullable: true
          type: string
      required:
      - description
      - id
      - type
      type: object
    TenantId:
      type: string
    UserNotification:
      additionalProperties: false
      properties:
        _id:
          type: string
        tenantId:
          type: string
        userId:
          nullable: true
          type: string
        anonUserId:
          nullable: true
          type: string
        urlId:
          type: string
        url:
          type: string
        pageTitle:
          nullable: true
          type: string
        relatedObjectType:
          format: double
          type: number
        relatedObjectId:
          type: string
        viewed:
          type: boolean
        isUnreadMessage:
          type: boolean
        sent:
          type: boolean
        createdAt:
          format: date-time
          type: string
        type:
          $ref: '#/components/schemas/NotificationType'
        fromCommentId:
          nullable: true
          type: string
        fromVoteId:
          nullable: true
          type: string
        fromUserName:
          nullable: true
          type: string
        fromUserId:
          nullable: true
          type: string
        fromUserAvatarSrc:
          nullable: true
          type: string
        optedOut:
          type: boolean
      required:
      - _id
      - createdAt
      - isUnreadMessage
      - optedOut
      - relatedObjectId
      - relatedObjectType
      - sent
      - tenantId
      - type
      - url
      - urlId
      - viewed
      type: object
    PubSubVote:
      additionalProperties: false
      properties:
        _id:
          type: string
        tenantId:
          type: string
        urlId:
          type: string
        urlIdRaw:
          type: string
        commentId:
          type: string
        userId:
          nullable: true
          type: string
        direction:
          format: int32
          type: integer
        createdAt:
          format: int64
          type: integer
        verificationId:
          nullable: true
          type: string
      required:
      - _id
      - commentId
      - createdAt
      - direction
      - tenantId
      - urlId
      - urlIdRaw
      - verificationId
      type: object
    Pick_Omit_FComment.date_.PublicCommentPubSubFieldsKeys_:
      description: "From T, pick a set of properties whose keys are in the union K"
      properties:
        _id:
          type: string
        urlId:
          type: string
        url:
          type: string
        pageTitle:
          type: string
        date: {}
        tenantId:
          type: string
        userId:
          type: string
        anonUserId:
          type: string
        commenterName:
          type: string
        commenterLink:
          type: string
        comment:
          type: string
        commentHTML:
          type: string
        parentId:
          type: string
        votes:
          format: int32
          type: integer
        votesUp:
          format: int32
          type: integer
        votesDown:
          format: int32
          type: integer
        expireAt:
          format: date-time
          type: string
        verified:
          type: boolean
        reviewed:
          type: boolean
        avatarSrc:
          type: string
        isSpam:
          type: boolean
        hasImages:
          type: boolean
        hasLinks:
          type: boolean
        hasCode:
          type: boolean
        approved:
          type: boolean
        locale:
          type: string
        isDeleted:
          type: boolean
        isDeletedUser:
          type: boolean
        isBannedUser:
          type: boolean
        isByAdmin:
          type: boolean
        isByModerator:
          type: boolean
        isPinned:
          type: boolean
        isLocked:
          type: boolean
        flagCount:
          format: int32
          type: integer
        rating:
          format: double
          type: number
        displayLabel:
          type: string
        badges:
          items:
            $ref: '#/components/schemas/CommentUserBadgeInfo'
          type: array
        domain:
          type: string
        feedbackIds:
          items:
            type: string
          type: array
        groupIds:
          items:
            type: string
          type: array
        viewCount:
          format: double
          type: number
      required:
      - _id
      - approved
      - comment
      - commentHTML
      - commenterName
      - date
      - locale
      - tenantId
      - url
      - urlId
      - verified
      type: object
    PubSubComment:
      allOf:
      - $ref: '#/components/schemas/Pick_Omit_FComment.date_.PublicCommentPubSubFieldsKeys_'
      - properties:
          isLive:
            type: boolean
          hidden:
            type: boolean
          date:
            type: string
        required:
        - date
        type: object
    Record_string._before-string-or-null--after-string-or-null__:
      additionalProperties:
        $ref: '#/components/schemas/Record_string__before_string_or_null__after_string_or_null___value'
      description: Construct a type with a set of properties K of type T
      properties: {}
      type: object
    CommentPositions:
      $ref: '#/components/schemas/Record_string._before-string-or-null--after-string-or-null__'
    Record_string.number_:
      additionalProperties:
        format: double
        type: number
      description: Construct a type with a set of properties K of type T
      properties: {}
      type: object
    LiveEvent:
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/LiveEventType'
        timestamp:
          format: int64
          type: integer
        ts:
          format: int64
          type: integer
        broadcastId:
          type: string
        userId:
          type: string
        badges:
          items:
            $ref: '#/components/schemas/CommentUserBadgeInfo'
          type: array
        notification:
          $ref: '#/components/schemas/UserNotification'
        vote:
          $ref: '#/components/schemas/PubSubVote'
        comment:
          $ref: '#/components/schemas/PubSubComment'
        extraInfo:
          $ref: '#/components/schemas/LiveEvent_extraInfo'
        config:
          additionalProperties: false
          type: object
        isClosed:
          type: boolean
        uj:
          items:
            type: string
          type: array
        ul:
          items:
            type: string
          type: array
        changes:
          additionalProperties:
            format: double
            type: number
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      required:
      - type
      type: object
    PublicAPIGetCommentTextResponse:
      example:
        sanitizedCommentText: sanitizedCommentText
        commentText: commentText
        status: success
      properties:
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
        commentText:
          type: string
        sanitizedCommentText:
          type: string
      required:
      - commentText
      - sanitizedCommentText
      - status
      type: object
    Pick_FComment.approved-or-commentHTML_:
      description: "From T, pick a set of properties whose keys are in the union K"
      example:
        commentHTML: commentHTML
        approved: true
      properties:
        commentHTML:
          type: string
        approved:
          type: boolean
      required:
      - approved
      - commentHTML
      type: object
    PublicAPISetCommentTextResponse:
      example:
        comment:
          commentHTML: commentHTML
          approved: true
        status: success
      properties:
        comment:
          $ref: '#/components/schemas/Pick_FComment.approved-or-commentHTML_'
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
      required:
      - comment
      - status
      type: object
    CommentUserMentionInfo:
      additionalProperties: false
      example:
        rawTag: rawTag
        id: id
        tag: tag
        type: user
        sent: true
      properties:
        id:
          type: string
        tag:
          type: string
        rawTag:
          type: string
        type:
          enum:
          - user
          - sso
          type: string
        sent:
          type: boolean
      required:
      - id
      - tag
      type: object
    CommentUserHashTagInfo:
      additionalProperties: false
      example:
        retain: true
        id: id
        tag: tag
        url: url
      properties:
        id:
          type: string
        tag:
          type: string
        url:
          nullable: true
          type: string
        retain:
          type: boolean
      required:
      - id
      - tag
      - url
      type: object
    CommentTextUpdateRequest:
      additionalProperties: false
      example:
        hashTags:
        - retain: true
          id: id
          tag: tag
          url: url
        - retain: true
          id: id
          tag: tag
          url: url
        mentions:
        - rawTag: rawTag
          id: id
          tag: tag
          type: user
          sent: true
        - rawTag: rawTag
          id: id
          tag: tag
          type: user
          sent: true
        comment: comment
      properties:
        comment:
          type: string
        mentions:
          items:
            $ref: '#/components/schemas/CommentUserMentionInfo'
          type: array
        hashTags:
          items:
            $ref: '#/components/schemas/CommentUserHashTagInfo'
          type: array
      required:
      - comment
      type: object
    PublicComment:
      allOf:
      - properties:
          isUnread:
            type: boolean
          myVoteId:
            type: string
          isVotedDown:
            type: boolean
          isVotedUp:
            type: boolean
          hasChildren:
            description: This is always set when asTree=true
            type: boolean
          nestedChildrenCount:
            description: "The total nested child count included in this response (may\
              \ be more available w/ pagination) Only set with asTree=true, otherwise\
              \ this will be null."
            format: int32
            type: integer
          childCount:
            description: "You must ask the API to count children (with asTree=true&countChildren=true),\
              \ otherwise this will be null. This will be the complete direct child\
              \ count, whereas children may only contain a subset based on pagination."
            format: int32
            type: integer
          children:
            items:
              $ref: '#/components/schemas/PublicComment'
            type: array
          isFlagged:
            type: boolean
          isBlocked:
            type: boolean
        type: object
      - $ref: '#/components/schemas/Pick_FComment.PublicCommentFieldsKeys_'
      example:
        date: 2000-01-23T04:56:07.000+00:00
        votesDown: 2
        hasChildren: true
        commenterName: commenterName
        isBlocked: true
        isByModerator: true
        rating: 7.061401241503109
        commenterLink: commenterLink
        isVotedDown: true
        commentHTML: commentHTML
        isDeleted: true
        children:
        - null
        - null
        nestedChildrenCount: 6
        isLocked: true
        viewCount: 3.616076749251911
        votesUp: 5
        displayLabel: displayLabel
        isPinned: true
        isVotedUp: true
        verified: true
        feedbackIds:
        - feedbackIds
        - feedbackIds
        anonUserId: anonUserId
        childCount: 1
        userId: userId
        isUnread: true
        parentId: parentId
        isFlagged: true
        badges:
        - displayLabel: displayLabel
          backgroundColor: backgroundColor
          borderColor: borderColor
          cssClass: cssClass
          description: description
          id: id
          type: 9.301444243932576
          textColor: textColor
          displaySrc: displaySrc
        - displayLabel: displayLabel
          backgroundColor: backgroundColor
          borderColor: borderColor
          cssClass: cssClass
          description: description
          id: id
          type: 9.301444243932576
          textColor: textColor
          displaySrc: displaySrc
        myVoteId: myVoteId
        isDeletedUser: true
        avatarSrc: avatarSrc
        hasImages: true
        votes: 5
        _id: _id
        isSpam: true
        isByAdmin: true
    Pick_FComment.PublicCommentFieldsKeys_:
      description: "From T, pick a set of properties whose keys are in the union K"
      properties:
        _id:
          type: string
        date:
          format: date-time
          type: string
        userId:
          type: string
        anonUserId:
          type: string
        commenterName:
          type: string
        commenterLink:
          type: string
        commentHTML:
          type: string
        parentId:
          type: string
        votes:
          format: int32
          type: integer
        votesUp:
          format: int32
          type: integer
        votesDown:
          format: int32
          type: integer
        verified:
          type: boolean
        avatarSrc:
          type: string
        isSpam:
          type: boolean
        hasImages:
          type: boolean
        isDeleted:
          type: boolean
        isDeletedUser:
          type: boolean
        isByAdmin:
          type: boolean
        isByModerator:
          type: boolean
        isPinned:
          type: boolean
        isLocked:
          type: boolean
        rating:
          format: double
          type: number
        displayLabel:
          type: string
        badges:
          items:
            $ref: '#/components/schemas/CommentUserBadgeInfo'
          type: array
        feedbackIds:
          items:
            type: string
          type: array
        viewCount:
          format: double
          type: number
      required:
      - _id
      - commentHTML
      - commenterName
      - date
      - verified
      type: object
    UserSessionInfo:
      additionalProperties: false
      properties:
        id:
          type: string
        authorized:
          type: boolean
        avatarSrc:
          nullable: true
          type: string
        displayLabel:
          type: string
        displayName:
          type: string
        email:
          nullable: true
          type: string
        groupIds:
          items:
            type: string
          type: array
        hasBlockedUsers:
          type: boolean
        isAnonSession:
          type: boolean
        sessionId:
          nullable: true
          type: string
        username:
          type: string
        websiteUrl:
          type: string
      type: object
    Record_string.any_:
      additionalProperties: {}
      description: Construct a type with a set of properties K of type T
      properties: {}
      type: object
    GetCommentsResponse_PublicComment_:
      additionalProperties: false
      properties:
        statusCode:
          format: int32
          type: integer
        status:
          type: string
        code:
          type: string
        reason:
          type: string
        comments:
          items:
            $ref: '#/components/schemas/PublicComment'
          type: array
        user:
          allOf:
          - $ref: '#/components/schemas/UserSessionInfo'
          nullable: true
        urlIdClean:
          type: string
        lastGenDate:
          format: int64
          nullable: true
          type: integer
        includesPastPages:
          type: boolean
        isDemo:
          nullable: false
          type: boolean
        commentCount:
          format: int32
          type: integer
        isSiteAdmin:
          type: boolean
        hasBillingIssue:
          nullable: false
          type: boolean
        moduleData:
          additionalProperties: {}
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
        pageNumber:
          format: int32
          type: integer
        isWhiteLabeled:
          type: boolean
        isProd:
          nullable: false
          type: boolean
        isCrawler:
          nullable: false
          type: boolean
        notificationCount:
          format: int32
          type: integer
        hasMore:
          type: boolean
        isClosed:
          type: boolean
        presencePollState:
          format: int32
          type: integer
        customConfig:
          $ref: '#/components/schemas/CustomConfigParameters'
      required:
      - comments
      - pageNumber
      - status
      - user
      type: object
    TenantIdWS:
      type: string
    UserIdWS:
      type: string
    UrlIdWS:
      type: string
    UserPresenceData:
      properties:
        urlIdWS:
          type: string
        userIdWS:
          type: string
        tenantIdWS:
          type: string
      type: object
    GetCommentsResponseWithPresence_PublicComment_:
      allOf:
      - $ref: '#/components/schemas/GetCommentsResponse_PublicComment_'
      - $ref: '#/components/schemas/UserPresenceData'
      example:
        reason: reason
        code: code
        pageNumber: 7
        isProd: true
        urlIdClean: urlIdClean
        hasMore: true
        isDemo: true
        urlIdWS: urlIdWS
        customConfig:
          disableAutoHashTagCreation: true
          disableCommenterCommentDelete: true
          enableVoteList: true
          pageSize: 7.061401241503109
          collapseReplies: true
          disableProfiles: true
          disableSuccessMessage: true
          allowAnon: true
          countAboveToggle: 5.962133916683182
          readonly: true
          useShowCommentsToggle: true
          noImageUploads: true
          spamRules:
          - commentContains: commentContains
            actions:
            - spam
            - spam
          - commentContains: commentContains
            actions:
            - spam
            - spam
          translations: ""
          widgetQuestionId: widgetQuestionId
          disableLiveCommenting: true
          ssoSecLvl: 9.301444243932576
          defaultSortDirection: ""
          disableVoting: true
          noCustomConfig: true
          gifRating: g
          enableSearch: true
          requireSSO: true
          disableToolbar: true
          hideCommentsUnderCountTextFormat: hideCommentsUnderCountTextFormat
          maxCommentCreatedCountPUPM: 2.3021358869347655
          disableBlocking: true
          disableEmailInputs: true
          widgetQuestionWhenToSave: 7.386281948385884
          allowAnonFlag: true
          widgetSubQuestionVisibility: 1.0246457001441578
          widgetQuestionStyle: 4.145608029883936
          restrictedLinkDomains:
          - restrictedLinkDomains
          - restrictedLinkDomains
          showQuestion: true
          inputAfterComments: true
          allowAnonVotes: true
          commentThreadDeleteMode: ""
          commentCountFormat: commentCountFormat
          disableNotificationBell: true
          voteStyle: 3.616076749251911
          disableAutoAdminMigration: true
          absoluteAndRelativeDates: true
          commenterNameFormat: ""
          enableThirdPartyCookieBypass: true
          locale: locale
          showCommentSaveSuccess: true
          disableCommenterCommentEdit: true
          enableCommenterLinks: true
          enableSpoilers: true
          disableUnverifiedLabel: true
          noStyles: true
          absoluteDates: true
          limitCommentsByGroups: true
          enableWYSIWYG: true
          customCSS: customCSS
          enableViewCounts: true
          headerHTML: headerHTML
          hideAvatars: true
          defaultAvatarSrc: defaultAvatarSrc
          commentHTMLRenderingMode: 1.4658129805029452
          maxCommentCharacterLength: 5.637376656633329
          useSingleLineCommentInput: true
          allowedLanguages:
          - allowedLanguages
          - allowedLanguages
          defaultUsername: defaultUsername
          widgetQuestionResultsStyle: 2.027123023002322
          showLiveRightAway: true
          widgetQuestionsRequired: 1.2315135367772556
          hasDarkBackground: true
          wrap: true
        hasBillingIssue: true
        isCrawler: true
        lastGenDate: 2
        comments:
        - date: 2000-01-23T04:56:07.000+00:00
          votesDown: 2
          hasChildren: true
          commenterName: commenterName
          isBlocked: true
          isByModerator: true
          rating: 7.061401241503109
          commenterLink: commenterLink
          isVotedDown: true
          commentHTML: commentHTML
          isDeleted: true
          children:
          - null
          - null
          nestedChildrenCount: 6
          isLocked: true
          viewCount: 3.616076749251911
          votesUp: 5
          displayLabel: displayLabel
          isPinned: true
          isVotedUp: true
          verified: true
          feedbackIds:
          - feedbackIds
          - feedbackIds
          anonUserId: anonUserId
          childCount: 1
          userId: userId
          isUnread: true
          parentId: parentId
          isFlagged: true
          badges:
          - displayLabel: displayLabel
            backgroundColor: backgroundColor
            borderColor: borderColor
            cssClass: cssClass
            description: description
            id: id
            type: 9.301444243932576
            textColor: textColor
            displaySrc: displaySrc
          - displayLabel: displayLabel
            backgroundColor: backgroundColor
            borderColor: borderColor
            cssClass: cssClass
            description: description
            id: id
            type: 9.301444243932576
            textColor: textColor
            displaySrc: displaySrc
          myVoteId: myVoteId
          isDeletedUser: true
          avatarSrc: avatarSrc
          hasImages: true
          votes: 5
          _id: _id
          isSpam: true
          isByAdmin: true
        - date: 2000-01-23T04:56:07.000+00:00
          votesDown: 2
          hasChildren: true
          commenterName: commenterName
          isBlocked: true
          isByModerator: true
          rating: 7.061401241503109
          commenterLink: commenterLink
          isVotedDown: true
          commentHTML: commentHTML
          isDeleted: true
          children:
          - null
          - null
          nestedChildrenCount: 6
          isLocked: true
          viewCount: 3.616076749251911
          votesUp: 5
          displayLabel: displayLabel
          isPinned: true
          isVotedUp: true
          verified: true
          feedbackIds:
          - feedbackIds
          - feedbackIds
          anonUserId: anonUserId
          childCount: 1
          userId: userId
          isUnread: true
          parentId: parentId
          isFlagged: true
          badges:
          - displayLabel: displayLabel
            backgroundColor: backgroundColor
            borderColor: borderColor
            cssClass: cssClass
            description: description
            id: id
            type: 9.301444243932576
            textColor: textColor
            displaySrc: displaySrc
          - displayLabel: displayLabel
            backgroundColor: backgroundColor
            borderColor: borderColor
            cssClass: cssClass
            description: description
            id: id
            type: 9.301444243932576
            textColor: textColor
            displaySrc: displaySrc
          myVoteId: myVoteId
          isDeletedUser: true
          avatarSrc: avatarSrc
          hasImages: true
          votes: 5
          _id: _id
          isSpam: true
          isByAdmin: true
        notificationCount: 1
        includesPastPages: true
        moduleData:
          key: ""
        commentCount: 4
        isClosed: true
        presencePollState: 1
        userIdWS: userIdWS
        isSiteAdmin: true
        isWhiteLabeled: true
        user: ""
        tenantIdWS: tenantIdWS
        statusCode: 0
        status: status
    SaveCommentResponseOptimized:
      additionalProperties: false
      properties:
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
        comment:
          $ref: '#/components/schemas/PublicComment'
        user:
          allOf:
          - $ref: '#/components/schemas/UserSessionInfo'
          nullable: true
        moduleData:
          additionalProperties: {}
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      required:
      - comment
      - status
      - user
      type: object
    SaveCommentsResponseWithPresence:
      allOf:
      - $ref: '#/components/schemas/SaveCommentResponseOptimized'
      - properties:
          userIdWS:
            $ref: '#/components/schemas/UserIdWS'
        type: object
      example:
        comment:
          date: 2000-01-23T04:56:07.000+00:00
          votesDown: 2
          hasChildren: true
          commenterName: commenterName
          isBlocked: true
          isByModerator: true
          rating: 7.061401241503109
          commenterLink: commenterLink
          isVotedDown: true
          commentHTML: commentHTML
          isDeleted: true
          children:
          - null
          - null
          nestedChildrenCount: 6
          isLocked: true
          viewCount: 3.616076749251911
          votesUp: 5
          displayLabel: displayLabel
          isPinned: true
          isVotedUp: true
          verified: true
          feedbackIds:
          - feedbackIds
          - feedbackIds
          anonUserId: anonUserId
          childCount: 1
          userId: userId
          isUnread: true
          parentId: parentId
          isFlagged: true
          badges:
          - displayLabel: displayLabel
            backgroundColor: backgroundColor
            borderColor: borderColor
            cssClass: cssClass
            description: description
            id: id
            type: 9.301444243932576
            textColor: textColor
            displaySrc: displaySrc
          - displayLabel: displayLabel
            backgroundColor: backgroundColor
            borderColor: borderColor
            cssClass: cssClass
            description: description
            id: id
            type: 9.301444243932576
            textColor: textColor
            displaySrc: displaySrc
          myVoteId: myVoteId
          isDeletedUser: true
          avatarSrc: avatarSrc
          hasImages: true
          votes: 5
          _id: _id
          isSpam: true
          isByAdmin: true
        userIdWS: null
        moduleData:
          key: ""
        user: ""
        status: success
    Record_string.string-or-number_:
      additionalProperties:
        $ref: '#/components/schemas/Record_string_string_or_number__value'
      description: Construct a type with a set of properties K of type T
      properties: {}
      type: object
    CommentData:
      additionalProperties: false
      example:
        date: 0.8008281904610115
        productId: 1.4658129805029452
        questionValues:
          key: Record_string_string_or_number__value
        pageTitle: pageTitle
        commenterName: commenterName
        rating: 5.962133916683182
        feedbackIds:
        - feedbackIds
        - feedbackIds
        commenterLink: commenterLink
        autoplayDelayMS: 5.637376656633329
        urlId: urlId
        userId: userId
        parentId: parentId
        url: url
        commenterEmail: commenterEmail
        fromOfflineRestore: true
        isFromMyAccountPage: true
        hashTags:
        - retain: true
          id: id
          tag: tag
          url: url
        - retain: true
          id: id
          tag: tag
          url: url
        moderationGroupIds:
        - moderationGroupIds
        - moderationGroupIds
        localDateString: localDateString
        meta: "{}"
        mentions:
        - rawTag: rawTag
          id: id
          tag: tag
          type: user
          sent: true
        - rawTag: rawTag
          id: id
          tag: tag
          type: user
          sent: true
        avatarSrc: avatarSrc
        comment: comment
        localDateHours: 6.027456183070403
      properties:
        date:
          format: double
          type: number
        localDateString:
          type: string
        localDateHours:
          format: double
          type: number
        commenterName:
          type: string
        commenterEmail:
          nullable: true
          type: string
        commenterLink:
          nullable: true
          type: string
        comment:
          type: string
        productId:
          format: double
          type: number
        userId:
          nullable: true
          type: string
        avatarSrc:
          nullable: true
          type: string
        parentId:
          nullable: true
          type: string
        mentions:
          items:
            $ref: '#/components/schemas/CommentUserMentionInfo'
          type: array
        hashTags:
          items:
            $ref: '#/components/schemas/CommentUserHashTagInfo'
          type: array
        pageTitle:
          type: string
        isFromMyAccountPage:
          type: boolean
        url:
          type: string
        urlId:
          type: string
        meta:
          additionalProperties: false
          type: object
        moderationGroupIds:
          items:
            type: string
          type: array
        rating:
          format: double
          type: number
        fromOfflineRestore:
          type: boolean
        autoplayDelayMS:
          format: double
          type: number
        feedbackIds:
          items:
            type: string
          type: array
        questionValues:
          additionalProperties:
            $ref: '#/components/schemas/Record_string_string_or_number__value'
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      required:
      - comment
      - commenterName
      - date
      - url
      - urlId
      type: object
    Pick_FComment.isDeleted-or-commentHTML-or-commenterName-or-userId_:
      description: "From T, pick a set of properties whose keys are in the union K"
      example:
        commentHTML: commentHTML
        isDeleted: true
        commenterName: commenterName
        userId: userId
      properties:
        userId:
          type: string
        commenterName:
          type: string
        commentHTML:
          type: string
        isDeleted:
          type: boolean
      required:
      - commentHTML
      - commenterName
      type: object
    PublicAPIDeleteCommentResponse:
      example:
        comment:
          commentHTML: commentHTML
          isDeleted: true
          commenterName: commenterName
          userId: userId
        hardRemoved: true
        status: success
      properties:
        comment:
          $ref: '#/components/schemas/Pick_FComment.isDeleted-or-commentHTML-or-commenterName-or-userId_'
        hardRemoved:
          type: boolean
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
      required:
      - hardRemoved
      - status
      type: object
    CheckBlockedCommentsResponse:
      example:
        commentStatuses:
          key: true
        status: success
      properties:
        commentStatuses:
          additionalProperties:
            type: boolean
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
      required:
      - commentStatuses
      - status
      type: object
    VoteResponseUser:
      additionalProperties: false
      example:
        sessionId: sessionId
      properties:
        sessionId:
          nullable: true
          type: string
      type: object
    VoteResponse:
      additionalProperties: false
      example:
        editKey: editKey
        isVerified: true
        voteId: voteId
        user:
          sessionId: sessionId
        status: success
      properties:
        status:
          $ref: '#/components/schemas/VoteResponse_status'
        voteId:
          type: string
        isVerified:
          type: boolean
        user:
          $ref: '#/components/schemas/VoteResponseUser'
        editKey:
          type: string
      required:
      - status
      type: object
    VoteBodyParams:
      additionalProperties: false
      example:
        commenterName: commenterName
        voteDir: up
        url: url
        commenterEmail: commenterEmail
      properties:
        commenterEmail:
          nullable: true
          type: string
        commenterName:
          nullable: true
          type: string
        voteDir:
          enum:
          - up
          - down
          type: string
        url:
          nullable: true
          type: string
      required:
      - commenterEmail
      - commenterName
      - url
      - voteDir
      type: object
    VoteDeleteResponse:
      additionalProperties: false
      example:
        wasPendingVote: true
        status: success
      properties:
        status:
          $ref: '#/components/schemas/VoteDeleteResponse_status'
        wasPendingVote:
          type: boolean
      required:
      - status
      type: object
    GetCommentVoteUserNamesSuccessResponse:
      additionalProperties: false
      example:
        hasMore: true
        voteUserNames:
        - voteUserNames
        - voteUserNames
        status: success
      properties:
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
        voteUserNames:
          items:
            type: string
          type: array
        hasMore:
          type: boolean
      required:
      - hasMore
      - status
      - voteUserNames
      type: object
    ChangeCommentPinStatusResponse:
      example:
        commentPositions:
          key:
            before: before
            after: after
        status: success
      properties:
        commentPositions:
          additionalProperties:
            $ref: '#/components/schemas/Record_string__before_string_or_null__after_string_or_null___value'
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
      required:
      - commentPositions
      - status
      type: object
    BlockSuccess:
      additionalProperties: false
      example:
        commentStatuses:
          key: true
        status: success
      properties:
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
        commentStatuses:
          additionalProperties:
            type: boolean
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      required:
      - commentStatuses
      - status
      type: object
    PublicBlockFromCommentParams:
      additionalProperties: false
      example:
        commentIds:
        - commentIds
        - commentIds
      properties:
        commentIds:
          description: A list of comment ids to check if are blocked after performing
            the update.
          items:
            type: string
          nullable: true
          type: array
      required:
      - commentIds
      type: object
    UnblockSuccess:
      additionalProperties: false
      example:
        commentStatuses:
          key: true
        status: success
      properties:
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
        commentStatuses:
          additionalProperties:
            type: boolean
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      required:
      - commentStatuses
      - status
      type: object
    APIStatus:
      enum:
      - success
      - failed
      type: string
    FeedPostMediaItemAsset:
      additionalProperties: false
      example:
        src: src
        w: 6.027456183070403
        h: 1.4658129805029452
      properties:
        w:
          format: double
          type: number
        h:
          format: double
          type: number
        src:
          type: string
      required:
      - h
      - src
      - w
      type: object
    FeedPostMediaItem:
      additionalProperties: false
      example:
        sizes:
          src: src
          w: 6.027456183070403
          h: 1.4658129805029452
        link: link
        title: title
      properties:
        title:
          type: string
        link:
          type: string
        sizes:
          $ref: '#/components/schemas/FeedPostMediaItemAsset'
      type: object
    FeedPostLink:
      additionalProperties: false
      example:
        link: link
        title: title
      properties:
        title:
          type: string
        link:
          type: string
      type: object
    FeedPost:
      additionalProperties: false
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        fromUserId: fromUserId
        meta:
          key: meta
        weight: 0.8008281904610115
        links:
        - link: link
          title: title
        - link: link
          title: title
        _id: _id
        fromIpHash: fromIpHash
        media:
        - sizes:
            src: src
            w: 6.027456183070403
            h: 1.4658129805029452
          link: link
          title: title
        - sizes:
            src: src
            w: 6.027456183070403
            h: 1.4658129805029452
          link: link
          title: title
        contentHTML: contentHTML
        tags:
        - tags
        - tags
      properties:
        _id:
          type: string
        fromUserId:
          type: string
        fromIpHash:
          type: string
        tags:
          items:
            type: string
          type: array
        weight:
          format: double
          type: number
        meta:
          additionalProperties:
            type: string
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
        contentHTML:
          type: string
        media:
          items:
            $ref: '#/components/schemas/FeedPostMediaItem'
          type: array
        links:
          items:
            $ref: '#/components/schemas/FeedPostLink'
          type: array
        createdAt:
          format: date-time
          type: string
      required:
      - _id
      - createdAt
      type: object
    GetFeedPostsResponse:
      additionalProperties: false
      example:
        feedPosts:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          fromUserId: fromUserId
          meta:
            key: meta
          weight: 0.8008281904610115
          links:
          - link: link
            title: title
          - link: link
            title: title
          _id: _id
          fromIpHash: fromIpHash
          media:
          - sizes:
              src: src
              w: 6.027456183070403
              h: 1.4658129805029452
            link: link
            title: title
          - sizes:
              src: src
              w: 6.027456183070403
              h: 1.4658129805029452
            link: link
            title: title
          contentHTML: contentHTML
          tags:
          - tags
          - tags
        - createdAt: 2000-01-23T04:56:07.000+00:00
          fromUserId: fromUserId
          meta:
            key: meta
          weight: 0.8008281904610115
          links:
          - link: link
            title: title
          - link: link
            title: title
          _id: _id
          fromIpHash: fromIpHash
          media:
          - sizes:
              src: src
              w: 6.027456183070403
              h: 1.4658129805029452
            link: link
            title: title
          - sizes:
              src: src
              w: 6.027456183070403
              h: 1.4658129805029452
            link: link
            title: title
          contentHTML: contentHTML
          tags:
          - tags
          - tags
        status: success
      properties:
        status:
          $ref: '#/components/schemas/APIStatus'
        feedPosts:
          items:
            $ref: '#/components/schemas/FeedPost'
          type: array
      required:
      - feedPosts
      - status
      type: object
    CreateFeedPostsResponse:
      additionalProperties: false
      example:
        feedPost:
          createdAt: 2000-01-23T04:56:07.000+00:00
          fromUserId: fromUserId
          meta:
            key: meta
          weight: 0.8008281904610115
          links:
          - link: link
            title: title
          - link: link
            title: title
          _id: _id
          fromIpHash: fromIpHash
          media:
          - sizes:
              src: src
              w: 6.027456183070403
              h: 1.4658129805029452
            link: link
            title: title
          - sizes:
              src: src
              w: 6.027456183070403
              h: 1.4658129805029452
            link: link
            title: title
          contentHTML: contentHTML
          tags:
          - tags
          - tags
        status: success
      properties:
        status:
          $ref: '#/components/schemas/APIStatus'
        feedPost:
          $ref: '#/components/schemas/FeedPost'
      required:
      - feedPost
      - status
      type: object
    AddDomainConfigParams:
      additionalProperties: false
      example:
        emailHeaders:
          key: emailHeaders
        emailFromName: emailFromName
        logoSrc: logoSrc
        emailFromEmail: emailFromEmail
        logoSrc100px: logoSrc100px
        domain: domain
        footerUnsubscribeURL: footerUnsubscribeURL
      properties:
        domain:
          type: string
        emailFromName:
          type: string
        emailFromEmail:
          type: string
        logoSrc:
          type: string
        logoSrc100px:
          type: string
        footerUnsubscribeURL:
          type: string
        emailHeaders:
          additionalProperties:
            type: string
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      required:
      - domain
      type: object
    UpdateDomainConfigParams:
      additionalProperties: false
      example:
        emailHeaders:
          key: emailHeaders
        emailFromName: emailFromName
        logoSrc: logoSrc
        emailFromEmail: emailFromEmail
        logoSrc100px: logoSrc100px
        domain: domain
        footerUnsubscribeURL: footerUnsubscribeURL
      properties:
        domain:
          type: string
        emailFromName:
          type: string
        emailFromEmail:
          type: string
        logoSrc:
          type: string
        logoSrc100px:
          type: string
        footerUnsubscribeURL:
          type: string
        emailHeaders:
          additionalProperties:
            type: string
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      required:
      - domain
      type: object
    PatchDomainConfigParams:
      additionalProperties: false
      example:
        emailHeaders:
          key: emailHeaders
        emailFromName: emailFromName
        logoSrc: logoSrc
        emailFromEmail: emailFromEmail
        logoSrc100px: logoSrc100px
        domain: domain
        footerUnsubscribeURL: footerUnsubscribeURL
      properties:
        domain:
          type: string
        emailFromName:
          type: string
        emailFromEmail:
          type: string
        logoSrc:
          type: string
        logoSrc100px:
          type: string
        footerUnsubscribeURL:
          type: string
        emailHeaders:
          additionalProperties:
            type: string
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      type: object
    Pick_FComment.APICommentFieldsKeys_:
      description: "From T, pick a set of properties whose keys are in the union K"
      example:
        date: 2000-01-23T04:56:07.000+00:00
        pageTitle: pageTitle
        rating: 2.3021358869347655
        approved: true
        hashTags:
        - retain: true
          id: id
          tag: tag
          url: url
        - retain: true
          id: id
          tag: tag
          url: url
        localDateString: localDateString
        notificationSentForParentTenant: true
        verifiedDate: 2000-01-23T04:56:07.000+00:00
        isLocked: true
        aiDeterminedSpam: true
        reviewed: true
        fromProductId: 7
        flagCount: 5
        hasCode: true
        feedbackIds:
        - feedbackIds
        - feedbackIds
        urlIdRaw: urlIdRaw
        moderationGroupIds:
        - moderationGroupIds
        - moderationGroupIds
        isDeletedUser: true
        meta:
          wpUserId: wpUserId
          wpPostId: wpPostId
        mentions:
        - rawTag: rawTag
          id: id
          tag: tag
          type: user
          sent: true
        - rawTag: rawTag
          id: id
          tag: tag
          type: user
          sent: true
        domain: domain
        avatarSrc: avatarSrc
        _id: _id
        isSpam: true
        externalParentId: externalParentId
        votesDown: 5
        commenterName: commenterName
        isByModerator: true
        commenterLink: commenterLink
        urlId: urlId
        locale: locale
        commentHTML: commentHTML
        isDeleted: true
        localDateHours: 0
        votesUp: 1
        displayLabel: displayLabel
        isPinned: true
        verified: true
        anonUserId: anonUserId
        externalId: externalId
        hasLinks: true
        expireAt: 2000-01-23T04:56:07.000+00:00
        userId: userId
        url: url
        parentId: parentId
        commenterEmail: commenterEmail
        badges:
        - displayLabel: displayLabel
          backgroundColor: backgroundColor
          borderColor: borderColor
          cssClass: cssClass
          description: description
          id: id
          type: 9.301444243932576
          textColor: textColor
          displaySrc: displaySrc
        - displayLabel: displayLabel
          backgroundColor: backgroundColor
          borderColor: borderColor
          cssClass: cssClass
          description: description
          id: id
          type: 9.301444243932576
          textColor: textColor
          displaySrc: displaySrc
        notificationSentForParent: true
        tenantId: tenantId
        hasImages: true
        comment: comment
        votes: 6
        isByAdmin: true
      properties:
        _id:
          type: string
        urlId:
          type: string
        url:
          type: string
        pageTitle:
          type: string
        date:
          format: date-time
          type: string
        tenantId:
          type: string
        urlIdRaw:
          type: string
        userId:
          type: string
        anonUserId:
          type: string
        commenterEmail:
          type: string
        commenterName:
          type: string
        commenterLink:
          type: string
        comment:
          type: string
        commentHTML:
          type: string
        parentId:
          type: string
        localDateString:
          type: string
        localDateHours:
          format: int32
          type: integer
        votes:
          format: int32
          type: integer
        votesUp:
          format: int32
          type: integer
        votesDown:
          format: int32
          type: integer
        expireAt:
          format: date-time
          type: string
        verified:
          type: boolean
        verifiedDate:
          format: date-time
          type: string
        notificationSentForParent:
          type: boolean
        notificationSentForParentTenant:
          type: boolean
        reviewed:
          type: boolean
        externalId:
          type: string
        externalParentId:
          type: string
        avatarSrc:
          type: string
        isSpam:
          type: boolean
        aiDeterminedSpam:
          type: boolean
        hasImages:
          type: boolean
        hasLinks:
          type: boolean
        hasCode:
          type: boolean
        approved:
          type: boolean
        locale:
          type: string
        isDeleted:
          type: boolean
        isDeletedUser:
          type: boolean
        isByAdmin:
          type: boolean
        isByModerator:
          type: boolean
        isPinned:
          type: boolean
        isLocked:
          type: boolean
        flagCount:
          format: int32
          type: integer
        rating:
          format: double
          type: number
        displayLabel:
          type: string
        fromProductId:
          format: int32
          type: integer
        meta:
          $ref: '#/components/schemas/Pick_FComment_APICommentFieldsKeys__meta'
        mentions:
          items:
            $ref: '#/components/schemas/CommentUserMentionInfo'
          type: array
        hashTags:
          items:
            $ref: '#/components/schemas/CommentUserHashTagInfo'
          type: array
        badges:
          items:
            $ref: '#/components/schemas/CommentUserBadgeInfo'
          type: array
        domain:
          type: string
        moderationGroupIds:
          items:
            type: string
          type: array
        feedbackIds:
          items:
            type: string
          type: array
      required:
      - _id
      - approved
      - comment
      - commentHTML
      - commenterName
      - date
      - locale
      - tenantId
      - url
      - urlId
      - verified
      type: object
    APIComment:
      $ref: '#/components/schemas/Pick_FComment.APICommentFieldsKeys_'
    APIGetCommentResponse:
      additionalProperties: false
      example:
        comment:
          date: 2000-01-23T04:56:07.000+00:00
          pageTitle: pageTitle
          rating: 2.3021358869347655
          approved: true
          hashTags:
          - retain: true
            id: id
            tag: tag
            url: url
          - retain: true
            id: id
            tag: tag
            url: url
          localDateString: localDateString
          notificationSentForParentTenant: true
          verifiedDate: 2000-01-23T04:56:07.000+00:00
          isLocked: true
          aiDeterminedSpam: true
          reviewed: true
          fromProductId: 7
          flagCount: 5
          hasCode: true
          feedbackIds:
          - feedbackIds
          - feedbackIds
          urlIdRaw: urlIdRaw
          moderationGroupIds:
          - moderationGroupIds
          - moderationGroupIds
          isDeletedUser: true
          meta:
            wpUserId: wpUserId
            wpPostId: wpPostId
          mentions:
          - rawTag: rawTag
            id: id
            tag: tag
            type: user
            sent: true
          - rawTag: rawTag
            id: id
            tag: tag
            type: user
            sent: true
          domain: domain
          avatarSrc: avatarSrc
          _id: _id
          isSpam: true
          externalParentId: externalParentId
          votesDown: 5
          commenterName: commenterName
          isByModerator: true
          commenterLink: commenterLink
          urlId: urlId
          locale: locale
          commentHTML: commentHTML
          isDeleted: true
          localDateHours: 0
          votesUp: 1
          displayLabel: displayLabel
          isPinned: true
          verified: true
          anonUserId: anonUserId
          externalId: externalId
          hasLinks: true
          expireAt: 2000-01-23T04:56:07.000+00:00
          userId: userId
          url: url
          parentId: parentId
          commenterEmail: commenterEmail
          badges:
          - displayLabel: displayLabel
            backgroundColor: backgroundColor
            borderColor: borderColor
            cssClass: cssClass
            description: description
            id: id
            type: 9.301444243932576
            textColor: textColor
            displaySrc: displaySrc
          - displayLabel: displayLabel
            backgroundColor: backgroundColor
            borderColor: borderColor
            cssClass: cssClass
            description: description
            id: id
            type: 9.301444243932576
            textColor: textColor
            displaySrc: displaySrc
          notificationSentForParent: true
          tenantId: tenantId
          hasImages: true
          comment: comment
          votes: 6
          isByAdmin: true
        status: success
      properties:
        status:
          $ref: '#/components/schemas/APIStatus'
        comment:
          $ref: '#/components/schemas/Pick_FComment.APICommentFieldsKeys_'
      required:
      - comment
      - status
      type: object
    APIGetCommentsResponse:
      additionalProperties: false
      example:
        comments:
        - null
        - null
        status: success
      properties:
        status:
          $ref: '#/components/schemas/APIStatus'
        comments:
          items:
            $ref: '#/components/schemas/APIComment'
          type: array
      required:
      - comments
      - status
      type: object
    Pick_APIComment.UpdatableCommentFields_:
      description: "From T, pick a set of properties whose keys are in the union K"
      properties:
        urlId:
          type: string
        url:
          type: string
        pageTitle:
          type: string
        date:
          format: date-time
          type: string
        urlIdRaw:
          type: string
        userId:
          type: string
        commenterEmail:
          type: string
        commenterName:
          type: string
        commenterLink:
          type: string
        comment:
          type: string
        commentHTML:
          type: string
        parentId:
          type: string
        localDateString:
          type: string
        localDateHours:
          format: int32
          type: integer
        votes:
          format: int32
          type: integer
        votesUp:
          format: int32
          type: integer
        votesDown:
          format: int32
          type: integer
        expireAt:
          format: date-time
          type: string
        verified:
          type: boolean
        verifiedDate:
          format: date-time
          type: string
        notificationSentForParent:
          type: boolean
        notificationSentForParentTenant:
          type: boolean
        reviewed:
          type: boolean
        externalId:
          type: string
        externalParentId:
          type: string
        avatarSrc:
          type: string
        isSpam:
          type: boolean
        approved:
          type: boolean
        isDeleted:
          type: boolean
        isDeletedUser:
          type: boolean
        isByAdmin:
          type: boolean
        isByModerator:
          type: boolean
        isPinned:
          type: boolean
        isLocked:
          type: boolean
        flagCount:
          format: int32
          type: integer
        displayLabel:
          type: string
        meta:
          $ref: '#/components/schemas/Pick_FComment_APICommentFieldsKeys__meta'
        moderationGroupIds:
          items:
            type: string
          type: array
        feedbackIds:
          items:
            type: string
          type: array
      required:
      - approved
      - comment
      - commentHTML
      - commenterName
      - date
      - url
      - urlId
      - verified
      type: object
    UpdatableCommentParams:
      $ref: '#/components/schemas/Pick_APIComment.UpdatableCommentFields_'
    DeleteCommentAction:
      enum:
      - already-deleted
      - hard-removed
      - anonymized
      type: string
    DeleteCommentResult:
      example:
        action: already-deleted
        status: success
      properties:
        action:
          $ref: '#/components/schemas/DeleteCommentAction'
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
      required:
      - action
      - status
      type: object
    UserId:
      type: string
    FDomain:
      type: string
    CommentLog:
      items: {}
      type: array
    FComment:
      additionalProperties: false
      example:
        date: 2000-01-23T04:56:07.000+00:00
        pageNumber: 5
        pageTitle: pageTitle
        rating: 3.616076749251911
        approved: true
        hashTags:
        - retain: true
          id: id
          tag: tag
          url: url
        - retain: true
          id: id
          tag: tag
          url: url
        localDateString: localDateString
        notificationSentForParentTenant: true
        verifiedDate: 2000-01-23T04:56:07.000+00:00
        isLocked: true
        groupIds:
        - groupIds
        - groupIds
        aiDeterminedSpam: true
        reviewed: true
        logs:
        - - ""
          - ""
        - - ""
          - ""
        fromProductId: 2
        flagCount: 9
        pageNumberNF: 7
        hasCode: true
        feedbackIds:
        - feedbackIds
        - feedbackIds
        autoplayJobId: autoplayJobId
        ipHash: ipHash
        fromOfflineRestore: true
        urlIdRaw: urlIdRaw
        moderationGroupIds:
        - moderationGroupIds
        - moderationGroupIds
        didProcessBadges: true
        isDeletedUser: true
        meta:
          wpUserId: wpUserId
          wpPostId: wpPostId
        mentions:
        - rawTag: rawTag
          id: id
          tag: tag
          type: user
          sent: true
        - rawTag: rawTag
          id: id
          tag: tag
          type: user
          sent: true
        domain: ""
        avatarSrc: avatarSrc
        _id: _id
        isSpam: true
        veteranBadgeProcessed: veteranBadgeProcessed
        externalParentId: externalParentId
        votesDown: 5
        commenterName: commenterName
        isByModerator: true
        commenterLink: commenterLink
        urlId: urlId
        locale: locale
        commentHTML: commentHTML
        isDeleted: true
        imported: true
        pageNumberOF: 2
        localDateHours: 0
        viewCount: 7.386281948385884
        votesUp: 1
        displayLabel: displayLabel
        isPinned: true
        verified: true
        anonUserId: anonUserId
        externalId: externalId
        hasLinks: true
        autoplayDelayMS: 4
        expireAt: 2000-01-23T04:56:07.000+00:00
        userId: ""
        url: url
        parentId: parentId
        commenterEmail: commenterEmail
        badges:
        - displayLabel: displayLabel
          backgroundColor: backgroundColor
          borderColor: borderColor
          cssClass: cssClass
          description: description
          id: id
          type: 9.301444243932576
          textColor: textColor
          displaySrc: displaySrc
        - displayLabel: displayLabel
          backgroundColor: backgroundColor
          borderColor: borderColor
          cssClass: cssClass
          description: description
          id: id
          type: 9.301444243932576
          textColor: textColor
          displaySrc: displaySrc
        notificationSentForParent: true
        tenantId: tenantId
        hasImages: true
        comment: comment
        votes: 6
        isBannedUser: true
        verificationId: verificationId
        isByAdmin: true
      properties:
        _id:
          type: string
        tenantId:
          type: string
        urlId:
          type: string
        urlIdRaw:
          type: string
        url:
          type: string
        pageTitle:
          nullable: true
          type: string
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          nullable: true
        anonUserId:
          nullable: true
          type: string
        commenterEmail:
          nullable: true
          type: string
        commenterName:
          type: string
        commenterLink:
          type: string
        comment:
          type: string
        commentHTML:
          type: string
        parentId:
          nullable: true
          type: string
        date:
          format: date-time
          nullable: true
          type: string
        localDateString:
          nullable: true
          type: string
        localDateHours:
          format: int32
          nullable: true
          type: integer
        votes:
          format: int32
          nullable: true
          type: integer
        votesUp:
          format: int32
          nullable: true
          type: integer
        votesDown:
          format: int32
          nullable: true
          type: integer
        expireAt:
          format: date-time
          nullable: true
          type: string
        verified:
          type: boolean
        verifiedDate:
          format: date-time
          nullable: true
          type: string
        verificationId:
          nullable: true
          type: string
        notificationSentForParent:
          type: boolean
        notificationSentForParentTenant:
          type: boolean
        reviewed:
          type: boolean
        imported:
          type: boolean
        externalId:
          type: string
        externalParentId:
          nullable: true
          type: string
        avatarSrc:
          nullable: true
          type: string
        isSpam:
          type: boolean
        aiDeterminedSpam:
          type: boolean
        hasImages:
          type: boolean
        pageNumber:
          format: int32
          nullable: true
          type: integer
        pageNumberOF:
          format: int32
          nullable: true
          type: integer
        pageNumberNF:
          format: int32
          nullable: true
          type: integer
        hasLinks:
          type: boolean
        hasCode:
          type: boolean
        approved:
          type: boolean
        locale:
          nullable: true
          type: string
        isDeleted:
          type: boolean
        isDeletedUser:
          type: boolean
        isBannedUser:
          type: boolean
        isByAdmin:
          type: boolean
        isByModerator:
          type: boolean
        isPinned:
          nullable: true
          type: boolean
        isLocked:
          nullable: true
          type: boolean
        flagCount:
          format: int32
          nullable: true
          type: integer
        rating:
          format: double
          nullable: true
          type: number
        displayLabel:
          nullable: true
          type: string
        fromProductId:
          format: int32
          type: integer
        meta:
          $ref: '#/components/schemas/FComment_meta'
        ipHash:
          type: string
        mentions:
          items:
            $ref: '#/components/schemas/CommentUserMentionInfo'
          type: array
        hashTags:
          items:
            $ref: '#/components/schemas/CommentUserHashTagInfo'
          type: array
        badges:
          items:
            $ref: '#/components/schemas/CommentUserBadgeInfo'
          nullable: true
          type: array
        domain:
          allOf:
          - $ref: '#/components/schemas/FDomain'
          nullable: true
        veteranBadgeProcessed:
          type: string
        moderationGroupIds:
          items:
            type: string
          nullable: true
          type: array
        didProcessBadges:
          type: boolean
        fromOfflineRestore:
          type: boolean
        autoplayJobId:
          type: string
        autoplayDelayMS:
          format: int64
          type: integer
        feedbackIds:
          items:
            type: string
          type: array
        logs:
          items:
            $ref: '#/components/schemas/CommentLog'
          nullable: true
          type: array
        groupIds:
          items:
            type: string
          nullable: true
          type: array
        viewCount:
          format: double
          nullable: true
          type: number
      required:
      - _id
      - approved
      - comment
      - commentHTML
      - commenterName
      - date
      - locale
      - tenantId
      - url
      - urlId
      - verified
      type: object
    SaveCommentResponse:
      additionalProperties: false
      example:
        comment:
          date: 2000-01-23T04:56:07.000+00:00
          pageNumber: 5
          pageTitle: pageTitle
          rating: 3.616076749251911
          approved: true
          hashTags:
          - retain: true
            id: id
            tag: tag
            url: url
          - retain: true
            id: id
            tag: tag
            url: url
          localDateString: localDateString
          notificationSentForParentTenant: true
          verifiedDate: 2000-01-23T04:56:07.000+00:00
          isLocked: true
          groupIds:
          - groupIds
          - groupIds
          aiDeterminedSpam: true
          reviewed: true
          logs:
          - - ""
            - ""
          - - ""
            - ""
          fromProductId: 2
          flagCount: 9
          pageNumberNF: 7
          hasCode: true
          feedbackIds:
          - feedbackIds
          - feedbackIds
          autoplayJobId: autoplayJobId
          ipHash: ipHash
          fromOfflineRestore: true
          urlIdRaw: urlIdRaw
          moderationGroupIds:
          - moderationGroupIds
          - moderationGroupIds
          didProcessBadges: true
          isDeletedUser: true
          meta:
            wpUserId: wpUserId
            wpPostId: wpPostId
          mentions:
          - rawTag: rawTag
            id: id
            tag: tag
            type: user
            sent: true
          - rawTag: rawTag
            id: id
            tag: tag
            type: user
            sent: true
          domain: ""
          avatarSrc: avatarSrc
          _id: _id
          isSpam: true
          veteranBadgeProcessed: veteranBadgeProcessed
          externalParentId: externalParentId
          votesDown: 5
          commenterName: commenterName
          isByModerator: true
          commenterLink: commenterLink
          urlId: urlId
          locale: locale
          commentHTML: commentHTML
          isDeleted: true
          imported: true
          pageNumberOF: 2
          localDateHours: 0
          viewCount: 7.386281948385884
          votesUp: 1
          displayLabel: displayLabel
          isPinned: true
          verified: true
          anonUserId: anonUserId
          externalId: externalId
          hasLinks: true
          autoplayDelayMS: 4
          expireAt: 2000-01-23T04:56:07.000+00:00
          userId: ""
          url: url
          parentId: parentId
          commenterEmail: commenterEmail
          badges:
          - displayLabel: displayLabel
            backgroundColor: backgroundColor
            borderColor: borderColor
            cssClass: cssClass
            description: description
            id: id
            type: 9.301444243932576
            textColor: textColor
            displaySrc: displaySrc
          - displayLabel: displayLabel
            backgroundColor: backgroundColor
            borderColor: borderColor
            cssClass: cssClass
            description: description
            id: id
            type: 9.301444243932576
            textColor: textColor
            displaySrc: displaySrc
          notificationSentForParent: true
          tenantId: tenantId
          hasImages: true
          comment: comment
          votes: 6
          isBannedUser: true
          verificationId: verificationId
          isByAdmin: true
        moduleData:
          key: ""
        user: ""
        status: success
      properties:
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
        comment:
          $ref: '#/components/schemas/FComment'
        user:
          allOf:
          - $ref: '#/components/schemas/UserSessionInfo'
          nullable: true
        moduleData:
          additionalProperties: {}
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      required:
      - comment
      - status
      - user
      type: object
    CreateCommentParams:
      additionalProperties: false
      example:
        date: 0.8008281904610115
        votesDown: 7.061401241503109
        pageTitle: pageTitle
        commenterName: commenterName
        rating: 5.962133916683182
        commenterLink: commenterLink
        urlId: urlId
        locale: locale
        hashTags:
        - retain: true
          id: id
          tag: tag
          url: url
        - retain: true
          id: id
          tag: tag
          url: url
        approved: true
        localDateString: localDateString
        reviewed: true
        localDateHours: 6.027456183070403
        votesUp: 9.301444243932576
        productId: 1.4658129805029452
        questionValues:
          key: Record_string_string_or_number__value
        isPinned: true
        ip: ip
        feedbackIds:
        - feedbackIds
        - feedbackIds
        verified: true
        autoplayDelayMS: 5.637376656633329
        userId: userId
        parentId: parentId
        url: url
        commenterEmail: commenterEmail
        fromOfflineRestore: true
        isFromMyAccountPage: true
        moderationGroupIds:
        - moderationGroupIds
        - moderationGroupIds
        meta: "{}"
        mentions:
        - rawTag: rawTag
          id: id
          tag: tag
          type: user
          sent: true
        - rawTag: rawTag
          id: id
          tag: tag
          type: user
          sent: true
        domain: domain
        avatarSrc: avatarSrc
        comment: comment
        votes: 2.3021358869347655
      properties:
        date:
          format: double
          type: number
        localDateString:
          type: string
        localDateHours:
          format: double
          type: number
        commenterName:
          type: string
        commenterEmail:
          nullable: true
          type: string
        commenterLink:
          nullable: true
          type: string
        comment:
          type: string
        productId:
          format: double
          type: number
        userId:
          nullable: true
          type: string
        avatarSrc:
          nullable: true
          type: string
        parentId:
          nullable: true
          type: string
        mentions:
          items:
            $ref: '#/components/schemas/CommentUserMentionInfo'
          type: array
        hashTags:
          items:
            $ref: '#/components/schemas/CommentUserHashTagInfo'
          type: array
        pageTitle:
          type: string
        isFromMyAccountPage:
          type: boolean
        url:
          type: string
        urlId:
          type: string
        meta:
          additionalProperties: false
          type: object
        moderationGroupIds:
          items:
            type: string
          type: array
        rating:
          format: double
          type: number
        fromOfflineRestore:
          type: boolean
        autoplayDelayMS:
          format: double
          type: number
        feedbackIds:
          items:
            type: string
          type: array
        questionValues:
          additionalProperties:
            $ref: '#/components/schemas/Record_string_string_or_number__value'
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
        approved:
          type: boolean
        domain:
          type: string
        ip:
          type: string
        isPinned:
          type: boolean
        locale:
          description: "Example: en_us"
          type: string
        reviewed:
          type: boolean
        verified:
          type: boolean
        votes:
          format: double
          type: number
        votesDown:
          format: double
          type: number
        votesUp:
          format: double
          type: number
      required:
      - comment
      - commenterName
      - date
      - locale
      - url
      - urlId
      type: object
    FlagCommentResponse:
      additionalProperties: false
      example:
        reason: reason
        code: code
        wasUnapproved: true
        statusCode: 0.8008281904610115
        status: success
      properties:
        statusCode:
          format: double
          type: number
        status:
          $ref: '#/components/schemas/APIStatus'
        code:
          type: string
        reason:
          type: string
        wasUnapproved:
          type: boolean
      required:
      - status
      type: object
    BlockFromCommentParams:
      additionalProperties: false
      example:
        commentIdsToCheck:
        - commentIdsToCheck
        - commentIdsToCheck
      properties:
        commentIdsToCheck:
          items:
            type: string
          type: array
      type: object
    UnBlockFromCommentParams:
      additionalProperties: false
      example:
        commentIdsToCheck:
        - commentIdsToCheck
        - commentIdsToCheck
      properties:
        commentIdsToCheck:
          items:
            type: string
          type: array
      type: object
    Pick_TenantAuditLog.TenantAuditLogKeys_:
      description: "From T, pick a set of properties whose keys are in the union K"
      properties:
        _id:
          type: string
        url:
          type: string
        userId:
          type: string
        username:
          type: string
        resourceName:
          type: string
        crudType:
          enum:
          - c
          - r
          - u
          - d
          - login
          type: string
        from:
          enum:
          - ui
          - api
          - cron
          type: string
        ip:
          type: string
        when:
          format: date-time
          type: string
        description:
          type: string
        serverStartDate:
          format: date-time
          type: string
        objectDetails:
          additionalProperties: {}
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      required:
      - _id
      - crudType
      - resourceName
      type: object
    APIAuditLog:
      $ref: '#/components/schemas/Pick_TenantAuditLog.TenantAuditLogKeys_'
    GetAuditLogsResponse:
      additionalProperties: false
      example:
        auditLogs:
        - null
        - null
        status: success
      properties:
        status:
          $ref: '#/components/schemas/APIStatus'
        auditLogs:
          items:
            $ref: '#/components/schemas/APIAuditLog'
          type: array
      required:
      - auditLogs
      - status
      type: object
    SORT_DIR:
      enum:
      - ASC
      - DESC
      type: string
    DistinctAccumulator:
      $ref: '#/components/schemas/Record_string.number_'
    GroupValues:
      $ref: '#/components/schemas/Record_string.string_'
    AggregationValue:
      properties:
        groups:
          additionalProperties:
            type: string
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
        stringValue:
          type: string
        numericValue:
          format: double
          type: number
        distinctCount:
          format: double
          type: number
        distinctCounts:
          additionalProperties:
            format: double
            type: number
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      type: object
    Record_string.AggregationValue_:
      additionalProperties:
        $ref: '#/components/schemas/AggregationValue'
      description: Construct a type with a set of properties K of type T
      properties: {}
      type: object
    AggregationItem:
      allOf:
      - $ref: '#/components/schemas/Record_string.AggregationValue_'
      - properties:
          groups:
            $ref: '#/components/schemas/GroupValues'
        type: object
      example:
        groups: null
    AggregationResponse:
      additionalProperties: false
      description: The API response returns the aggregated data along with simple
        stats
      example:
        data:
        - groups: null
        - groups: null
        stats:
          scanned: 6.027456183070403
          timeMS: 0.8008281904610115
        status: success
      properties:
        status:
          $ref: '#/components/schemas/APIStatus'
        data:
          items:
            $ref: '#/components/schemas/AggregationItem'
          type: array
        stats:
          $ref: '#/components/schemas/AggregationResponse_stats'
      required:
      - data
      - status
      type: object
    QueryPredicate:
      additionalProperties: false
      example:
        value: QueryPredicate_value
        key: key
        operator: eq
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/QueryPredicate_value'
        operator:
          enum:
          - eq
          - not_eq
          - greater_than
          - less_than
          type: string
      required:
      - key
      - operator
      - value
      type: object
    AggregationOpType:
      description: The supported aggregation operation types
      enum:
      - sum
      - countDistinct
      - distinct
      - avg
      - min
      - max
      - count
      type: string
    AggregationOperation:
      additionalProperties: false
      description: An operation that will be applied on a field
      example:
        op: sum
        field: field
        alias: alias
        expandArray: true
      properties:
        field:
          description: The field to operate on
          type: string
        op:
          $ref: '#/components/schemas/AggregationOpType'
        alias:
          description: "Optional alias for the output; if not provided, a default\
            \ alias is computed"
          type: string
        expandArray:
          type: boolean
      required:
      - field
      - op
      type: object
    AggregationRequest:
      additionalProperties: false
      description: "The aggregation request accepts a resource, optional grouping\
        \ keys, an array of operations, and an optional sort"
      example:
        operations:
        - op: sum
          field: field
          alias: alias
          expandArray: true
        - op: sum
          field: field
          alias: alias
          expandArray: true
        query:
        - value: QueryPredicate_value
          key: key
          operator: eq
        - value: QueryPredicate_value
          key: key
          operator: eq
        resourceName: resourceName
        groupBy:
        - groupBy
        - groupBy
        sort:
          field: field
          dir: asc
      properties:
        query:
          items:
            $ref: '#/components/schemas/QueryPredicate'
          type: array
        resourceName:
          type: string
        groupBy:
          items:
            type: string
          type: array
        operations:
          items:
            $ref: '#/components/schemas/AggregationOperation'
          type: array
        sort:
          $ref: '#/components/schemas/AggregationRequest_sort'
      required:
      - operations
      - resourceName
      type: object
    GetUserPresenceStatuses_200_response:
      anyOf:
      - $ref: '#/components/schemas/GetUserPresenceStatusesResponse'
      - $ref: '#/components/schemas/APIError'
    GetUserNotifications_200_response:
      anyOf:
      - $ref: '#/components/schemas/GetMyNotificationsResponse'
      - $ref: '#/components/schemas/APIError'
    ResetUserNotifications_200_response:
      anyOf:
      - $ref: '#/components/schemas/ResetUserNotificationsResponse'
      - $ref: '#/components/schemas/APIError'
    GetUserNotificationCount_200_response:
      anyOf:
      - $ref: '#/components/schemas/GetUserNotificationCountResponse'
      - $ref: '#/components/schemas/APIError'
    UpdateUserNotificationStatus_200_response:
      anyOf:
      - $ref: '#/components/schemas/UserNotificationWriteResponse'
      - $ref: '#/components/schemas/IgnoredResponse'
      - $ref: '#/components/schemas/APIError'
    FlagCommentPublic_200_response:
      anyOf:
      - $ref: '#/components/schemas/APIEmptyResponse'
      - $ref: '#/components/schemas/APIError'
    GetEventLog_200_response:
      anyOf:
      - $ref: '#/components/schemas/GetEventLogResponse'
      - $ref: '#/components/schemas/APIError'
    GetCommentText_200_response:
      anyOf:
      - $ref: '#/components/schemas/PublicAPIGetCommentTextResponse'
      - $ref: '#/components/schemas/APIError'
    SetCommentText_200_response:
      anyOf:
      - $ref: '#/components/schemas/PublicAPISetCommentTextResponse'
      - $ref: '#/components/schemas/APIError'
    GetCommentsPublic_200_response:
      anyOf:
      - $ref: '#/components/schemas/GetCommentsResponseWithPresence_PublicComment_'
      - $ref: '#/components/schemas/APIError'
    CreateCommentPublic_200_response:
      anyOf:
      - $ref: '#/components/schemas/SaveCommentsResponseWithPresence'
      - $ref: '#/components/schemas/APIError'
    DeleteCommentPublic_200_response:
      anyOf:
      - $ref: '#/components/schemas/PublicAPIDeleteCommentResponse'
      - $ref: '#/components/schemas/APIError'
    CheckedCommentsForBlocked_200_response:
      anyOf:
      - $ref: '#/components/schemas/CheckBlockedCommentsResponse'
      - $ref: '#/components/schemas/APIError'
    VoteComment_200_response:
      anyOf:
      - $ref: '#/components/schemas/VoteResponse'
      - $ref: '#/components/schemas/APIError'
    DeleteCommentVote_200_response:
      anyOf:
      - $ref: '#/components/schemas/VoteDeleteResponse'
      - $ref: '#/components/schemas/APIError'
    GetCommentVoteUserNames_200_response:
      anyOf:
      - $ref: '#/components/schemas/GetCommentVoteUserNamesSuccessResponse'
      - $ref: '#/components/schemas/APIError'
    PinComment_200_response:
      anyOf:
      - $ref: '#/components/schemas/ChangeCommentPinStatusResponse'
      - $ref: '#/components/schemas/APIError'
    LockComment_200_response:
      anyOf:
      - $ref: '#/components/schemas/APIError'
      - $ref: '#/components/schemas/APIEmptyResponse'
    BlockFromComment_200_response:
      anyOf:
      - $ref: '#/components/schemas/BlockSuccess'
      - $ref: '#/components/schemas/APIError'
    UnBlockComment_200_response:
      anyOf:
      - $ref: '#/components/schemas/UnblockSuccess'
      - $ref: '#/components/schemas/APIError'
    GetFeedPosts_200_response:
      anyOf:
      - $ref: '#/components/schemas/GetFeedPostsResponse'
      - $ref: '#/components/schemas/APIError'
    CreateFeedPost_200_response:
      anyOf:
      - $ref: '#/components/schemas/CreateFeedPostsResponse'
      - $ref: '#/components/schemas/APIError'
    GetDomainConfigs_200_response_anyOf:
      example:
        configurations: ""
        status: ""
      properties:
        configurations: {}
        status: {}
      required:
      - configurations
      - status
      type: object
    GetDomainConfigs_200_response_anyOf_1:
      example:
        reason: reason
        code: code
        status: ""
      properties:
        reason:
          type: string
        code:
          type: string
        status: {}
      required:
      - code
      - reason
      - status
      type: object
    GetDomainConfigs_200_response:
      anyOf:
      - $ref: '#/components/schemas/GetDomainConfigs_200_response_anyOf'
      - $ref: '#/components/schemas/GetDomainConfigs_200_response_anyOf_1'
    AddDomainConfig_200_response_anyOf:
      example:
        configuration: ""
        status: ""
      properties:
        configuration: {}
        status: {}
      required:
      - configuration
      - status
      type: object
    AddDomainConfig_200_response:
      anyOf:
      - $ref: '#/components/schemas/GetDomainConfigs_200_response_anyOf_1'
      - $ref: '#/components/schemas/AddDomainConfig_200_response_anyOf'
    GetDomainConfig_200_response:
      anyOf:
      - $ref: '#/components/schemas/AddDomainConfig_200_response_anyOf'
      - $ref: '#/components/schemas/GetDomainConfigs_200_response_anyOf_1'
    DeleteDomainConfig_200_response:
      example:
        status: ""
      properties:
        status: {}
      required:
      - status
      type: object
    GetComment_200_response:
      anyOf:
      - $ref: '#/components/schemas/APIGetCommentResponse'
      - $ref: '#/components/schemas/APIError'
    DeleteComment_200_response:
      anyOf:
      - $ref: '#/components/schemas/DeleteCommentResult'
      - $ref: '#/components/schemas/APIError'
    GetComments_200_response:
      anyOf:
      - $ref: '#/components/schemas/APIGetCommentsResponse'
      - $ref: '#/components/schemas/APIError'
    SaveComment_200_response:
      anyOf:
      - $ref: '#/components/schemas/SaveCommentResponse'
      - $ref: '#/components/schemas/APIError'
    FlagComment_200_response:
      anyOf:
      - $ref: '#/components/schemas/FlagCommentResponse'
      - $ref: '#/components/schemas/APIError'
    GetAuditLogs_200_response:
      anyOf:
      - $ref: '#/components/schemas/GetAuditLogsResponse'
      - $ref: '#/components/schemas/APIError'
    APIEmptyResponse_anyOf:
      example:
        status: success
      properties:
        status:
          $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
      required:
      - status
      type: object
    Record_string__before_string_or_null__after_string_or_null___value:
      example:
        before: before
        after: after
      properties:
        after:
          type: string
        before:
          type: string
      required:
      - after
      - before
      type: object
    LiveEvent_extraInfo:
      properties:
        commentPositions:
          additionalProperties:
            $ref: '#/components/schemas/Record_string__before_string_or_null__after_string_or_null___value'
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      type: object
    Record_string_string_or_number__value:
      anyOf:
      - type: string
      - format: double
        type: number
    VoteResponse_status:
      anyOf:
      - $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
      - $ref: '#/components/schemas/ImportedAPIStatus.FAILED'
      - enum:
        - pending-verification
        type: string
    VoteDeleteResponse_status:
      anyOf:
      - $ref: '#/components/schemas/ImportedAPIStatus.SUCCESS'
      - $ref: '#/components/schemas/ImportedAPIStatus.FAILED'
    Pick_FComment_APICommentFieldsKeys__meta:
      additionalProperties: {}
      example:
        wpUserId: wpUserId
        wpPostId: wpPostId
      properties:
        wpUserId:
          type: string
        wpPostId:
          type: string
      type: object
    FComment_meta:
      additionalProperties: {}
      example:
        wpUserId: wpUserId
        wpPostId: wpPostId
      nullable: true
      properties:
        wpUserId:
          type: string
        wpPostId:
          type: string
      type: object
    AggregationResponse_stats:
      example:
        scanned: 6.027456183070403
        timeMS: 0.8008281904610115
      properties:
        timeMS:
          format: double
          type: number
        scanned:
          format: double
          type: number
      required:
      - scanned
      - timeMS
      type: object
    QueryPredicate_value:
      anyOf:
      - type: string
      - format: double
        type: number
      - type: boolean
    AggregationRequest_sort:
      example:
        field: field
        dir: asc
      properties:
        dir:
          enum:
          - asc
          - desc
          type: string
        field:
          type: string
      required:
      - dir
      - field
      type: object
  securitySchemes: {}

